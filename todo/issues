It looks like the `Archive.zip` you just gave me only contains the **NestJS worker / back-end** project (≈150 files under `src/…`).  
Nothing from the browser-side “builder” UI (React / Svelte / Next / Vite, etc.) is inside this zip, and the docs are only the generic Nest README. Because of that I can audit the worker in detail but I simply don’t have any UI code to inspect, so I can’t tell you which front-end functions are broken.

### What I **can** already see on the worker side

| Problem                                                                                                                                                                                                                                                                                                              | File                       | Symptom                                                                                                                                                                              | Quick fix                                                                                                                                                                 |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **Live-update / progress events are stubbed out** – there’s a `// TODO: emit SSE chunk event` comment and all the code around it is commented.                                                                                                                                                                       | `src/workers/index.ts`     | Front-end never receives incremental node-status / log chunks → the run screen sits in “Running…” until the DB row flips to `completed`.                                             | Wire-up an `EventEmitter` (or NestJS micro-gateway) that publishes an SSE frame every time `updateNodeExecution()` succeeds in `ExecutionWorker`.                         |
| **Workers wrap every handler in `MetricsBlockHandler`, but `MetricsBlockHandler` calls the inner handler with `(node, executionId)` – several concrete handlers only accept one argument and silently ignore the second.**                                                                                           | `src/workers/handlers/*`   | No crash (TypeScript is structurally tolerant) but the handler code that wants the `executionId` never gets it. E.g. `NotificationBlockHandler` can’t link the row to the execution. | Normalize the interface: `execute(node, ctx)` where `ctx` contains `executionId`, `userId`, previous outputs, etc. Update every handler + type definition once.           |
| **`executeWorkflow()` returns a map of node outputs but never writes the final result back to the DB unless the caller does it.** In `processItem()` you _do_ persist `execRes.status` and `result`, but any code path that calls `ExecutionWorker.executeWorkflow()` directly (tests, scripts) leaves the DB stale. | `src/workers/execution.ts` | Manual CLI runs (e.g. `src/scripts/run-example-workflow.ts`) finish but the dashboard never shows them.                                                                              | Move the `supabase.from('workflow_executions').update({ …completed… })` logic into `executeWorkflow()` itself, or expose a helper so every caller can do it consistently. |
| **Graph-utility functions import `reactflow` types into the worker build.**                                                                                                                                                                                                                                          | `src/utils/graph.ts`       | Works in ts-node but fails in a pure `tsc`/webpack build if `reactflow` isn’t installed on the worker image.                                                                         | Add `reactflow` as a dev dep **or** extract the minimal `type Node = { id:string …}` into a local file.                                                                   |
| **No defensive guard around missing mandatory env vars** for AMQP host/user/pass – unlike Supabase and SMTP, you never validate them at startup.                                                                                                                                                                     | `src/workers/execution.ts` | Worker boots with empty `AMQP_URL` and then hangs forever trying to connect.                                                                                                         | Add the same `requiredEnvVars` check you already have for SMTP/Supabase.                                                                                                  |

---

### What I _cannot_ check yet

- Functions in the **builder UI** that call the `/workflows/run` endpoint, poll with SSE / EventSource, display per-node logs, etc. – because that code simply isn’t in the archive.

---

## Next step

Could you add / re-upload the front-end folder (or at least the key files: the “Run” button handler, the SSE hook, and the component that renders execution status)?  
Once I can see those, I can trace the call chain end-to-end and tell you exactly which UI function is failing and how to patch both sides so the workflow runs show up as expected.
