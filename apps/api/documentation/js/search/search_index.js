var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AICustomBlockData.html",[0,0.249,1,2.66]],["body/interfaces/AICustomBlockData.html",[0,0.494,1,3.604,2,1.013,3,0.067,4,0.051,5,0.051,6,2.62,7,2.62,8,0.961,9,3.023,10,2.195,11,2.956,12,3.05,13,0.845,14,0.143,15,0.688,16,3.675,17,3.507,18,3.61,19,3.307,20,0.974,21,3.962,22,0.366,23,0.302,24,0.008,25,4.438,26,4.438,27,4.438,28,0.161,29,3.404,30,2.52,31,2.238,32,2.62,33,0.135,34,2.288,35,3.889,36,0.91,37,1.391,38,2.248,39,1.612,40,2.195,41,1.466,42,1.674,43,2.62,44,3.399,45,2.42,46,4.411,47,3.121,48,3.604,49,3.604,50,2.62,51,2.62,52,1.759,53,1.804,54,2.069,55,2.069,56,1.674,57,2.62,58,2.01,59,2.01,60,3.467,61,2.932,62,1.674,63,0.952,64,1.676,65,4.314,66,1.804,67,1.716,68,1.852,69,2.01,70,2.195,71,2.346,72,3.757,73,3.568,74,5.018,75,3.227,76,0.448,77,2.838,78,3.351,79,1.923,80,2.451,81,3.227,82,2.01,83,2.62,84,2.52,85,2.731,86,2.731,87,1.148,88,2.62,89,1.455,90,0.805,91,0.755,92,1.954,93,3.604,94,1.423,95,2.731,96,1.013,97,0.931,98,2.731,99,1.18,100,3.604,101,0.005,102,0.005]],["title/classes/AccessDeniedError.html",[103,0.06,104,3.214]],["body/classes/AccessDeniedError.html",[0,0.181,3,0.049,4,0.037,5,0.037,8,0.35,13,0.917,20,0.359,22,0.339,23,0.112,24,0.008,28,0.213,33,0.089,37,0.782,39,1.296,63,0.511,70,2.816,76,0.581,77,1.331,79,0.902,87,1.9,91,1.112,94,1.631,96,1.343,97,1.357,99,1.419,101,0.004,102,0.004,103,0.087,104,5.24,105,0.921,106,2.668,107,2.749,108,4.021,109,2.102,110,0.847,111,3.019,112,0.499,113,3.293,114,0.272,115,1.05,116,2.295,117,4.955,118,1.403,119,2.786,120,2.015,121,3.157,122,4.021,123,2.483,124,2.015,125,2.015,126,2.335,127,2.483,128,4.462,129,3.998,130,3.998,131,4.795,132,1.731,133,4.234,134,1.526,135,1.621,136,2.668,137,1.124,138,3.354,139,2.668,140,2.668,141,1.124,142,2.212,143,2.668,144,2.668,145,5.557,146,3.45,147,1.352,148,3.555,149,1.65,150,1.754,151,1.634,152,2.483,153,1.704,154,2.668,155,3.148,156,2.668,157,2.668,158,2.668,159,2.015,160,2.668,161,2.166,162,2.668,163,2.771,164,5.041,165,4.729,166,2.873,167,2.212,168,5.703,169,3.998,170,1.331,171,2.107,172,2.668,173,4.795,174,2.054,175,2.668,176,3.998,177,3.11,178,7.517,179,6.495,180,1.919,181,2.107,182,5.325,183,3.576,184,5.325,185,3.998,186,1.543,187,3.998,188,3.998,189,2.212,190,2.212,191,2.668,192,1.933,193,2.668,194,3.998,195,3.157,196,5.325,197,2.212,198,5.325,199,2.015,200,2.483,201,3.315,202,2.107,203,2.212,204,1.074,205,2.212,206,2.668,207,2.212,208,1.621,209,3.998,210,2.668,211,2.668,212,2.508,213,2.668,214,2.668,215,2.166,216,1.235,217,2.015,218,2.668,219,3.998,220,3.998,221,2.16,222,3.315,223,3.998,224,2.668,225,2.521,226,1.933,227,2.015,228,3.998,229,3.998,230,2.668,231,3.473,232,4.521,233,1.483,234,2.335,235,2.668,236,3.721,237,3.998,238,2.668,239,2.668,240,2.668,241,2.212,242,2.212,243,0.983,244,1.027,245,2.015,246,4.415,247,2.429,248,3.45,249,2.896,250,1.526,251,1.235,252,2.668,253,2.508,254,2.668,255,2.668]],["title/controllers/AiController.html",[256,1.931,257,3.673]],["body/controllers/AiController.html",[3,0.079,4,0.06,5,0.06,8,0.913,9,3.987,10,2.895,12,2.864,13,0.961,14,0.17,20,0.833,22,0.201,23,0.306,24,0.008,28,0.292,33,0.079,63,1.186,87,1.77,96,1.562,97,1.16,101,0.006,102,0.006,103,0.07,112,1.16,114,0.633,150,1.665,151,1.761,153,1.656,174,1.628,186,1.295,256,2.255,257,5.576,258,2.255,259,5.292,260,3.106,261,2.054,262,6.094,263,5.423,264,5.423,265,5.292,266,2.712,267,2.051,268,6.881,269,5.292,270,5.181,271,4.374,272,7.646,273,5.05,274,4.374,275,5.292,276,2.086,277,5.292,278,4.954,279,6.881,280,2.099,281,5.136,282,5.292,283,5.292,284,4.954,285,5.292,286,4.881,287,3.388,288,4.881,289,5.292,290,2.88,291,4.162,292,1.105,293,2.988,294,4.571,295,4.954,296,1.361,297,4.679,298,4.687,299,5.292,300,5.292,301,5.292,302,5.292,303,2.317,304,1.725,305,6.881,306,4.317,307,2.008,308,5.292,309,2.88,310,5.292,311,5.292,312,3.753,313,6.881,314,2.88,315,2.88,316,5.292,317,5.292,318,2.519,319,6.881,320,2.855,321,6.881,322,5.292,323,5.292,324,5.292,325,4.687,326,4.687]],["title/modules/AiModule.html",[327,1.62,328,3.214]],["body/modules/AiModule.html",[3,0.102,4,0.078,5,0.078,24,0.008,28,0.309,33,0.102,101,0.007,102,0.007,103,0.09,257,6.947,258,3.433,292,1.425,297,5.804,298,6.042,327,3.065,328,6.561,329,3.257,330,3.162,331,3.468,332,3.468,333,3.468,334,3.86,335,4.358,336,6.042,337,6.042,338,6.042,339,4.095,340,3.468,341,3.162,342,6.822,343,6.822]],["title/injectables/AiService.html",[297,2.773,344,1.029]],["body/injectables/AiService.html",[0,0.255,3,0.034,4,0.072,5,0.042,8,0.83,9,2.898,10,0.807,11,2.311,12,2.571,13,0.8,14,0.149,15,0.36,16,0.989,17,1.485,18,1.754,19,2.319,20,0.895,21,3.211,22,0.348,23,0.295,24,0.008,28,0.24,29,1.017,31,2.011,33,0.034,34,0.736,35,2.152,36,0.644,37,0.848,38,1.345,39,1.219,40,1.912,41,0.472,42,0.847,44,0.937,45,1.447,47,1.148,53,1.877,56,0.847,58,2.408,59,1.654,61,1.078,62,1.377,63,1.142,64,1.094,66,2.379,67,0.868,68,0.937,69,2.65,70,2.377,73,1.148,76,0.47,82,2.65,87,0.581,89,0.736,90,1.199,91,1.322,94,0.851,96,1.626,97,1.268,99,1.277,101,0.003,102,0.004,103,0.03,107,0.77,110,1.194,112,1.203,114,0.609,134,2.152,137,1.253,141,1.253,146,1.017,147,1.167,150,1.673,151,1.534,153,1.417,161,2.155,166,1.741,174,1.392,180,2.024,186,1.631,208,1.112,231,1.325,247,2.898,261,1.096,262,3.253,263,3.293,264,3.293,266,2.486,270,3.766,271,1.148,273,1.325,276,0.89,280,1.903,286,2.605,287,2.898,288,1.602,292,0.472,297,2.247,304,1.514,307,0.593,309,4.008,314,2.527,315,2.527,318,3.007,320,3.373,344,0.834,345,0.937,346,1.602,347,3.238,348,3.501,349,3.672,350,3.672,351,3.672,352,3.501,353,3.672,354,4.033,355,4.033,356,3.501,357,3.501,358,3.672,359,2.77,360,2.258,361,2.77,362,2.258,363,6.052,364,2.77,365,2.258,366,6.052,367,2.77,368,2.258,369,2.258,370,4.255,371,4.339,372,2.258,373,2.77,374,2.258,375,2.258,376,2.258,377,2.258,378,3.793,379,2.258,380,1.377,381,2.258,382,4.033,383,4.438,384,2.258,385,2.258,386,2.258,387,3.954,388,2.258,389,2.258,390,2.77,391,1.602,392,1.517,393,1.112,394,4.033,395,1.602,396,1.517,397,1.517,398,3.119,399,2.97,400,1.517,401,3.093,402,1.382,403,1.602,404,1.602,405,1.602,406,1.602,407,3.203,408,3.203,409,3.203,410,3.203,411,2.527,412,2.527,413,1.275,414,1.602,415,4.174,416,2.605,417,4.473,418,2.605,419,2.605,420,1.602,421,3.293,422,3.119,423,1.602,424,3.293,425,3.293,426,1.602,427,3.912,428,1.602,429,2.605,430,3.293,431,1.602,432,1.703,433,1.703,434,1.703,435,1.703,436,1.703,437,1.958,438,4.757,439,1.445,440,3.293,441,3.501,442,2.725,443,2.77,444,3.642,445,3.501,446,2.911,447,1.703,448,1.703,449,1.703,450,1.509,451,1.325,452,1.272,453,2.35,454,3.226,455,1.703,456,4.438,457,1.703,458,2.77,459,1.445,460,1.602,461,1.703,462,1.703,463,1.524,464,1.445,465,1.703,466,1.382,467,1.703,468,1.703,469,2.633,470,1.703,471,2.468,472,1.703,473,1.275,474,1.703,475,3.501,476,3.422,477,4.757,478,4.238,479,3.012,480,3.501,481,1.703,482,3.501,483,1.703,484,2.77,485,2.77,486,2.77,487,4.757,488,2.77,489,2.056,490,3.501,491,2.074,492,1.382,493,1.703,494,4.033,495,2.77,496,1.356,497,1.703,498,1.703,499,2.77,500,2.77,501,2.77,502,2.77,503,2.77,504,2.77,505,2.77,506,1.703,507,1.703,508,1.703,509,1.275,510,1.275,511,1.275,512,1.275,513,1.275,514,1.275,515,1.703,516,3.323,517,1.447,518,1.602,519,1.602,520,1.703,521,4.033,522,2.247,523,2.77,524,3.293,525,2.77,526,4.033,527,1.703,528,1.703,529,2.156,530,1.703,531,3.02,532,1.703,533,1.275,534,1.275,535,1.703,536,1.703,537,1.703,538,1.703,539,1.517,540,1.602,541,1.517,542,1.517,543,1.517,544,2.468,545,0.887,546,2.44,547,1.654,548,1.047,549,2.468,550,1.517,551,1.703,552,1.382,553,1.445,554,1.703,555,1.445,556,1.047,557,2.247,558,1.517,559,1.703,560,1.703,561,1.382,562,1.517,563,1.517,564,1.517,565,1.999,566,1.445,567,1.445,568,1.517,569,1.517,570,1.445,571,1.517,572,2.247,573,2.468,574,1.602,575,1.229,576,1.703,577,1.078,578,1.703,579,1.078,580,1.703,581,0.989,582,1.517,583,1.445,584,1.517,585,1.445,586,1.517,587,1.703,588,1.602,589,1.445,590,1.229,591,1.602,592,1.275,593,1.703,594,1.924,595,1.517,596,2.97,597,1.703,598,1.703,599,1.703,600,1.703,601,1.703,602,1.517,603,1.703,604,1.325,605,2.77,606,2.621,607,1.703,608,1.382,609,1.517,610,1.602,611,0.89,612,1.703,613,1.325,614,1.703,615,2.77,616,1.445,617,1.703,618,2.605,619,1.229,620,1.382,621,1.017,622,1.325,623,0.89,624,1.445,625,1.703,626,1.517,627,1.703,628,2.77,629,1.703,630,1.703,631,1.703,632,2.77,633,1.703,634,1.703,635,1.703,636,1.703,637,2.77,638,1.703,639,1.703,640,1.703,641,1.275,642,1.703,643,1.703,644,1.703,645,1.602,646,1.703,647,1.325,648,1.703,649,1.703,650,1.703,651,1.517,652,0.736,653,1.703,654,1.703,655,1.703,656,1.565,657,1.703,658,1.703,659,4.757,660,1.703,661,1.703,662,1.703,663,1.703,664,1.703,665,1.703,666,1.703,667,1.703,668,2.77,669,1.703,670,1.703,671,1.703,672,1.703,673,1.703,674,1.703,675,1.703,676,1.703,677,1.703,678,1.703,679,1.703,680,1.703,681,1.703,682,1.703,683,1.703,684,1.602,685,1.703,686,2.77,687,1.703,688,1.703,689,2.77,690,1.703,691,1.703,692,1.703,693,1.703,694,1.703,695,2.77,696,2.77,697,1.703,698,1.703,699,1.703,700,1.703,701,1.703,702,1.703,703,1.703,704,1.703]],["title/modules/AppModule.html",[327,1.62,705,3.418]],["body/modules/AppModule.html",[3,0.085,4,0.064,5,0.064,24,0.008,28,0.338,33,0.085,96,1.627,101,0.006,102,0.006,103,0.075,292,1.178,327,2.817,328,6.206,329,3.763,330,2.614,331,2.867,332,2.867,333,2.867,334,3.228,335,2.867,339,3.644,340,2.867,341,2.614,524,4,579,2.693,705,7.193,706,4.994,707,4.994,708,6.206,709,6.206,710,6.206,711,6.206,712,4.94,713,6.206,714,6.206,715,6.206,716,6.206,717,5.639,718,4.816,719,5.639,720,4.994,721,4.994,722,3.31,723,7.167,724,4.57,725,3.789,726,3.608,727,5.639,728,5.639,729,5.639,730,5.639,731,5.639,732,5.639,733,5.639,734,5.639,735,5.639,736,5.639,737,5.084,738,5.639,739,4.994,740,5.639,741,5.639,742,4.994,743,4.994,744,4.816,745,3.789,746,2.693,747,4.253,748,3.184,749,4.994,750,4.994,751,4.994]],["title/controllers/AuthController.html",[256,1.931,752,3.418]],["body/controllers/AuthController.html",[0,0.201,3,0.055,4,0.042,5,0.042,13,0.596,14,0.118,20,0.754,22,0.302,23,0.236,24,0.008,28,0.265,33,0.055,37,0.846,38,1.955,40,1.31,54,2.474,56,1.374,63,0.828,64,0.749,76,0.341,87,0.942,89,2.054,91,1.374,94,1.604,96,1.669,97,0.955,99,1.413,101,0.005,102,0.007,103,0.048,107,1.25,110,0.942,112,0.81,114,0.442,115,1.168,137,1.25,141,1.25,147,1.38,149,1.112,150,1.162,151,1.507,161,2.534,163,1.374,174,1.263,186,1.604,208,3.408,256,1.561,258,1.561,260,2.151,261,1.593,266,2.104,267,1.432,271,1.863,274,1.863,276,2.104,290,1.994,291,4.004,292,0.765,293,2.069,294,3.556,296,0.942,304,1.741,306,3.014,341,2.474,347,1.955,437,2.534,442,2.151,446,2.906,452,1.004,454,2.404,473,3.014,489,2.66,545,2.001,595,4.232,596,2.344,602,2.462,609,2.462,647,3.134,652,2.256,722,2.151,748,2.069,752,4.026,753,3.245,754,3.428,755,7.021,756,6.424,757,3.664,758,4.318,759,6.801,760,3.664,761,3.428,762,3.134,763,3.664,764,3.664,765,3.664,766,3.664,767,3.903,768,5.219,769,2.599,770,3.556,771,3.014,772,4.026,773,1.52,774,4.03,775,2.969,776,3.134,777,4.85,778,4.707,779,4.004,780,4.707,781,3.245,782,3.245,783,3.245,784,7.195,785,4.204,786,3.245,787,3.245,788,4.026,789,2.599,790,4.234,791,3.245,792,3.245,793,3.245,794,2.474,795,5.978,796,3.245,797,4.642,798,3.245,799,3.245,800,6.129,801,4.026,802,1.926,803,4.467,804,3.245,805,4.026,806,3.304,807,4.728,808,2.242,809,3.134,810,3.637,811,3.587,812,3.208,813,3.637,814,6.129,815,2.906,816,4.728,817,3.245,818,6.515,819,2.763,820,2.629,821,5.219,822,3.245,823,3.245,824,5.578,825,3.245,826,3.245,827,5.578,828,4.026,829,3.245,830,5.608,831,4.908,832,3.245,833,4.75,834,5.219,835,5.104,836,3.245,837,5.578,838,5.578,839,5.578,840,4.75,841,5.578,842,4.728,843,5.578,844,6.223,845,4.75,846,3.787,847,3.245,848,2.969,849,2.763,850,3.245,851,3.245,852,5.578,853,2.763,854,2.906,855,3.245,856,3.245,857,3.245,858,3.245,859,3.245,860,2.714,861,3.245,862,1.604,863,3.245,864,2.462,865,3.245,866,3.245,867,3.245,868,3.245,869,3.245,870,3.245,871,3.245,872,2.969,873,3.245,874,3.245,875,3.245,876,2.969,877,2.969,878,3.245,879,3.245,880,3.245,881,3.245,882,3.245,883,3.245,884,3.245,885,4.026,886,3.245,887,3.245,888,3.245,889,3.245,890,4.728,891,2.344,892,3.245,893,2.969,894,3.245,895,2.763]],["title/classes/AuthError.html",[103,0.06,896,2.9]],["body/classes/AuthError.html",[0,0.464,3,0.089,4,0.068,5,0.068,8,0.632,14,0.191,15,0.728,17,3.637,20,0.649,22,0.363,23,0.275,24,0.008,28,0.215,33,0.133,36,0.972,37,0.944,63,0.924,76,0.38,87,1.532,90,1.074,91,1.431,101,0.006,102,0.006,103,0.079,105,1.667,109,3.162,110,1.532,111,4.54,112,1.125,114,0.493,115,1.899,118,2.538,124,3.645,125,3.645,147,1.379,149,1.052,180,1.74,393,2.933,446,3.242,545,1.952,754,3.242,761,3.242,762,3.497,776,3.497,777,3.645,778,3.812,779,3.242,780,3.812,790,5.175,794,3.439,797,4.603,806,2.844,812,2.761,813,3.131,815,3.242,896,5.171,897,4.002,898,7.419,899,3.92,900,4.54,901,2.761,902,3.439,903,3.812,904,3.812,905,2.683,906,4.038,907,4.225,908,4.002,909,4.225]],["title/modules/AuthModule.html",[327,1.62,708,3.214]],["body/modules/AuthModule.html",[3,0.091,4,0.069,5,0.069,24,0.008,28,0.332,33,0.091,101,0.006,102,0.006,103,0.08,258,3.201,292,1.269,327,2.915,329,2.902,330,2.817,331,3.09,332,3.09,333,3.09,334,3.672,335,4.146,339,3.819,340,3.09,341,2.817,708,6.699,712,5.034,718,5.048,721,5.383,722,3.568,725,4.084,737,6.633,739,5.383,742,5.383,744,5.048,745,4.084,746,2.902,747,4.584,748,3.432,749,5.383,752,6.15,771,5.3,772,6.885,773,2.522,910,5.383,911,5.383,912,5.383,913,6.078,914,6.324,915,6.078,916,7.512,917,4.311,918,6.078,919,6.078,920,6.078,921,6.078]],["title/classes/AuthResponseDto.html",[103,0.06,922,3.418]],["body/classes/AuthResponseDto.html",[3,0.096,4,0.073,5,0.073,8,0.971,14,0.206,15,0.762,20,0.7,22,0.356,23,0.285,24,0.008,28,0.232,33,0.125,76,0.41,101,0.007,102,0.007,103,0.111,105,1.798,107,2.652,112,1.179,147,1.48,266,2.532,267,2.084,296,1.652,545,2.147,785,3.602,806,3.711,812,3.873,905,3.5,922,5.861,923,5.206,924,2.592,925,6.424,926,6.424,927,3.007,928,4.845,929,7.036,930,4.845,931,3.771,932,5.512]],["title/interfaces/AuthResult.html",[0,0.249,908,3.045]],["body/interfaces/AuthResult.html",[0,0.466,2,1.37,3,0.091,4,0.069,5,0.069,8,0.641,14,0.194,15,0.734,17,3.286,22,0.359,23,0.277,24,0.008,28,0.218,33,0.134,36,0.978,37,0.957,76,0.385,87,1.923,90,1.088,91,1.265,101,0.006,102,0.006,103,0.08,109,2.572,111,3.693,118,2.572,124,3.693,125,3.693,147,1.445,149,1.065,180,1.763,393,2.972,446,3.284,545,1.963,754,3.284,761,3.284,762,3.542,776,3.542,777,3.693,778,3.862,779,3.284,780,3.862,790,5.199,794,3.467,797,5.002,806,2.882,812,2.797,813,3.172,815,3.284,896,4.786,897,4.055,899,3.938,900,4.577,901,2.797,902,3.467,903,3.862,904,3.862,905,2.718,906,4.624,907,4.28,908,5.026,909,4.28]],["title/injectables/AuthService.html",[344,1.029,771,2.559]],["body/injectables/AuthService.html",[0,0.442,3,0.089,4,0.067,5,0.067,14,0.189,20,0.978,22,0.342,23,0.274,24,0.008,28,0.29,33,0.089,36,0.71,63,1.248,76,0.471,97,1.22,101,0.006,102,0.006,103,0.078,110,1.897,112,1.22,114,0.666,147,1.336,150,1.606,151,1.737,153,1.724,174,1.396,180,1.724,186,1.514,261,2.202,292,1.233,304,2.405,344,1.674,345,2.449,347,2.701,452,1.617,545,2.036,722,3.464,748,4.165,770,4.997,771,4.165,773,2.449,794,3.419,808,4.513,809,4.33,810,4.229,811,3.965,812,3.73,901,4.022,906,4.588,933,4.451,934,6.533,935,7.376,936,5.901,937,5.271,938,5.901,939,5.563,940,5.901,941,5.563,942,5.901,943,4.186,944,4.451,945,4.451,946,4.451,947,4.451,948,4.451]],["title/interfaces/AuthUser.html",[0,0.249,906,2.467]],["body/interfaces/AuthUser.html",[0,0.449,2,1.386,3,0.092,4,0.07,5,0.07,14,0.196,15,0.739,20,0.985,22,0.358,23,0.278,24,0.008,28,0.295,33,0.092,36,0.735,76,0.559,97,1.239,101,0.006,102,0.006,103,0.081,110,1.571,114,0.623,147,1.295,151,1.478,153,1.541,174,1.445,180,1.784,186,1.537,292,1.276,304,2.457,344,1.71,347,2.759,452,1.673,545,2.185,722,3.585,748,4.254,770,4.614,771,3.448,773,2.534,794,2.831,808,4.611,809,4.423,810,4.295,811,4.104,812,3.788,901,3.788,906,4.448,933,4.606,937,4.797,939,4.606,941,4.606,943,4.332,944,4.606,945,4.606,946,4.606,947,4.606,948,4.606]],["title/classes/BaseRepository.html",[103,0.06,132,2.382]],["body/classes/BaseRepository.html",[0,0.14,3,0.038,4,0.029,5,0.029,8,0.829,13,0.923,14,0.082,15,0.398,20,0.866,22,0.353,23,0.289,24,0.008,28,0.182,33,0.076,37,0.643,39,1.508,44,1.06,63,1.251,70,2.955,76,0.587,77,1.033,79,0.7,87,1.968,91,0.686,94,1.731,96,1.145,97,1.306,99,1.343,101,0.003,102,0.003,103,0.067,104,4.443,105,0.715,106,2.07,107,2.549,108,3.086,109,1.089,110,0.657,111,1.563,112,1.277,114,0.658,116,2.328,117,5.469,118,1.089,119,2.29,120,1.563,121,3.675,122,4.277,123,1.927,124,1.563,125,1.563,126,1.812,127,1.927,128,5.029,129,3.287,130,3.287,131,5.664,132,2.132,133,4.675,134,2.338,135,2.484,136,3.287,137,0.872,138,3.061,139,2.07,140,2.07,141,0.872,142,1.717,143,2.07,144,2.07,145,5.598,146,3.447,147,1.38,148,3.431,149,1.646,150,1.874,151,1.767,152,3.059,153,1.771,154,2.07,155,2.978,156,3.287,157,2.07,158,3.287,159,3.086,160,2.07,161,1.847,162,2.07,163,2.72,164,5.085,165,4.48,166,2.981,167,2.725,168,6.053,169,4.654,170,1.64,171,2.595,172,4.087,173,4.087,174,1.955,175,2.07,176,3.287,177,3.505,178,7.505,179,6.629,180,1.83,181,2.595,182,4.654,183,3.126,184,4.654,185,3.287,186,1.44,187,3.287,188,3.287,189,1.717,190,1.717,191,2.07,192,1.5,193,2.07,194,3.287,195,2.595,196,5.403,197,2.725,198,4.654,199,1.563,200,1.927,201,2.725,202,1.635,203,1.717,204,1.322,205,2.725,206,4.087,207,1.717,208,1.258,209,3.287,210,2.07,211,2.07,212,2.062,213,2.07,214,2.07,215,2.441,216,1.521,217,2.482,218,4.087,219,3.287,220,3.287,221,1.776,222,2.725,223,3.287,224,2.07,225,2.841,226,2.381,227,2.482,228,3.287,229,3.287,230,2.07,231,3.677,232,4.683,233,1.827,234,2.877,235,4.087,236,3.804,237,4.087,238,2.07,239,2.07,240,2.07,241,1.717,242,1.717,243,0.763,244,0.797,245,2.482,246,4.872,247,2.828,248,3.578,249,3.371,250,1.88,251,1.521,252,3.287,253,3.39,254,3.287,255,2.07,261,1.211,949,4.056,950,3.592,951,2.877,952,3.059,953,3.592,954,4.056,955,3.462,956,2.555,957,2.555,958,2.555,959,2.555,960,2.555,961,2.555,962,2.555,963,2.555,964,2.555,965,2.555,966,2.555,967,2.555,968,2.555,969,2.555,970,2.555,971,2.555,972,2.555,973,2.555]],["title/interfaces/BaseRepositoryOptions.html",[0,0.249,128,3.418]],["body/interfaces/BaseRepositoryOptions.html",[0,0.18,2,0.744,3,0.049,4,0.037,5,0.037,8,0.348,13,0.916,14,0.105,15,0.483,22,0.335,23,0.168,24,0.008,28,0.213,33,0.089,37,1.169,39,1.292,70,2.877,76,0.581,77,1.326,79,0.899,87,1.897,91,0.832,94,1.628,96,1.34,97,1.356,99,1.417,101,0.004,102,0.004,103,0.078,104,4.983,106,2.658,107,2.685,108,3.612,109,1.398,111,2.007,114,0.543,116,2.29,117,4.946,118,1.398,119,2.777,120,2.007,121,3.148,122,4.013,123,2.474,124,2.007,125,2.007,126,3.489,127,3.71,128,4.946,129,5.694,130,5.694,131,4.783,132,1.724,133,4.23,134,1.52,135,1.615,136,2.658,137,1.119,138,3.35,139,2.658,140,2.658,141,1.119,142,2.204,143,2.658,144,2.658,145,5.555,146,3.445,147,1.351,148,3.553,149,1.65,150,1.752,151,1.633,152,2.474,153,1.702,154,2.658,155,3.144,156,2.658,157,2.658,158,2.658,159,2.007,160,2.658,161,2.161,162,2.658,163,2.767,164,5.035,165,4.721,166,2.869,167,2.204,168,5.694,169,3.986,170,1.326,171,2.099,172,2.658,173,4.783,174,2.053,175,2.658,176,3.986,177,3.102,178,7.514,179,6.49,180,1.916,181,2.099,182,5.315,183,3.569,184,5.315,185,3.986,186,1.542,187,3.986,188,3.986,189,2.204,190,2.204,191,2.658,192,1.925,193,2.658,194,3.986,195,3.148,196,5.315,197,2.204,198,5.315,199,2.007,200,2.474,201,3.305,202,2.099,203,2.204,204,1.069,205,2.204,206,2.658,207,2.204,208,1.615,209,3.986,210,2.658,211,2.658,212,2.501,213,2.658,214,2.658,215,2.161,216,1.23,217,2.007,218,2.658,219,3.986,220,3.986,221,2.154,222,3.305,223,3.986,224,2.658,225,2.515,226,1.925,227,2.007,228,3.986,229,3.986,230,2.658,231,3.465,232,4.514,233,1.477,234,2.326,235,2.658,236,3.71,237,3.986,238,2.658,239,2.658,240,2.658,241,2.204,242,2.204,243,0.979,244,1.023,245,2.007,246,4.406,247,2.422,248,3.446,249,2.888,250,1.52,251,1.23,252,2.658,253,2.501,254,2.658,255,2.658]],["title/controllers/BillingController.html",[256,1.931,974,3.673]],["body/controllers/BillingController.html",[3,0.09,4,0.068,5,0.068,8,0.789,13,0.904,14,0.192,20,0.809,22,0.283,23,0.302,24,0.008,28,0.292,33,0.09,45,2.928,63,1.152,76,0.381,94,1.722,97,1.127,101,0.006,102,0.006,103,0.079,112,1.127,114,0.615,147,0.946,149,1.054,150,1.618,151,1.742,186,1.398,204,2.423,256,2.544,258,2.544,260,3.505,261,2.218,266,3.336,267,1.993,273,4.362,276,2.928,290,3.25,291,4.044,292,1.247,293,3.371,294,4.567,295,4.546,296,1.535,303,2.615,304,1.947,306,4.195,307,1.568,454,3.643,463,3.083,758,5.111,797,4.403,974,6.021,975,5.97,976,8.089,977,8.089,978,6.581,979,5.97,980,5.97,981,8.464,982,5.97,983,5.97,984,5.288,985,7.164,986,5.97,987,5.97,988,6.581,989,5.738,990,5.288,991,5.97,992,5.97,993,5.97,994,5.288,995,4.012,996,4.503,997,5.97,998,5.97,999,5.97,1000,5.97,1001,5.176,1002,5.97,1003,5.97]],["title/modules/BillingModule.html",[327,1.62,709,3.214]],["body/modules/BillingModule.html",[3,0.102,4,0.078,5,0.078,24,0.008,28,0.309,33,0.102,101,0.007,102,0.007,103,0.09,258,3.433,292,1.425,327,3.065,329,3.257,330,3.162,331,3.468,332,3.468,333,3.468,334,3.86,335,4.358,339,4.095,340,3.468,341,3.162,709,6.561,974,6.947,989,6.727,990,6.042,1004,6.042,1005,6.042,1006,6.042,1007,6.822,1008,6.822]],["title/injectables/BillingService.html",[344,1.029,989,3.214]],["body/injectables/BillingService.html",[3,0.098,4,0.074,5,0.074,14,0.209,20,0.854,22,0.354,23,0.267,24,0.008,28,0.235,33,0.098,56,2.94,63,1.215,76,0.416,89,2.124,96,1.479,97,1.189,101,0.007,102,0.007,103,0.086,112,1.189,114,0.649,149,1.15,150,1.706,151,1.778,261,2.339,276,3.089,292,1.361,344,1.779,345,2.703,463,2.703,854,3.546,978,6.942,984,6.942,985,7.445,988,5.77,989,5.559,994,7.445,1001,5.379,1009,6.515,1010,7.837,1011,7.837,1012,6.515,1013,6.515,1014,6.942,1015,6.515,1016,7.837,1017,6.515,1018,6.515,1019,6.515,1020,6.515]],["title/interfaces/BlockExecutionContext.html",[0,0.249,1021,3.045]],["body/interfaces/BlockExecutionContext.html",[0,0.47,2,1.184,3,0.102,4,0.059,5,0.059,8,0.554,11,1.74,12,2.591,13,0.957,14,0.167,15,0.669,19,3.173,22,0.365,23,0.314,24,0.008,33,0.129,37,0.827,41,1.745,42,1.956,54,2.417,55,3.159,56,2.557,63,0.809,76,0.484,82,2.349,87,1.753,90,1.695,91,0.882,92,2.284,101,0.006,102,0.006,107,1.78,114,0.709,115,2.732,137,1.78,138,2.985,146,3.419,149,1.422,153,1.067,159,5.112,163,2.848,170,2.109,216,1.956,245,3.191,250,2.417,266,2.686,280,1.579,307,1.79,318,1.91,427,4.546,444,2.652,590,4.547,594,1.591,623,2.056,652,1.701,656,3.431,862,2.284,891,4.362,1001,3.337,1021,5.102,1022,3.504,1023,5.711,1024,3.431,1025,5.711,1026,5.711,1027,5.613,1028,3.255,1029,3.504,1030,2.284,1031,2.223,1032,2.223,1033,4.58,1034,3.255,1035,3.255,1036,2.741,1037,3.71,1038,3.159,1039,3.255,1040,3.504,1041,2.568,1042,3.337,1043,4.835,1044,2.49,1045,3.337,1046,2.417,1047,2.568,1048,2.49,1049,3.504,1050,3.699,1051,3.699,1052,3.699]],["title/interfaces/BlockHandler.html",[0,0.249,1049,3.045]],["body/interfaces/BlockHandler.html",[0,0.483,2,1.224,3,0.105,4,0.061,5,0.061,8,0.573,11,1.799,12,2.633,13,0.966,14,0.173,19,2.126,20,0.759,22,0.363,23,0.263,24,0.008,33,0.13,37,1.104,41,1.703,42,2.023,54,2.5,55,3.229,56,2.613,63,1.197,76,0.492,82,2.429,87,1.791,90,1.66,91,0.912,92,2.362,101,0.006,102,0.006,107,1.84,112,1.17,114,0.715,115,2.757,137,1.84,138,2.362,146,3.673,149,0.952,150,1.68,153,1.425,159,5.166,163,2.894,170,2.18,216,2.023,245,3.3,250,2.5,261,2.079,280,1.788,307,1.829,318,2.55,427,3.933,444,2.742,590,3.791,594,2.125,623,3.214,652,1.758,656,2.298,862,2.362,891,3.451,1001,3.451,1021,5.479,1022,3.624,1023,5.784,1024,2.298,1025,3.825,1026,3.825,1027,4.68,1028,2.18,1029,3.624,1030,2.362,1031,2.298,1032,2.298,1033,4.68,1034,3.326,1035,3.326,1036,2.835,1037,3.791,1038,3.229,1039,3.326,1040,3.624,1041,2.656,1042,3.451,1043,4.941,1044,2.575,1045,3.451,1046,2.5,1047,2.656,1048,2.575,1049,4.68,1050,4.941,1051,3.825,1052,5.784,1053,4.68,1054,5.393,1055,5.393,1056,5.393,1057,5.393]],["title/interfaces/BlockMetadata.html",[0,0.249,1058,3.214]],["body/interfaces/BlockMetadata.html",[0,0.329,2,0.765,3,0.051,4,0.057,5,0.081,8,0.979,12,2.924,13,0.862,14,0.108,15,0.652,16,4.03,19,1.978,22,0.319,23,0.319,24,0.008,28,0.181,29,3.2,30,1.902,31,1.912,33,0.1,34,1.636,38,1.234,40,2.144,41,0.704,42,1.882,44,2.489,45,2.364,52,1.328,53,2.425,58,1.517,59,1.517,61,2.864,69,4.145,90,1.199,93,2.946,97,1.008,101,0.004,102,0.005,115,2.119,155,2.556,170,1.362,180,1.466,186,1.402,192,2.946,231,1.978,232,4.559,243,2.224,248,1.475,251,2.25,253,1.713,276,2.364,280,0.781,290,2.732,291,1.834,380,1.264,387,2.264,401,4.615,422,4.03,451,1.978,452,0.923,453,2.156,454,1.517,459,3.838,463,1.398,466,3.071,469,1.659,471,3.372,476,2.156,479,2.864,496,0.984,529,3.901,531,3.387,541,3.372,542,2.264,543,2.264,544,2.264,545,1.449,546,3.735,547,2.26,548,1.562,549,4.03,550,2.264,552,3.071,553,2.156,556,2.326,557,3.071,562,3.372,563,4.775,564,2.264,565,2.732,567,3.212,568,2.264,569,2.264,570,2.156,571,2.264,572,2.062,573,2.264,575,3.617,577,1.609,579,3.685,581,1.475,582,2.264,583,2.156,584,2.264,585,3.212,586,3.372,589,2.156,590,1.834,592,1.902,604,5.402,608,2.062,610,3.56,619,2.732,621,2.26,626,2.264,762,1.978,840,3.785,854,3.264,905,1.517,1045,3.838,1058,4.254,1059,2.984,1060,4.445,1061,3.212,1062,5.019,1063,5.019,1064,6.496,1065,2.39,1066,2.39,1067,2.264,1068,2.73,1069,2.541,1070,2.73,1071,2.39,1072,2.984,1073,4.445,1074,2.984,1075,4.254,1076,2.984,1077,4.445,1078,2.984,1079,4.254,1080,2.984,1081,2.984,1082,2.984,1083,2.984,1084,4.445,1085,6.013,1086,2.984,1087,2.984,1088,4.445,1089,2.984,1090,2.984,1091,4.067,1092,2.984,1093,2.062,1094,4.445,1095,2.984,1096,2.984,1097,2.73,1098,2.984,1099,4.445,1100,4.445,1101,5.474,1102,4.445,1103,2.984,1104,2.541,1105,2.984,1106,2.73,1107,2.73,1108,4.445,1109,2.984,1110,2.984,1111,2.984,1112,5.312,1113,2.984,1114,2.73,1115,4.445,1116,2.984,1117,2.984,1118,4.445,1119,2.984,1120,2.984,1121,2.984,1122,2.984,1123,2.984,1124,4.445,1125,2.984,1126,2.984,1127,4.445,1128,1.609,1129,2.984,1130,4.445,1131,4.445,1132,4.445,1133,4.445,1134,4.445,1135,2.984,1136,4.445,1137,2.984,1138,2.984,1139,2.264,1140,2.984,1141,2.984,1142,4.445,1143,2.984,1144,2.984,1145,4.445,1146,2.984,1147,2.984,1148,4.445,1149,4.445,1150,2.984,1151,2.984,1152,4.445,1153,6.599,1154,2.541,1155,2.39,1156,4.445,1157,2.984,1158,4.445,1159,2.984,1160,2.062,1161,5.312,1162,2.39,1163,3.369,1164,3.369,1165,3.369,1166,3.369,1167,3.369,1168,3.369,1169,3.369,1170,2.541,1171,2.156,1172,4.445,1173,3.369,1174,3.369,1175,3.369,1176,2.541,1177,3.369,1178,3.369,1179,3.369,1180,3.369,1181,2.541,1182,5.019,1183,3.369,1184,3.369,1185,3.369,1186,2.73,1187,2.984,1188,5.019,1189,3.369,1190,3.369]],["title/interfaces/BlockParameter.html",[0,0.249,74,2.66]],["body/interfaces/BlockParameter.html",[0,0.492,1,2.66,2,1.028,3,0.068,4,0.052,5,0.052,6,2.66,7,2.66,8,0.964,9,2.231,10,1.62,11,2.936,12,3.057,13,0.79,14,0.145,15,0.694,16,3.332,17,3.327,18,2.163,19,2.998,20,0.976,21,3.693,22,0.365,23,0.305,24,0.008,25,3.642,26,3.642,27,3.642,28,0.163,29,3.426,30,2.558,31,2.256,32,2.66,33,0.135,34,2.307,35,4.034,36,0.916,37,1.42,38,2.271,39,1.629,40,2.218,41,1.478,42,1.699,43,2.66,44,3.414,45,2.445,46,4.428,47,3.154,48,3.642,49,3.642,50,2.66,51,2.66,52,1.786,53,1.832,54,2.1,55,2.1,56,1.699,57,2.66,58,2.04,59,2.04,60,3.503,61,2.962,62,1.699,63,0.962,64,1.78,65,4.669,66,1.832,67,1.742,68,1.88,69,2.04,70,2.218,71,2.381,72,4.329,73,3.868,74,5.108,75,3.261,76,0.451,77,2.86,78,3.378,79,1.938,80,2.47,81,3.261,82,2.04,83,2.66,84,2.558,85,2.772,86,2.772,87,1.165,88,2.66,89,1.477,90,0.817,91,0.766,92,1.984,93,3.642,94,1.437,95,2.772,96,1.028,97,0.941,98,2.772,99,1.192,100,3.642,101,0.005,102,0.005,114,0.513]],["title/interfaces/BlockType.html",[0,0.249,401,2.382]],["body/interfaces/BlockType.html",[0,0.272,2,0.75,3,0.05,4,0.038,5,0.038,8,0.885,11,2.739,12,3.079,13,0.736,14,0.106,15,0.691,16,3.698,17,2.397,18,2.363,19,2.595,20,0.878,21,3.051,22,0.355,23,0.296,24,0.008,28,0.214,29,2.965,31,2.099,33,0.089,35,1.532,37,0.524,38,2.171,39,1.299,40,1.182,42,2.469,46,3.889,64,1.012,65,1.799,69,2.228,75,2.601,76,0.539,77,3.101,78,1.578,79,1.355,80,1.728,81,3.889,89,1.078,90,1.07,91,1.481,94,0.766,96,1.6,97,1.344,99,1.549,101,0.004,102,0.004,103,0.044,107,1.128,108,2.023,114,0.545,116,1.154,141,1.128,147,0.524,149,1.472,151,1.505,153,1.442,161,2.952,166,1.24,174,1.75,180,0.966,186,1.606,192,1.94,215,1.21,221,2.167,225,1.409,243,1.477,244,1.031,292,0.69,303,1.448,304,1.078,312,4.206,344,1.123,347,2.171,401,3.46,402,2.023,437,2.952,450,1.494,451,1.94,489,3.1,492,4.314,496,0.966,545,0.798,561,2.023,604,4.343,767,1.628,820,2.436,1058,3.51,1064,5.248,1066,3.51,1071,2.345,1075,2.345,1085,2.345,1101,2.345,1160,2.023,1162,2.345,1181,2.493,1191,2.679,1192,2.794,1193,2.679,1194,2.679,1195,3.51,1196,2.115,1197,2.493,1198,2.345,1199,2.679,1200,2.679,1201,4.806,1202,2.679,1203,2.679,1204,2.679,1205,2.679,1206,2.679,1207,4.01,1208,2.679,1209,2.679,1210,2.493,1211,2.679,1212,5.44,1213,2.679,1214,2.345,1215,2.493,1216,1.737,1217,2.493,1218,2.493,1219,3.028,1220,2.679,1221,2.679,1222,2.679,1223,2.679,1224,2.679,1225,1.578,1226,1.532,1227,2.679,1228,3.51,1229,3.166,1230,2.493,1231,4.01,1232,2.679,1233,2.493,1234,5.996,1235,4.806,1236,4.806,1237,2.679,1238,2.679,1239,4.472,1240,4.806,1241,5.713,1242,4.806,1243,4.01,1244,4.01,1245,4.806,1246,2.679,1247,2.493,1248,2.493,1249,1.578,1250,4.01,1251,4.01,1252,3.51,1253,2.679,1254,1.902,1255,2.679,1256,2.679,1257,2.679,1258,2.679,1259,2.679,1260,2.679,1261,2.679,1262,2.679,1263,2.679,1264,2.679,1265,2.679,1266,2.679,1267,2.345,1268,2.493,1269,2.679,1270,2.679,1271,2.679,1272,2.493,1273,2.493,1274,2.679,1275,2.679,1276,3.166,1277,4.01,1278,2.679,1279,4.01,1280,2.679,1281,2.679,1282,2.679,1283,2.679,1284,2.679,1285,2.679,1286,2.679,1287,2.679,1288,2.679,1289,2.679,1290,2.679,1291,2.679,1292,2.679,1293,2.679,1294,2.679,1295,2.679,1296,2.679,1297,2.679,1298,2.679,1299,2.679,1300,2.679,1301,2.679,1302,2.679,1303,2.679,1304,2.679,1305,2.679,1306,2.679,1307,2.679,1308,2.679,1309,2.679,1310,2.679,1311,2.679,1312,2.679,1313,2.679,1314,2.679,1315,2.679,1316,2.679,1317,2.679,1318,2.679,1319,2.679,1320,2.679]],["title/controllers/BlocksController.html",[256,1.931,1321,3.673]],["body/controllers/BlocksController.html",[3,0.061,4,0.046,5,0.046,11,3.062,12,3.152,13,0.913,14,0.13,16,3.176,20,0.866,22,0.347,23,0.293,24,0.008,28,0.261,31,2.126,33,0.061,42,2.871,52,2.264,63,1.232,76,0.533,77,2.696,91,1.528,94,1.545,97,1.239,99,1.689,101,0.005,102,0.005,103,0.054,112,1.239,114,0.658,148,1.599,149,1.565,150,1.779,151,1.807,161,3.218,186,1.44,192,3.371,215,2.441,225,3.09,251,1.521,256,1.729,258,1.729,260,2.381,261,1.714,267,2.192,276,3.22,290,2.208,291,3.629,292,0.847,293,2.29,294,4.713,295,2.482,296,1.043,303,1.776,304,1.323,306,4.614,401,2.132,437,2.992,442,3.371,454,3.579,489,3.141,652,2.496,758,5.272,768,6.296,769,2.877,774,4.267,805,5.772,895,6.163,955,3.361,995,5.143,1195,5.143,1196,4.267,1197,5.469,1212,5.796,1214,4.074,1215,3.059,1219,4.08,1228,4.074,1229,3.675,1230,4.332,1233,5.029,1247,3.059,1248,5.029,1249,3.184,1267,2.877,1268,4.332,1273,3.059,1321,4.654,1322,4.056,1323,5.087,1324,5.906,1325,4.056,1326,4.056,1327,4.056,1328,3.593,1329,4.056,1330,4.056,1331,4.056,1332,4.056,1333,4.056,1334,4.056,1335,3.593,1336,4.056,1337,4.056,1338,4.056,1339,4.056,1340,4.056,1341,3.593,1342,4.056,1343,4.056,1344,3.059,1345,4.074,1346,3.593,1347,3.593,1348,4.056,1349,4.056,1350,4.056,1351,4.056,1352,5.743,1353,4.056,1354,4.056,1355,4.056,1356,4.056,1357,4.056,1358,4.056,1359,6.779,1360,4.056,1361,4.056,1362,4.056,1363,4.056,1364,4.056,1365,4.056,1366,4.056,1367,3.593,1368,4.056,1369,4.056,1370,4.056,1371,4.056]],["title/modules/BlocksModule.html",[327,1.62,710,3.214]],["body/modules/BlocksModule.html",[3,0.1,4,0.076,5,0.076,24,0.008,28,0.317,33,0.1,101,0.007,102,0.007,103,0.088,258,3.39,292,1.395,327,3.037,329,3.189,330,3.095,331,3.395,332,3.395,333,3.395,334,3.826,335,4.319,339,4.044,340,3.395,341,3.095,710,6.627,712,5.147,718,5.345,725,4.487,1196,6.054,1321,6.885,1346,5.915,1372,5.915,1373,6.678,1374,5.915,1375,5.915,1376,6.678,1377,6.678]],["title/injectables/BlocksService.html",[344,1.029,1196,2.9]],["body/injectables/BlocksService.html",[0,0.251,3,0.045,4,0.034,5,0.034,8,0.811,11,2.667,12,3.038,13,0.854,14,0.096,15,0.546,16,3.562,17,2.251,18,2.185,19,2.461,20,0.937,21,2.895,22,0.359,23,0.3,24,0.008,28,0.201,29,2.812,31,1.991,33,0.084,35,1.382,37,0.473,38,2.038,39,1.202,40,1.066,42,2.342,46,3.737,63,1.24,64,0.936,65,1.623,69,2.06,75,2.926,76,0.526,77,3.167,78,1.423,79,1.253,80,1.598,81,3.737,89,0.972,90,0.538,91,1.455,94,0.691,96,1.529,97,1.323,99,1.505,101,0.004,102,0.004,103,0.039,107,1.017,108,1.824,110,0.767,112,1.234,114,0.662,116,1.598,141,1.017,147,0.473,149,1.549,150,1.741,151,1.739,153,1.636,161,2.868,166,1.118,174,1.682,180,0.871,186,1.572,192,1.75,215,1.091,221,2.004,225,1.27,243,1.366,244,0.93,261,1.366,276,1.803,292,0.623,303,1.305,304,0.972,312,3.949,344,1.038,345,1.237,347,2.868,401,3.541,402,1.824,437,2.868,450,1.417,451,1.75,489,3.011,492,4.122,496,0.871,545,0.72,561,1.824,604,3.268,767,1.468,820,2.253,955,2.581,1058,3.245,1064,3.949,1066,3.245,1071,2.114,1075,2.114,1085,2.114,1101,2.114,1160,1.824,1162,2.114,1181,2.248,1191,2.416,1192,3.526,1193,2.416,1194,2.416,1195,4.43,1196,2.928,1197,4.71,1198,2.114,1199,2.416,1200,2.416,1201,4.512,1202,2.416,1203,2.416,1204,2.416,1205,2.416,1206,2.416,1207,3.708,1208,2.416,1209,2.416,1210,2.248,1211,2.416,1212,5.251,1213,2.416,1214,2.114,1215,3.451,1216,1.567,1217,2.248,1218,2.248,1219,2.8,1220,3.708,1221,2.416,1222,2.416,1223,2.416,1224,2.416,1225,1.423,1226,1.382,1227,2.416,1228,3.245,1229,2.928,1230,4.199,1231,3.708,1232,2.416,1233,4.199,1234,5.762,1235,4.512,1236,4.512,1237,2.416,1238,2.416,1239,4.199,1240,4.512,1241,5.459,1242,4.512,1243,3.708,1244,3.708,1245,4.512,1246,2.416,1247,2.248,1248,4.199,1249,2.659,1250,3.708,1251,3.708,1252,3.245,1253,2.416,1254,1.759,1255,2.416,1256,2.416,1257,2.416,1258,2.416,1259,2.416,1260,2.416,1261,2.416,1262,2.416,1263,2.416,1264,2.416,1265,2.416,1266,2.416,1267,2.114,1268,4.199,1269,2.416,1270,2.416,1271,2.416,1272,2.248,1273,2.248,1274,4.512,1275,3.708,1276,2.928,1277,3.708,1278,2.416,1279,3.708,1280,2.416,1281,2.416,1282,2.416,1283,2.416,1284,2.416,1285,2.416,1286,2.416,1287,2.416,1288,2.416,1289,2.416,1290,2.416,1291,2.416,1292,2.416,1293,2.416,1294,2.416,1295,2.416,1296,2.416,1297,2.416,1298,2.416,1299,2.416,1300,2.416,1301,2.416,1302,2.416,1303,2.416,1304,2.416,1305,3.708,1306,2.416,1307,2.416,1308,2.416,1309,2.416,1310,2.416,1311,3.708,1312,2.416,1313,2.416,1314,2.416,1315,2.416,1316,2.416,1317,2.416,1318,2.416,1319,2.416,1320,2.416,1323,4.052,1324,4.052,1328,2.64,1335,2.64,1341,2.64,1378,4.575,1379,4.575,1380,2.248,1381,2.981,1382,2.981,1383,2.981,1384,2.981,1385,2.981,1386,2.981,1387,2.981,1388,2.981,1389,2.981,1390,2.981,1391,2.981,1392,2.981,1393,2.981]],["title/interfaces/CreateCustomBlockRequest.html",[0,0.249,1195,3.214]],["body/interfaces/CreateCustomBlockRequest.html",[0,0.268,2,0.737,3,0.049,4,0.037,5,0.037,8,0.882,11,2.727,12,3.073,13,0.729,14,0.104,15,0.686,16,3.684,17,2.972,18,2.332,19,3.005,20,0.874,21,3.534,22,0.354,23,0.301,24,0.008,28,0.212,29,3.31,31,2.081,33,0.088,35,1.506,37,0.93,38,2.148,39,1.93,40,1.161,42,2.448,46,4.364,64,0.999,65,1.768,69,2.199,75,2.567,76,0.512,77,3.306,78,1.551,79,1.338,80,1.705,81,4.219,89,1.059,90,0.586,91,1.476,94,0.753,96,1.588,97,1.341,99,1.542,101,0.004,102,0.004,103,0.043,107,1.108,108,1.988,114,0.677,116,1.134,141,1.108,147,0.515,149,1.466,151,1.496,153,1.431,161,2.938,166,1.218,174,1.739,180,0.949,186,1.601,192,1.907,215,1.189,221,2.139,225,1.384,243,1.458,244,1.013,292,0.678,303,1.423,304,1.059,312,4.162,344,1.108,347,2.148,401,3.084,402,1.988,437,2.938,450,1.481,451,1.907,489,3.085,492,4.281,496,0.949,545,0.785,561,1.988,604,3.445,767,1.6,820,2.405,1058,3.464,1064,4.162,1066,3.464,1071,2.304,1075,2.304,1085,2.304,1101,2.304,1160,1.988,1162,2.304,1181,2.45,1191,2.633,1192,2.757,1193,2.633,1194,2.633,1195,4.162,1196,2.079,1197,2.45,1198,2.304,1199,2.633,1200,2.633,1201,4.756,1202,2.633,1203,2.633,1204,2.633,1205,2.633,1206,2.633,1207,3.958,1208,2.633,1209,2.633,1210,2.45,1211,2.633,1212,5.409,1213,2.633,1214,2.304,1215,2.45,1216,1.707,1217,2.45,1218,2.45,1219,2.988,1220,2.633,1221,2.633,1222,2.633,1223,2.633,1224,2.633,1225,1.551,1226,1.506,1227,2.633,1228,3.464,1229,3.125,1230,2.45,1231,3.958,1232,2.633,1233,2.45,1234,5.957,1235,4.756,1236,4.756,1237,2.633,1238,2.633,1239,4.426,1240,4.756,1241,5.67,1242,4.756,1243,3.958,1244,3.958,1245,4.756,1246,2.633,1247,2.45,1248,2.45,1249,1.551,1250,3.958,1251,3.958,1252,3.464,1253,2.633,1254,1.877,1255,2.633,1256,2.633,1257,2.633,1258,2.633,1259,2.633,1260,2.633,1261,2.633,1262,2.633,1263,2.633,1264,2.633,1265,2.633,1266,2.633,1267,2.304,1268,2.45,1269,2.633,1270,2.633,1271,2.633,1272,2.45,1273,2.45,1274,2.633,1275,2.633,1276,3.125,1277,3.958,1278,2.633,1279,3.958,1280,2.633,1281,2.633,1282,2.633,1283,2.633,1284,2.633,1285,2.633,1286,2.633,1287,2.633,1288,2.633,1289,2.633,1290,2.633,1291,2.633,1292,2.633,1293,2.633,1294,2.633,1295,2.633,1296,2.633,1297,2.633,1298,2.633,1299,2.633,1300,2.633,1301,2.633,1302,2.633,1303,2.633,1304,2.633,1305,2.633,1306,2.633,1307,2.633,1308,2.633,1309,2.633,1310,2.633,1311,2.633,1312,2.633,1313,2.633,1314,2.633,1315,2.633,1316,2.633,1317,2.633,1318,2.633,1319,2.633,1320,2.633]],["title/classes/CreateExecutionDto.html",[103,0.06,1394,2.467]],["body/classes/CreateExecutionDto.html",[3,0.107,4,0.044,5,0.044,8,1.003,13,0.923,14,0.125,15,0.548,22,0.351,23,0.275,24,0.008,28,0.201,33,0.126,34,2.128,36,0.994,37,0.618,39,1.024,41,1.927,62,3.03,64,1.837,66,2.88,76,0.544,89,1.272,90,1.285,91,1.398,99,1.254,101,0.005,102,0.005,103,0.113,105,1.091,112,0.99,114,0.624,115,2.576,163,2.828,166,1.463,204,1.272,243,1.164,267,1.75,280,1.915,296,1.003,307,2.06,450,2.026,452,1.068,479,1.862,496,1.631,517,2.572,556,1.808,594,2.636,611,2.572,621,2.515,623,1.537,652,2.634,656,1.662,767,1.921,802,2.05,862,2.446,924,2.176,927,3.083,1028,2.638,1030,3.435,1031,3.036,1032,3.343,1034,1.862,1035,1.862,1038,2.589,1039,2.667,1041,1.921,1047,2.75,1048,2.667,1249,4.378,1394,3.04,1395,2.29,1396,3.83,1397,3.454,1398,3.9,1399,3.622,1400,2.29,1401,3.9,1402,3.9,1403,3.9,1404,2.74,1405,2.633,1406,3.83,1407,1.331,1408,2.123,1409,4.023,1410,2.508,1411,2.936,1412,2.638,1413,2.202,1414,1.115,1415,1.216,1416,2.29,1417,2.29,1418,4.742,1419,4.742,1420,2.29,1421,4.023,1422,2.29,1423,3.154,1424,3.116,1425,2.29,1426,2.29,1427,3.878,1428,3.154,1429,3.154,1430,1.499,1431,1.756,1432,2.29,1433,2.29,1434,2.29,1435,2.29,1436,2.123,1437,2.84,1438,2.123,1439,2.202,1440,2.202,1441,2.05,1442,2.202,1443,2.29,1444,2.202,1445,1.862]],["title/classes/CreateWalletDto.html",[103,0.06,1446,2.66]],["body/classes/CreateWalletDto.html",[3,0.066,4,0.05,5,0.05,8,1.015,14,0.14,15,0.594,20,0.66,22,0.362,23,0.306,24,0.008,28,0.218,33,0.122,36,0.98,37,1.188,41,1.265,45,2.387,64,1.807,76,0.563,79,1.659,80,1.528,90,1.352,101,0.005,102,0.005,103,0.11,105,1.224,112,1.194,114,0.674,147,1.247,149,1.069,170,2.448,180,1.278,212,3.079,216,2.271,233,3.375,243,2.578,244,1.364,250,3.219,267,2.111,296,1.125,307,1.149,450,1.931,463,2.513,545,1.463,547,2.727,641,3.419,785,2.028,854,3.296,902,3.648,924,2.625,927,3.12,931,3.555,1036,3.94,1128,3.316,1400,3.555,1404,3.016,1405,2.915,1407,1.493,1430,2.328,1446,3.555,1447,2.939,1448,3.758,1449,3.579,1450,4.232,1451,4.243,1452,4.374,1453,4.374,1454,4.374,1455,3.545,1456,4.374,1457,3.53,1458,4.374,1459,4.374,1460,4.374,1461,2.939,1462,3.65,1463,4.069,1464,2.568,1465,3.705,1466,2.299,1467,3.705,1468,3.419,1469,3.705,1470,3.296,1471,3.705,1472,4.069,1473,3.183,1474,2.47,1475,3.705,1476,2.568,1477,5.036,1478,4.069,1479,3.875,1480,2.799,1481,2.939,1482,2.799,1483,4.796,1484,4.069,1485,3.875,1486,3.875,1487,3.875,1488,2.568,1489,2.568,1490,2.568,1491,2.568,1492,2.568,1493,2.677,1494,3.875,1495,3.296]],["title/classes/CreateWorkflowDto.html",[103,0.06,1496,2.9]],["body/classes/CreateWorkflowDto.html",[3,0.082,4,0.062,5,0.062,8,1.009,13,0.613,14,0.176,15,0.691,20,0.985,22,0.347,23,0.296,24,0.008,28,0.28,33,0.123,36,0.936,64,1.777,67,3.339,76,0.449,90,1.614,101,0.006,102,0.006,103,0.115,105,1.535,112,1.245,114,0.583,147,0.87,149,0.969,204,1.789,267,2.201,280,2.177,296,1.411,318,3.309,320,3.75,450,1.927,581,2.403,611,2.162,924,2.737,927,3.078,1400,3.221,1404,3.034,1405,2.964,1407,1.872,1410,2.109,1412,2.218,1414,1.568,1424,2.62,1496,4.507,1497,4.138,1498,5.486,1499,7.043,1500,5.486,1501,4.859,1502,5.486,1503,5.486,1504,4.793,1505,3.098,1506,3.511,1507,4.978,1508,3.511]],["title/interfaces/CustomBlockConfigField.html",[0,0.249,25,2.66]],["body/interfaces/CustomBlockConfigField.html",[0,0.493,1,2.588,2,1.001,3,0.066,4,0.05,5,0.05,6,2.588,7,2.588,8,0.96,9,2.171,10,1.576,11,2.95,12,3.044,13,0.779,14,0.141,15,0.684,16,3.293,17,3.299,18,2.105,19,2.964,20,0.972,21,3.658,22,0.366,23,0.31,24,0.008,25,4.094,26,3.574,27,3.574,28,0.159,29,3.387,30,2.489,31,2.223,32,2.588,33,0.135,34,2.274,35,3.877,36,0.905,37,1.414,38,2.229,39,1.599,40,2.177,41,1.457,42,1.654,43,2.588,44,3.386,45,2.399,46,4.396,47,3.095,48,3.574,49,3.574,50,2.588,51,2.588,52,1.738,53,1.782,54,2.043,55,2.043,56,1.654,57,2.588,58,1.985,59,1.985,60,3.437,61,2.907,62,1.654,63,0.944,64,1.77,65,4.639,66,1.782,67,2.34,68,2.526,69,3.387,70,2.821,71,3.953,72,3.725,73,3.545,74,5.003,75,3.2,76,0.445,77,2.819,78,3.33,79,1.91,80,2.435,81,3.2,82,1.985,83,2.588,84,2.489,85,2.698,86,2.698,87,1.134,88,2.588,89,1.438,90,0.795,91,0.746,92,1.931,93,3.574,94,1.411,95,2.698,96,1.001,97,0.923,98,2.698,99,1.17,100,3.574,101,0.005,102,0.005,114,0.725]],["title/interfaces/CustomBlockData.html",[0,0.249,83,2.66]],["body/interfaces/CustomBlockData.html",[0,0.486,1,2.472,2,0.956,3,0.063,4,0.048,5,0.048,6,2.472,7,2.472,8,0.953,9,2.074,10,1.506,11,2.925,12,3.02,13,0.824,14,0.135,15,0.723,16,3.617,17,3.462,18,2.011,19,3.255,20,0.964,21,3.906,22,0.367,23,0.314,24,0.008,25,3.462,26,3.462,27,3.462,28,0.152,29,3.622,30,2.378,31,2.17,32,2.472,33,0.134,34,2.219,35,3.828,36,1.014,37,1.403,38,2.159,39,1.549,40,2.108,41,1.421,42,1.579,43,2.472,44,3.338,45,2.324,46,4.651,47,2.998,48,3.462,49,3.462,50,2.472,51,2.472,52,1.66,53,1.703,54,1.952,55,1.952,56,1.579,57,2.472,58,1.896,59,1.896,60,3.33,61,2.816,62,1.579,63,0.914,64,1.645,65,4.224,66,1.703,67,1.619,68,1.747,69,1.896,70,2.108,71,2.213,72,3.608,73,3.46,74,5.195,75,3.1,76,0.513,77,3.252,78,3.841,79,2.204,80,2.809,81,4.079,82,2.656,83,3.462,84,4.163,85,4.511,86,4.511,87,1.083,88,2.472,89,1.373,90,0.759,91,0.712,92,1.844,93,3.462,94,1.366,95,2.577,96,0.956,97,0.894,98,2.577,99,1.133,100,3.462,101,0.005,102,0.005,114,0.666]],["title/interfaces/CustomBlockDefinition.html",[0,0.249,75,2.382]],["body/interfaces/CustomBlockDefinition.html",[0,0.487,1,2.512,2,0.971,3,0.064,4,0.049,5,0.049,6,2.512,7,2.512,8,0.955,9,2.107,10,1.53,11,2.934,12,3.028,13,0.767,14,0.137,15,0.673,16,3.633,17,3.474,18,2.043,19,3.269,20,0.967,21,3.922,22,0.366,23,0.311,24,0.008,25,3.5,26,3.5,27,3.5,28,0.154,29,3.641,30,2.416,31,2.188,32,2.512,33,0.134,34,2.238,35,3.845,36,0.893,37,1.407,38,2.183,39,1.566,40,2.132,41,1.434,42,1.605,43,2.512,44,3.355,45,2.35,46,4.664,47,3.032,48,3.5,49,3.5,50,2.512,51,2.512,52,1.686,53,1.73,54,1.983,55,1.983,56,1.605,57,2.512,58,1.927,59,1.927,60,3.367,61,2.847,62,1.605,63,0.925,64,1.654,65,4.249,66,1.73,67,1.645,68,1.775,69,1.927,70,2.132,71,2.249,72,3.649,73,3.774,74,5.209,75,3.608,76,0.516,77,3.268,78,3.86,79,2.215,80,2.823,81,4.103,82,1.927,83,2.512,84,2.416,85,2.618,86,2.618,87,1.1,88,2.512,89,1.395,90,0.772,91,0.724,92,1.874,93,3.5,94,1.382,95,2.618,96,0.971,97,0.904,98,2.618,99,1.146,100,3.5,101,0.005,102,0.005,114,0.72]],["title/interfaces/CustomBlockExecutionResult.html",[0,0.249,88,2.66]],["body/interfaces/CustomBlockExecutionResult.html",[0,0.492,1,2.66,2,1.028,3,0.068,4,0.052,5,0.052,6,2.66,7,2.66,8,0.944,9,2.231,10,1.62,11,2.964,12,3.057,13,0.79,14,0.145,15,0.694,16,3.332,17,3.327,18,2.163,19,2.998,20,0.948,21,3.976,22,0.365,23,0.292,24,0.008,25,3.642,26,3.642,27,3.642,28,0.163,29,3.426,30,2.558,31,2.256,32,2.66,33,0.135,34,2.307,35,3.905,36,0.916,37,1.42,38,2.271,39,1.629,40,2.218,41,1.589,42,1.699,43,2.66,44,3.414,45,2.445,46,4.428,47,3.154,48,3.642,49,3.642,50,2.66,51,2.66,52,1.786,53,1.832,54,2.1,55,2.1,56,1.699,57,2.66,58,2.04,59,2.04,60,3.503,61,2.962,62,1.699,63,0.962,64,1.683,65,4.337,66,1.832,67,1.742,68,1.88,69,2.04,70,2.218,71,2.381,72,3.796,73,3.596,74,5.036,75,3.261,76,0.451,77,2.86,78,3.378,79,1.938,80,2.47,81,3.261,82,2.04,83,2.66,84,2.558,85,2.772,86,2.772,87,1.595,88,3.642,89,2.481,90,1.276,91,1.287,92,3.332,93,3.642,94,1.437,95,2.772,96,1.028,97,0.941,98,2.772,99,1.192,100,3.642,101,0.005,102,0.005,114,0.681]],["title/interfaces/CustomBlockInput.html",[0,0.249,26,2.66]],["body/interfaces/CustomBlockInput.html",[0,0.495,1,2.655,2,1.026,3,0.068,4,0.051,5,0.051,6,2.655,7,2.655,8,0.963,9,2.227,10,1.617,11,2.963,12,3.057,13,0.79,14,0.145,15,0.693,16,3.329,17,3.325,18,2.16,19,2.996,20,0.976,21,3.691,22,0.365,23,0.296,24,0.008,25,3.637,26,4.149,27,3.637,28,0.163,29,3.424,30,2.554,31,2.253,32,2.655,33,0.135,34,2.304,35,4.152,36,0.915,37,1.42,38,2.268,39,1.627,40,2.215,41,1.476,42,1.696,43,2.655,44,3.413,45,2.442,46,4.426,47,3.15,48,3.637,49,3.637,50,2.655,51,2.655,52,1.783,53,1.829,54,2.096,55,2.096,56,1.696,57,2.655,58,2.037,59,2.037,60,3.498,61,2.959,62,2.324,63,1.096,64,1.779,65,4.667,66,1.829,67,1.739,68,1.877,69,2.037,70,2.215,71,2.377,72,3.791,73,3.593,74,5.034,75,3.257,76,0.451,77,2.857,78,3.375,79,1.936,80,2.468,81,3.257,82,2.037,83,2.655,84,2.554,85,2.767,86,2.767,87,1.163,88,2.655,89,1.475,90,0.816,91,0.765,92,1.981,93,3.637,94,1.436,95,2.767,96,1.026,97,0.94,98,2.767,99,1.19,100,3.637,101,0.005,102,0.005,114,0.513]],["title/interfaces/CustomBlockOutput.html",[0,0.249,27,2.66]],["body/interfaces/CustomBlockOutput.html",[0,0.495,1,2.672,2,1.033,3,0.068,4,0.052,5,0.052,6,2.672,7,2.672,8,0.964,9,2.241,10,1.627,11,2.967,12,3.06,13,0.792,14,0.146,15,0.695,16,3.338,17,3.331,18,2.173,19,3.004,20,0.977,21,3.699,22,0.366,23,0.292,24,0.008,25,3.653,26,3.653,27,4.162,28,0.164,29,3.433,30,2.57,31,2.261,32,2.672,33,0.135,34,2.312,35,4.156,36,0.917,37,1.421,38,2.278,39,1.634,40,2.225,41,1.481,42,1.707,43,2.672,44,3.419,45,2.452,46,4.434,47,3.164,48,3.653,49,3.653,50,2.672,51,2.672,52,1.794,53,1.84,54,2.109,55,2.109,56,1.707,57,2.672,58,2.05,59,2.05,60,3.513,61,2.971,62,1.707,63,1.1,64,1.782,65,4.344,66,2.516,67,1.749,68,1.888,69,2.05,70,2.225,71,2.392,72,3.808,73,3.605,74,5.041,75,3.271,76,0.452,77,2.867,78,3.386,79,1.942,80,2.476,81,3.271,82,2.05,83,2.672,84,2.57,85,2.785,86,2.785,87,1.17,88,2.672,89,1.484,90,0.821,91,0.77,92,1.993,93,3.653,94,1.442,95,2.785,96,1.033,97,0.944,98,2.785,99,1.196,100,3.653,101,0.005,102,0.005]],["title/controllers/DashboardController.html",[256,1.931,1509,3.673]],["body/controllers/DashboardController.html",[3,0.097,4,0.074,5,0.074,8,0.828,14,0.207,20,0.704,22,0.246,23,0.285,24,0.008,28,0.302,33,0.097,63,1.003,76,0.412,97,0.981,101,0.007,102,0.007,103,0.086,112,0.981,114,0.535,147,1.025,149,1.142,150,1.824,151,1.644,186,1.216,256,2.755,258,2.755,260,3.795,261,2.329,266,3.075,267,1.734,273,4.58,276,2.548,292,1.35,293,3.651,294,4.405,295,4.774,296,1.663,303,2.831,304,2.108,306,3.651,307,1.698,454,2.912,758,4.58,853,6.717,995,4.344,996,4.876,1345,5.534,1509,6.322,1510,6.465,1511,6.91,1512,6.465,1513,6.465,1514,6.465,1515,6.79,1516,6.465,1517,5.24,1518,5.943,1519,5.726,1520,6.465,1521,6.465,1522,6.465,1523,6.465,1524,6.465]],["title/modules/DashboardModule.html",[327,1.62,711,3.214]],["body/modules/DashboardModule.html",[3,0.102,4,0.078,5,0.078,24,0.008,28,0.309,33,0.102,101,0.007,102,0.007,103,0.09,258,3.433,292,1.425,327,3.065,329,3.257,330,3.162,331,3.468,332,3.468,333,3.468,334,3.86,335,4.358,339,4.095,340,3.468,341,3.162,711,6.561,1509,6.947,1518,6.727,1519,6.042,1525,6.042,1526,6.042,1527,6.042,1528,6.822,1529,6.822]],["title/injectables/DashboardService.html",[344,1.029,1518,3.214]],["body/injectables/DashboardService.html",[3,0.067,4,0.051,5,0.051,14,0.144,20,0.671,22,0.326,23,0.24,24,0.008,28,0.254,33,0.067,36,0.742,44,1.862,63,0.956,89,1.463,97,0.935,99,1.705,101,0.005,102,0.005,103,0.059,110,1.585,112,0.935,114,0.51,147,0.711,149,0.792,150,0.977,151,1.381,174,1.061,186,1.769,244,2.195,261,1.839,276,3.423,292,0.937,304,2.009,344,1.399,345,1.862,347,2.256,473,3.479,496,2.694,652,1.463,773,2.557,844,4.994,845,4.647,853,3.384,1031,1.912,1032,3.384,1104,5.989,1106,3.636,1114,4.994,1216,2.358,1414,1.283,1430,2.369,1487,4.504,1511,5.458,1515,3.636,1518,4.371,1530,4.487,1531,3.384,1532,4.465,1533,5.142,1534,4.487,1535,6.162,1536,4.487,1537,6.936,1538,4.487,1539,6.162,1540,4.487,1541,4.487,1542,4.487,1543,4.487,1544,4.487,1545,6.162,1546,4.487,1547,4.487,1548,6.162,1549,4.487,1550,4.487,1551,4.487,1552,4.487,1553,3.974,1554,6.162,1555,4.487,1556,7.033,1557,5.458,1558,7.576,1559,4.487,1560,6.162,1561,4.487,1562,4.487,1563,4.487,1564,7.576,1565,4.487,1566,7.038,1567,6.71,1568,7.576,1569,4.487,1570,4.487,1571,8.204,1572,4.487,1573,7.038,1574,4.487,1575,4.632,1576,3.636,1577,6.162,1578,6.71,1579,6.162,1580,6.162,1581,5.458,1582,6.71,1583,6.162,1584,6.162,1585,6.162,1586,6.162,1587,7.038,1588,4.487,1589,4.487,1590,4.487,1591,4.487,1592,8.204,1593,4.487,1594,7.038,1595,4.487,1596,6.162,1597,7.576,1598,4.487,1599,7.576,1600,4.487,1601,3.974,1602,4.487,1603,6.162,1604,5.458,1605,6.162,1606,6.162,1607,4.487,1608,6.162,1609,4.487,1610,4.487,1611,4.487]],["title/modules/DatabaseModule.html",[327,1.62,712,2.559]],["body/modules/DatabaseModule.html",[3,0.093,4,0.071,5,0.071,24,0.008,28,0.297,33,0.093,101,0.007,102,0.007,103,0.082,292,1.299,327,2.945,329,2.97,330,2.883,331,3.162,332,3.162,333,3.162,334,3.71,335,4.188,339,3.874,340,3.162,341,2.883,712,5.379,743,6.749,773,2.581,937,5.506,1192,5.296,1532,5.105,1533,5.739,1612,5.509,1613,5.509,1614,5.509,1615,5.867,1616,6.16,1617,6.219,1618,4.691]],["title/classes/ExecuteWorkflowDto.html",[103,0.06,1619,3.418]],["body/classes/ExecuteWorkflowDto.html",[3,0.085,4,0.064,5,0.064,8,0.93,13,0.803,14,0.182,15,0.705,22,0.343,23,0.269,24,0.008,28,0.259,33,0.108,34,1.847,41,1.79,62,3.215,64,1.82,90,1.296,101,0.006,102,0.006,103,0.104,105,1.585,112,1.198,114,0.725,138,3.148,244,2.242,267,2.118,280,1.924,296,1.457,307,1.488,380,2.124,450,1.885,452,1.969,466,4.398,496,2.1,558,5.58,611,2.232,623,2.833,624,5.053,746,2.705,924,2.634,927,2.901,1024,2.414,1254,2.177,1399,2.88,1400,3.325,1404,2.9,1405,2.51,1407,1.933,1424,2.705,1430,2.763,1445,2.705,1455,4.59,1619,5.421,1620,7.356,1621,5.017,1622,6.399,1623,6.213,1624,5.421,1625,6.366,1626,5.825,1627,6.108,1628,6.993,1629,5.664,1630,5.664,1631,6.366,1632,6.366,1633,6.366,1634,6.993,1635,6.399,1636,6.993,1637,5.664,1638,5.664,1639,6.366,1640,5.017,1641,4.272,1642,5.017,1643,6.213,1644,5.421,1645,4.59]],["title/classes/ExecuteWorkflowResponseDto.html",[103,0.06,1641,3.418]],["body/classes/ExecuteWorkflowResponseDto.html",[3,0.086,4,0.066,5,0.066,8,0.934,13,0.643,14,0.185,15,0.712,22,0.34,23,0.271,24,0.008,28,0.262,33,0.109,34,2.367,41,1.865,62,2.723,64,1.762,90,1.038,101,0.006,102,0.006,103,0.105,105,1.61,112,1.206,114,0.601,138,2.52,244,1.794,267,2.133,280,1.682,296,1.48,307,2.089,380,2.158,450,1.955,452,1.576,466,3.521,496,1.681,558,5.613,611,2.861,623,2.268,624,5.09,746,2.748,924,2.653,927,2.912,1024,3.389,1254,2.212,1399,3.691,1404,2.917,1405,2.535,1407,1.963,1424,3.467,1430,2.212,1445,3.467,1619,4.34,1620,7.398,1621,5.096,1622,4.663,1623,6.109,1624,4.34,1625,5.096,1626,4.663,1627,6.125,1628,6.43,1631,5.096,1632,5.096,1633,5.096,1634,7.045,1635,6.446,1636,7.045,1639,6.43,1640,5.096,1641,5.475,1642,6.43,1643,6.553,1644,5.999,1645,5.884,1646,5.754,1647,5.754,1648,5.754]],["title/classes/ExecutionActionDto.html",[103,0.06,1442,2.559]],["body/classes/ExecutionActionDto.html",[3,0.107,4,0.045,5,0.045,8,1.004,13,0.906,14,0.127,15,0.552,20,0.43,22,0.351,23,0.258,24,0.008,28,0.203,33,0.127,34,2.141,36,0.997,37,0.625,39,1.036,41,1.918,62,2.686,63,0.612,64,1.83,66,2.896,76,0.546,89,1.287,90,1.292,91,1.402,99,1.262,101,0.005,102,0.005,103,0.113,105,1.104,110,1.015,112,0.854,114,0.627,115,2.585,163,2.841,166,1.48,204,1.287,243,1.178,267,1.058,280,1.878,296,1.015,307,2.068,450,2.041,452,1.081,479,1.884,496,1.645,517,2.588,556,2.61,594,2.668,611,2.588,621,1.777,623,1.555,652,2.643,656,2.799,767,1.943,802,2.074,862,2.466,924,1.316,927,3.085,955,1.829,1028,1.595,1030,3.449,1031,3.052,1032,3.356,1034,1.884,1035,1.884,1038,2.61,1039,2.689,1041,1.943,1047,2.773,1048,2.689,1249,4.421,1394,2.148,1395,2.316,1396,2.316,1399,3.339,1404,2.75,1405,2.645,1406,3.855,1407,1.346,1408,2.148,1409,4.044,1410,2.524,1411,2.96,1412,2.655,1413,2.228,1414,1.128,1415,1.231,1416,2.316,1417,2.316,1418,4.865,1419,4.758,1420,2.316,1421,4.044,1422,2.316,1423,3.18,1424,3.136,1425,2.316,1426,2.316,1427,3.898,1428,3.18,1429,3.18,1430,1.517,1431,1.777,1432,2.316,1433,2.316,1434,2.316,1435,2.316,1436,2.148,1437,2.863,1438,2.148,1439,2.228,1440,2.228,1441,2.074,1442,3.18,1443,3.306,1444,2.228,1445,1.884,1649,5.632]],["title/classes/ExecutionActionResponseDto.html",[103,0.06,1444,2.559]],["body/classes/ExecutionActionResponseDto.html",[3,0.107,4,0.044,5,0.044,8,1.003,13,0.903,14,0.125,15,0.548,20,0.425,22,0.35,23,0.267,24,0.008,28,0.202,33,0.126,34,2.128,36,0.995,37,0.886,39,1.025,41,1.915,62,2.673,63,0.605,64,1.815,66,2.881,76,0.537,89,2.128,90,1.285,91,1.398,99,1.254,101,0.005,102,0.005,103,0.113,105,1.092,110,1.004,112,0.99,114,0.462,115,2.722,141,1.907,163,2.829,166,2.096,204,1.273,243,1.165,267,1.499,280,1.872,296,1.004,307,2.061,380,2.096,450,2.038,452,1.069,479,1.864,496,1.632,517,2.573,556,1.809,594,2.636,611,2.573,621,1.758,623,1.538,652,2.635,656,1.663,767,2.752,802,2.937,862,2.447,924,1.864,927,3.083,955,1.809,1028,1.578,1030,3.436,1031,3.037,1032,3.344,1034,1.864,1035,1.864,1038,2.59,1039,2.668,1041,1.922,1047,2.752,1048,2.668,1249,4.416,1394,2.124,1395,2.291,1396,2.291,1399,3.319,1404,2.74,1405,2.634,1406,3.832,1407,1.332,1408,2.124,1409,4.024,1410,2.509,1411,2.937,1412,2.639,1413,2.204,1414,1.116,1415,1.217,1416,2.291,1417,2.291,1418,4.851,1419,4.743,1420,2.291,1421,4.024,1422,2.291,1423,3.155,1424,3.117,1425,2.291,1426,2.291,1427,3.879,1428,3.155,1429,3.155,1430,1.5,1431,1.758,1432,2.291,1433,2.291,1434,2.291,1435,2.291,1436,2.124,1437,2.841,1438,2.124,1439,2.204,1440,2.204,1441,2.052,1442,2.204,1443,2.291,1444,3.155,1445,2.668,1650,5.588,1651,3.903]],["title/interfaces/ExecutionLog.html",[0,0.249,1033,3.045]],["body/interfaces/ExecutionLog.html",[0,0.475,2,1.224,3,0.105,4,0.061,5,0.061,8,0.573,11,1.799,12,2.377,13,1.007,14,0.173,15,0.683,19,2.126,22,0.366,23,0.304,24,0.008,33,0.13,37,0.855,41,1.764,42,2.023,54,2.5,55,3.229,56,2.613,63,0.836,76,0.552,82,2.429,87,1.791,90,1.639,91,0.912,92,2.362,101,0.006,102,0.006,107,1.84,114,0.576,115,2.873,137,1.84,138,2.362,146,3.137,149,0.952,153,1.103,159,5.166,163,3.059,170,2.18,216,2.023,245,3.3,250,2.5,280,1.614,307,1.829,318,1.975,427,3.045,444,2.742,590,3.791,594,1.645,623,2.126,652,1.758,656,2.298,862,3.571,891,3.451,1001,3.451,1021,4.68,1022,3.624,1023,5.473,1024,2.298,1025,3.825,1026,3.825,1027,4.68,1028,2.18,1029,3.624,1030,2.362,1031,2.298,1032,2.298,1033,5.184,1034,4.032,1035,4.032,1036,4.286,1037,3.791,1038,3.229,1039,3.326,1040,3.624,1041,2.656,1042,3.451,1043,4.941,1044,2.575,1045,3.451,1046,2.5,1047,2.656,1048,2.575,1049,3.624,1050,3.825,1051,3.825,1052,3.825]],["title/injectables/ExecutionRepository.html",[344,1.029,1532,2.467]],["body/injectables/ExecutionRepository.html",[3,0.057,4,0.043,5,0.043,13,0.949,14,0.122,20,0.969,22,0.359,23,0.309,24,0.008,28,0.232,33,0.057,36,0.899,63,1.36,76,0.559,79,1.764,91,1.415,92,1.668,96,1.99,97,1.318,99,1.055,101,0.005,102,0.005,103,0.05,110,0.98,112,1.33,114,0.725,116,1.918,141,1.3,149,1.45,150,1.892,151,1.848,153,1.887,174,0.901,183,2.989,186,1.406,215,2.011,217,3.36,244,1.713,261,1.639,266,3.067,280,1.272,292,0.796,303,1.668,307,2.282,318,2.011,320,2.279,344,1.246,345,1.581,380,1.429,452,1.504,652,1.242,773,1.581,860,3.798,953,4.864,955,2.545,1024,2.34,1028,3.146,1030,1.668,1032,1.623,1037,2.073,1042,2.438,1192,3.979,1225,3.567,1226,3.267,1380,2.873,1410,2.111,1412,2.849,1414,2.391,1415,2.198,1532,2.989,1537,3.087,1618,2.873,1652,3.809,1653,5.491,1654,4.45,1655,5.491,1656,5.491,1657,5.491,1658,5.491,1659,5.491,1660,5.491,1661,6.439,1662,6.439,1663,3.809,1664,5.491,1665,3.809,1666,3.224,1667,3.809,1668,5.491,1669,3.809,1670,5.491,1671,3.809,1672,3.94,1673,5.491,1674,3.809,1675,5.491,1676,3.809,1677,5.491,1678,3.809,1679,5.491,1680,3.809,1681,3.69,1682,5.491,1683,3.809,1684,3.809,1685,3.809,1686,8.21,1687,3.809,1688,3.809,1689,3.809,1690,3.809,1691,5.703,1692,5.703,1693,4.327,1694,6.439,1695,3.809,1696,3.809,1697,3.374,1698,6.439,1699,3.47,1700,3.809,1701,5.491,1702,3.514,1703,3.809,1704,6.439,1705,6.439,1706,3.809,1707,3.809,1708,3.809,1709,3.809,1710,5.491,1711,3.809,1712,3.809,1713,3.374,1714,3.809,1715,3.809,1716,3.809]],["title/interfaces/ExecutionResult.html",[0,0.249,1040,3.045]],["body/interfaces/ExecutionResult.html",[0,0.473,2,1.211,3,0.104,4,0.061,5,0.061,8,0.567,11,1.78,12,2.361,13,0.963,14,0.171,15,0.679,19,2.103,22,0.366,23,0.306,24,0.008,33,0.129,37,0.846,41,1.758,42,2.001,54,2.473,55,3.207,56,2.595,63,0.828,76,0.55,82,3.116,87,2.217,90,1.622,91,0.903,92,3.557,101,0.006,102,0.006,107,1.821,114,0.672,115,2.749,137,1.821,138,2.337,146,3.116,149,0.942,153,1.092,159,5.149,163,2.879,170,2.157,216,2.001,245,3.265,250,2.473,280,1.779,307,2.21,318,1.954,427,3.013,444,2.713,590,3.765,594,1.628,623,2.103,652,1.74,656,2.274,862,2.337,891,3.415,1001,3.415,1021,4.649,1022,3.586,1023,5.445,1024,2.274,1025,3.785,1026,3.785,1027,4.649,1028,2.157,1029,3.586,1030,2.337,1031,2.274,1032,2.274,1033,5.458,1034,3.303,1035,3.303,1036,2.805,1037,4.421,1038,3.901,1039,4.018,1040,4.649,1041,4,1042,5.198,1043,4.907,1044,2.548,1045,3.415,1046,2.473,1047,2.628,1048,2.548,1049,3.586,1050,3.785,1051,3.785,1052,3.785]],["title/modules/ExecutionsModule.html",[327,1.62,713,3.214]],["body/modules/ExecutionsModule.html",[3,0.093,4,0.071,5,0.071,24,0.008,28,0.327,33,0.093,101,0.007,102,0.007,103,0.082,258,3.245,292,1.297,327,2.944,329,2.966,330,2.879,331,3.158,332,3.158,333,3.158,334,3.708,335,4.186,339,3.871,340,3.158,341,2.879,594,2.323,712,5.061,713,6.714,718,5.116,725,4.174,750,5.502,751,5.502,773,2.578,1532,4.144,1717,5.502,1718,6.212,1719,5.502,1720,5.502,1721,7.073,1722,7.073,1723,7.073,1724,6.212,1725,8.233,1726,6.212,1727,7.614,1728,6.212,1729,6.212]],["title/injectables/ExecutionsService.html",[344,1.029,1721,3.418]],["body/injectables/ExecutionsService.html",[3,0.043,4,0.033,5,0.033,13,0.784,14,0.092,20,0.892,22,0.36,23,0.286,24,0.008,28,0.197,33,0.043,34,1.454,36,0.844,39,1.171,41,1.528,53,1.166,56,1.081,63,1.27,76,0.529,94,1.537,97,1.258,99,1.522,101,0.004,102,0.004,103,0.038,107,2.394,110,0.741,112,1.242,114,0.678,138,2.687,141,1.521,147,0.457,149,1.63,150,1.756,151,1.798,153,1.716,155,1.228,161,1.632,174,1.937,186,1.681,197,2.996,215,1.996,217,1.764,221,1.953,244,1.913,247,1.42,248,2.388,253,2.772,261,1.331,276,2.418,280,1.033,292,0.602,303,1.262,304,0.94,307,1.171,344,1.012,345,1.196,380,1.672,444,2.772,452,1.494,453,1.845,463,1.196,473,2.517,496,2.533,553,3.926,594,2.024,596,2.853,652,1.454,656,1.228,773,1.196,845,4.627,846,4.352,848,2.336,862,1.953,951,3.162,955,3.795,1028,3.506,1030,2.388,1031,2.323,1032,3.117,1036,1.515,1061,1.845,1097,2.336,1104,5.29,1107,2.336,1139,2.996,1186,4.418,1187,2.553,1210,4.627,1216,1.515,1252,3.162,1394,3.818,1408,4.113,1410,2.358,1413,1.628,1414,1.754,1415,1.39,1427,1.569,1430,3.148,1439,1.628,1515,3.613,1531,2.174,1532,3.818,1553,5.434,1556,2.553,1557,2.553,1567,5.876,1575,3.464,1576,2.336,1578,2.553,1581,2.553,1582,2.553,1601,4.829,1604,4.829,1699,2.685,1721,3.363,1730,2.883,1731,3.613,1732,3.613,1733,4.458,1734,4.458,1735,4.458,1736,3.949,1737,3.949,1738,3.613,1739,2.883,1740,4.458,1741,2.883,1742,2.883,1743,2.883,1744,2.883,1745,3.949,1746,2.883,1747,4.458,1748,2.883,1749,4.458,1750,2.883,1751,4.458,1752,2.883,1753,4.458,1754,2.883,1755,4.458,1756,2.883,1757,4.458,1758,2.883,1759,2.883,1760,2.174,1761,2.336,1762,2.883,1763,4.458,1764,2.883,1765,4.976,1766,2.553,1767,2.883,1768,2.553,1769,2.883,1770,2.883,1771,2.883,1772,1.628,1773,6.634,1774,5.452,1775,2.553,1776,2.883,1777,5.452,1778,2.553,1779,2.883,1780,2.883,1781,6.135,1782,2.883,1783,2.883,1784,3.949,1785,5.452,1786,5.452,1787,5.452,1788,2.883,1789,6.135,1790,2.883,1791,2.883,1792,2.883,1793,2.883,1794,5.452,1795,4.458,1796,2.883,1797,2.883,1798,6.135,1799,5.452,1800,5.452,1801,2.883,1802,4.458,1803,2.883,1804,2.883,1805,3.949,1806,2.883,1807,4.458,1808,2.883,1809,2.883,1810,2.553,1811,2.883,1812,2.883,1813,2.883,1814,2.883,1815,2.883,1816,2.883,1817,2.883,1818,5.452,1819,4.458,1820,4.458,1821,2.553,1822,2.883,1823,2.883,1824,5.452,1825,2.883,1826,4.458,1827,2.883,1828,2.883,1829,2.336,1830,2.883,1831,2.883,1832,2.883,1833,5.452,1834,2.883,1835,2.883,1836,2.883,1837,4.829,1838,2.883,1839,2.883,1840,2.883,1841,5.452,1842,3.949,1843,2.883,1844,2.336,1845,2.883,1846,2.883,1847,5.452,1848,4.458,1849,4.458,1850,2.883,1851,4.458,1852,2.883,1853,2.883,1854,4.458,1855,2.883,1856,2.883,1857,2.883,1858,2.883,1859,2.883,1860,2.883,1861,2.336,1862,5.452,1863,2.883,1864,2.174,1865,2.883,1866,2.883,1867,2.883,1868,2.883,1869,2.883,1870,2.883,1871,2.883,1872,2.883,1873,2.883,1874,2.883,1875,2.883,1876,2.883,1877,2.883,1878,3.949,1879,2.174,1880,2.336,1881,2.883,1882,2.883,1883,4.458,1884,2.883,1885,2.883,1886,6.135,1887,2.883,1888,2.883]],["title/classes/GenerateWorkflowDto.html",[103,0.06,278,2.773]],["body/classes/GenerateWorkflowDto.html",[3,0.072,4,0.089,5,0.054,8,1.005,10,2.299,13,0.719,14,0.153,15,0.631,22,0.344,23,0.308,24,0.008,28,0.262,33,0.125,36,0.774,37,1.152,64,1.819,67,1.837,70,3.054,76,0.533,90,0.862,96,1.765,101,0.006,102,0.006,103,0.115,105,1.337,112,1.18,114,0.692,267,2.086,278,3.935,280,2.039,281,2.924,284,2.924,287,3.829,296,1.229,309,3.501,314,2.601,315,2.601,318,3.061,320,3.469,370,4.105,371,4.105,407,3.501,408,2.601,409,2.601,410,3.957,411,2.601,412,2.601,413,2.698,450,1.939,463,2.669,491,4.391,509,2.698,510,2.698,511,2.698,512,2.698,513,2.698,514,2.698,516,3.631,517,2.535,533,3.631,534,3.631,581,2.093,594,2.55,606,2.698,619,4.233,726,3.058,924,2.594,927,3.065,1404,3.033,1405,3.133,1407,1.631,1462,3.821,1466,3.381,1473,2.512,1501,4.232,1504,4.583,1505,4.72,1889,5.454,1890,3.211,1891,4.778,1892,5.466,1893,6.431,1894,5.696,1895,4.778,1896,5.466,1897,4.778,1898,4.976,1899,4.778,1900,4.778,1901,3.211,1902,3.211,1903,3.211,1904,3.211]],["title/interfaces/GenerationOptions.html",[0,0.249,378,3.214]],["body/interfaces/GenerationOptions.html",[0,0.276,2,0.578,3,0.038,4,0.076,5,0.046,8,0.843,9,3.081,10,0.911,11,2.416,12,2.663,13,0.834,14,0.162,15,0.397,16,1.116,17,1.636,18,1.933,19,2.466,20,0.761,21,3.358,22,0.343,23,0.27,24,0.008,28,0.252,29,1.148,31,2.124,33,0.038,34,0.831,35,2.334,36,0.69,37,1.148,38,1.482,39,1.322,40,2.05,41,0.532,42,0.956,44,1.057,45,1.595,47,1.296,53,2.036,56,0.956,58,2.583,59,1.823,61,1.217,62,1.518,64,1.173,66,2.529,67,0.98,68,1.057,69,2.818,70,1.8,73,1.296,76,0.488,82,2.818,87,0.655,89,0.831,90,0.908,91,1.364,94,0.938,96,1.585,97,1.297,99,1.342,101,0.003,102,0.004,103,0.034,107,0.87,110,0.655,114,0.335,134,2.334,137,1.381,146,1.148,147,1.212,151,1.228,153,1.173,161,2.291,166,1.889,174,1.48,180,2.116,186,1.66,208,1.255,231,1.496,247,3.081,263,1.808,264,1.808,270,4.004,271,1.296,273,1.496,276,1.004,280,1.933,286,2.871,287,3.081,288,1.808,292,0.532,297,1.559,304,0.831,307,0.669,309,3.625,314,3.405,315,3.405,318,2.99,320,3.345,344,0.919,346,1.808,347,2.8,348,1.922,352,1.922,354,1.922,355,1.922,356,1.922,357,1.922,359,1.922,361,1.922,363,5.536,364,1.922,366,5.536,367,1.922,370,3.761,371,3.761,373,1.922,378,3.571,382,3.053,383,3.798,387,3.853,390,3.053,391,1.808,392,1.712,393,1.255,394,4.325,395,1.808,396,1.712,397,1.712,398,3.383,399,3.222,400,1.712,401,3.289,402,1.559,403,1.808,404,1.808,405,1.808,406,1.808,407,3.405,408,3.405,409,3.405,410,3.405,411,2.741,412,2.741,413,3.238,414,1.808,415,4.438,416,2.871,417,4.724,418,2.871,419,2.871,420,1.808,421,3.571,422,3.383,423,1.808,424,3.571,425,3.571,426,1.808,427,4.091,428,1.808,429,2.871,430,3.571,431,1.808,432,1.922,433,1.922,434,1.922,435,1.922,436,1.922,437,2.1,438,5.023,439,1.631,440,3.571,441,3.798,442,2.956,443,3.053,444,3.794,445,3.798,446,3.121,447,1.922,448,1.922,449,1.922,450,1.585,451,1.496,452,1.379,453,2.59,454,3.361,455,1.922,456,4.719,457,1.922,458,3.053,459,1.631,460,1.808,461,1.922,462,1.922,463,1.68,464,1.631,465,1.922,466,1.559,467,1.922,468,1.922,469,2.824,470,1.922,471,2.72,472,1.922,473,1.439,474,1.922,475,3.798,476,3.67,477,5.023,478,4.475,479,3.18,480,3.798,481,1.922,482,3.798,483,1.922,484,3.053,485,3.053,486,3.053,487,5.023,488,3.053,489,2.204,490,3.798,491,2.285,492,1.559,493,1.922,494,4.325,495,3.053,496,1.471,497,1.922,498,1.922,499,3.053,500,3.053,501,3.053,502,3.053,503,3.053,504,3.053,505,3.053,506,1.922,507,1.922,508,1.922,509,1.439,510,1.439,511,1.439,512,1.439,513,1.439,514,1.439,515,1.922,516,3.533,517,1.595,518,1.808,519,1.808,520,1.922,521,4.325,522,2.477,523,3.053,524,3.571,525,3.053,526,4.325,527,1.922,528,1.922,529,2.376,530,1.922,531,3.238,532,1.922,533,1.439,534,1.439,535,1.922,536,1.922,537,1.922,538,1.922,539,1.712,540,1.808,541,1.712,542,1.712,543,1.712,544,2.72,545,0.978,546,2.647,547,1.823,548,1.181,549,2.72,550,1.712,551,1.922,552,1.559,553,1.631,554,1.922,555,1.631,556,1.181,557,2.477,558,1.712,559,1.922,560,1.922,561,1.559,562,1.712,563,1.712,564,1.712,565,2.203,566,1.631,567,1.631,568,1.712,569,1.712,570,1.631,571,1.712,572,2.477,573,2.72,574,1.808,575,1.387,576,1.922,577,1.217,578,1.922,579,1.217,580,1.922,581,1.116,582,1.712,583,1.631,584,1.712,585,1.631,586,1.712,587,1.922,588,1.808,589,1.631,590,1.387,591,1.808,592,1.439,593,1.922,594,2.032,595,1.712,596,3.222,597,1.922,598,1.922,599,1.922,600,1.922,601,1.922,602,1.712,603,1.922,604,1.496,605,3.053,606,2.843,607,1.922,608,1.559,609,1.712,610,1.808,611,1.004,612,1.922,613,1.496,614,1.922,615,3.053,616,1.631,617,1.922,618,2.871,619,1.387,620,1.559,621,1.148,622,1.496,623,1.004,624,1.631,625,1.922,626,1.712,627,1.922,628,3.053,629,1.922,630,1.922,631,1.922,632,3.053,633,1.922,634,1.922,635,1.922,636,1.922,637,3.053,638,1.922,639,1.922,640,1.922,641,1.439,642,1.922,643,1.922,644,1.922,645,1.808,646,1.922,647,1.496,648,1.922,649,1.922,650,1.922,651,1.712,652,0.831,653,1.922,654,1.922,655,1.922,656,1.725,657,1.922,658,1.922,659,5.023,660,1.922,661,1.922,662,1.922,663,1.922,664,1.922,665,1.922,666,1.922,667,1.922,668,3.053,669,1.922,670,1.922,671,1.922,672,1.922,673,1.922,674,1.922,675,1.922,676,1.922,677,1.922,678,1.922,679,1.922,680,1.922,681,1.922,682,1.922,683,1.922,684,1.808,685,1.922,686,3.053,687,1.922,688,1.922,689,3.053,690,1.922,691,1.922,692,1.922,693,1.922,694,1.922,695,3.053,696,3.053,697,1.922,698,1.922,699,1.922,700,1.922,701,1.922,702,1.922,703,1.922,704,1.922]],["title/classes/GenerationOptionsDto.html",[103,0.06,1898,2.9]],["body/classes/GenerationOptionsDto.html",[3,0.073,4,0.089,5,0.056,8,1.002,10,2.332,13,0.729,14,0.157,15,0.64,22,0.345,23,0.307,24,0.008,28,0.265,33,0.126,36,0.785,37,1.296,64,1.785,67,1.876,70,2.804,76,0.537,90,0.88,96,1.78,101,0.006,102,0.006,103,0.115,105,1.365,112,1.114,114,0.54,267,1.971,278,2.986,280,1.99,281,2.986,284,2.986,287,3.212,296,1.255,309,3.55,314,3.999,315,3.999,318,2.993,320,3.392,370,2.755,371,2.755,407,3.55,408,2.656,409,2.656,410,3.999,411,2.656,412,2.656,413,4.148,450,1.949,463,2.707,491,4.428,509,2.755,510,2.755,511,2.755,512,2.755,513,2.755,514,2.755,516,3.683,517,2.571,533,2.755,534,2.755,581,2.137,594,2.566,606,2.755,619,4.269,726,4.174,924,2.45,927,3.071,1400,2.864,1404,3.047,1405,3.144,1407,1.665,1462,3.862,1466,4.122,1473,3.428,1504,4.615,1505,4.749,1889,5.27,1890,3.279,1892,5.382,1896,5.382,1898,5.019,1901,4.383,1902,4.383,1903,4.383,1904,4.383,1905,4.879,1906,4.879,1907,4.879,1908,4.879,1909,4.879]],["title/injectables/JwtAuthGuard.html",[344,1.029,737,3.214]],["body/injectables/JwtAuthGuard.html",[3,0.129,4,0.072,5,0.072,14,0.202,20,0.901,23,0.282,24,0.008,28,0.311,33,0.094,63,1.283,77,3.099,96,1.426,97,1.255,99,1.207,101,0.007,102,0.007,103,0.083,109,3.267,110,1.615,112,1.255,114,0.685,146,2.829,147,1.4,150,1.669,161,2.3,186,1.182,261,2.288,292,1.312,303,2.751,344,1.74,345,2.606,724,5.09,737,5.437,775,5.09,917,4.455,1910,8.615,1911,6.281,1912,7.666,1913,7.666,1914,7.666,1915,6.281,1916,8.986,1917,6.281,1918,7.666,1919,8.615,1920,6.281,1921,7.666,1922,6.281,1923,8.274,1924,7.666,1925,6.281,1926,5.563,1927,5.09,1928,6.281,1929,6.281,1930,6.281,1931,6.281]],["title/interfaces/JwtPayload.html",[0,0.249,901,2.101]],["body/interfaces/JwtPayload.html",[0,0.449,2,1.386,3,0.092,4,0.07,5,0.07,14,0.196,15,0.739,20,0.985,22,0.358,23,0.278,24,0.008,28,0.295,33,0.092,36,0.735,76,0.481,97,1.239,101,0.006,102,0.006,103,0.081,110,1.571,114,0.623,147,1.295,151,1.478,153,1.541,174,1.445,180,1.784,186,1.537,292,1.276,304,2.457,344,1.71,347,2.759,452,1.673,545,2.185,722,3.585,748,4.254,770,4.614,771,3.448,773,2.534,794,2.831,808,5.363,809,4.423,810,4.295,811,4.104,812,3.788,901,3.955,906,4.101,933,4.606,937,4.797,939,4.606,941,4.606,943,4.332,944,4.606,945,4.606,946,4.606,947,4.606,948,4.606]],["title/interfaces/JwtPayload-1.html",[0,0.207,452,1.034,901,1.75]],["body/interfaces/JwtPayload-1.html",[0,0.311,2,1.287,3,0.085,4,0.065,5,0.065,14,0.182,15,0.706,20,0.934,22,0.357,23,0.307,24,0.008,28,0.3,33,0.108,36,1.054,38,2.076,76,0.362,97,1.26,101,0.006,102,0.006,103,0.075,107,1.935,109,2.416,110,1.458,114,0.767,147,0.899,151,1.113,186,1.067,244,2.464,292,1.184,344,1.633,437,2.076,450,1.287,454,3.558,545,2.071,744,3.81,745,3.81,746,2.708,754,3.086,785,3.851,795,4.276,797,3.086,806,3.967,808,5.084,812,3.974,813,4.507,815,4.667,821,5.958,828,4.276,833,4.276,834,5.425,901,3.662,903,5.317,904,5.317,914,4.022,917,4.022,1046,3.334,1160,3.47,1170,4.276,1927,4.595,1932,5.022,1933,5.022,1934,5.022,1935,5.022,1936,4.595,1937,4.595,1938,5.022,1939,5.022,1940,5.022,1941,5.829,1942,4.595,1943,5.022,1944,5.022,1945,4.276,1946,5.022,1947,5.022,1948,4.022,1949,5.022,1950,5.022,1951,5.022,1952,5.022,1953,5.022,1954,5.022,1955,4.595,1956,4.595,1957,5.022,1958,5.022,1959,5.022,1960,5.022]],["title/interfaces/JwtPayload-2.html",[0,0.207,444,1.919,901,1.75]],["body/interfaces/JwtPayload-2.html",[0,0.461,2,1.322,3,0.087,4,0.066,5,0.066,8,0.619,14,0.187,15,0.718,17,3.234,22,0.363,23,0.3,24,0.008,28,0.21,33,0.132,36,1.078,37,0.924,76,0.372,87,1.498,90,1.051,91,1.238,101,0.006,102,0.006,103,0.077,109,2.483,111,3.565,114,0.749,118,2.483,124,3.565,125,3.565,147,1.37,149,1.482,180,1.702,393,2.869,446,3.983,545,2.131,754,3.171,761,3.171,762,3.42,776,3.42,777,3.565,778,3.729,779,3.171,780,3.729,790,4.895,794,3.708,797,4.567,806,3.494,812,2.701,813,3.063,815,3.171,896,4.683,897,3.915,899,3.889,900,4.478,901,3.392,902,4.007,903,5.369,904,5.369,905,2.624,906,3.983,907,4.133,908,3.915,909,4.133]],["title/classes/JwtService.html",[103,0.06,770,2.559]],["body/classes/JwtService.html",[0,0.291,3,0.055,4,0.041,5,0.041,8,0.813,13,0.771,14,0.117,15,0.521,20,0.834,22,0.35,23,0.286,24,0.008,28,0.264,31,1.16,33,0.055,36,0.639,38,1.332,63,1.188,76,0.555,79,1.718,80,2.19,87,0.935,91,0.615,94,0.843,97,1.292,99,1.589,101,0.005,102,0.005,103,0.048,105,1.018,110,1.613,112,1.274,114,0.634,116,2.19,119,3.541,147,1.39,148,3.019,149,1.503,150,1.854,151,1.69,153,1.658,155,1.55,174,1.956,180,2.561,186,1.581,225,2.673,244,2.466,251,1.364,261,1.585,270,4.901,271,3.189,287,1.791,304,2.696,347,3.027,397,2.444,398,4.634,399,2.328,437,1.332,452,0.996,473,2.054,489,1.398,496,1.062,545,0.879,572,2.226,647,4.496,744,4.214,745,2.444,746,1.737,747,4.005,748,2.054,770,2.998,785,4.416,794,3.758,803,5.202,806,4.268,809,2.135,810,1.912,813,4.346,815,3.992,831,2.58,846,2.58,849,6.96,885,4.005,901,3.758,934,4.703,1154,2.743,1216,2.791,1254,1.398,1414,1.04,1415,1.134,1441,3.297,1488,3.682,1702,2.328,1765,5.75,1879,2.743,1961,3.222,1962,5.555,1963,5.555,1964,5.555,1965,5.31,1966,5.31,1967,5.31,1968,5.31,1969,5.31,1970,3.637,1971,3.637,1972,4.703,1973,3.637,1974,4.703,1975,3.637,1976,4.703,1977,4.703,1978,3.637,1979,3.637,1980,3.637,1981,4.703,1982,3.637,1983,4.703,1984,3.637,1985,4.703,1986,4.703,1987,2.948,1988,5.555,1989,3.222,1990,5.555,1991,3.222,1992,4.703,1993,3.222,1994,3.222,1995,4.703,1996,3.222,1997,3.222,1998,3.222,1999,3.222,2000,3.222,2001,6.108,2002,6.784,2003,6.496,2004,3.117,2005,4.703,2006,4.703,2007,3.222,2008,5.555,2009,3.222,2010,3.222,2011,3.222,2012,3.222,2013,3.222,2014,3.222,2015,3.222,2016,4.304,2017,3.222,2018,3.222,2019,4.703,2020,3.222,2021,3.222,2022,3.222,2023,4.703,2024,3.222,2025,4.703,2026,3.222,2027,3.222,2028,3.222]],["title/injectables/JwtStrategy.html",[344,1.029,914,3.214]],["body/injectables/JwtStrategy.html",[0,0.327,3,0.09,4,0.068,5,0.068,14,0.191,20,0.881,22,0.331,23,0.203,24,0.008,28,0.305,33,0.111,36,0.893,38,2.183,63,0.925,76,0.38,97,1.283,101,0.006,102,0.006,103,0.079,107,2.035,109,3.164,110,2.079,112,1.126,114,0.493,147,0.945,150,1.298,151,1.586,186,1.122,244,1.86,261,2.216,276,2.35,292,1.246,344,1.685,345,2.475,437,2.183,450,1.353,454,3.641,545,1.793,744,4.007,745,4.007,746,2.848,754,3.246,785,3.922,794,2.764,795,4.498,797,3.246,806,4.04,808,3.649,812,3.441,813,3.903,815,4.041,821,6.097,828,4.498,833,4.498,834,5.6,901,3.922,903,3.816,904,3.816,914,5.266,917,4.23,1046,3.441,1053,4.989,1160,3.649,1170,4.498,1927,4.833,1932,5.282,1933,5.282,1934,5.282,1935,5.282,1936,4.833,1937,4.833,1938,6.576,1939,5.282,1940,5.282,1941,6.017,1942,4.833,1943,5.282,1944,5.282,1945,4.498,1946,5.282,1947,5.282,1948,4.23,1949,5.282,1950,5.282,1951,5.282,1952,6.576,1953,5.282,1954,5.282,1955,4.833,1956,4.833,1957,5.282,1958,5.282,1959,5.282,1960,5.282,2029,5.963,2030,5.963]],["title/classes/LoginDto.html",[103,0.06,928,3.418]],["body/classes/LoginDto.html",[3,0.097,4,0.073,5,0.073,8,0.971,14,0.207,15,0.763,20,0.702,22,0.357,23,0.265,24,0.008,28,0.232,33,0.126,76,0.411,101,0.007,102,0.007,103,0.111,105,1.802,107,2.198,112,1.181,147,1.473,267,2.088,296,1.656,545,2.229,785,2.985,806,3.075,812,2.985,905,2.901,922,4.857,923,5.22,924,2.596,927,3.008,928,5.87,929,7.412,930,4.857,931,3.781,932,5.521,2031,6.44,2032,6.44]],["title/interfaces/MagicAuthPayload.html",[0,0.249,776,2.66]],["body/interfaces/MagicAuthPayload.html",[0,0.204,2,0.842,3,0.056,4,0.042,5,0.042,13,0.602,14,0.119,15,0.528,20,0.587,22,0.332,23,0.252,24,0.008,28,0.267,33,0.056,37,1.103,38,1.972,40,1.326,54,2.497,56,1.391,64,0.759,76,0.344,87,0.954,89,2.068,91,1.379,94,1.613,96,1.678,97,0.962,99,1.42,101,0.005,102,0.007,103,0.049,107,1.266,110,0.954,114,0.638,115,1.183,137,1.266,141,1.266,147,1.355,149,1.12,151,1.057,161,2.548,163,1.391,174,1.274,186,1.609,208,3.427,256,1.581,271,1.886,274,1.886,290,2.019,291,3.788,292,0.775,293,2.094,294,3.581,296,0.954,304,1.756,306,3.041,341,2.497,347,1.972,437,2.548,442,2.177,446,2.932,452,1.016,454,2.426,473,3.041,489,2.676,545,2.088,595,4.262,596,2.374,602,2.492,609,2.492,647,3.162,652,2.27,722,2.177,748,2.094,752,2.797,753,3.285,754,2.932,755,6.165,756,5.641,758,3.162,759,4.771,761,2.932,762,2.177,767,3.918,768,5.249,769,2.631,770,3.581,771,3.041,772,4.063,773,1.539,774,4.059,775,3.006,776,3.723,777,5.165,778,5.216,779,4.437,780,5.216,781,3.285,782,3.285,783,3.285,784,7.22,785,4.21,786,3.285,787,3.285,788,4.063,789,2.631,790,4.259,791,3.285,792,3.285,793,3.285,794,2.497,795,6.001,796,3.285,797,4.654,798,3.285,799,3.285,800,6.165,801,4.063,802,1.95,803,4.499,804,3.285,805,4.063,806,3.324,807,4.771,808,2.27,809,3.162,810,3.659,811,3.619,812,3.226,813,3.659,814,6.165,815,2.932,816,4.771,817,3.285,818,6.547,819,2.797,820,2.652,821,5.249,822,3.285,823,3.285,824,5.618,825,3.285,826,3.285,827,5.618,828,4.063,829,3.285,830,5.641,831,4.937,832,3.285,833,4.784,834,5.249,835,5.14,836,3.285,837,5.618,838,5.618,839,5.618,840,4.784,841,5.618,842,4.771,843,5.618,844,6.25,845,4.784,846,3.821,847,3.285,848,3.006,849,2.797,850,3.285,851,3.285,852,5.618,853,2.797,854,2.932,855,3.285,856,3.285,857,3.285,858,3.285,859,3.285,860,2.739,861,3.285,862,1.624,863,3.285,864,2.492,865,3.285,866,3.285,867,3.285,868,3.285,869,3.285,870,3.285,871,3.285,872,3.006,873,3.285,874,3.285,875,3.285,876,3.006,877,3.006,878,3.285,879,3.285,880,3.285,881,3.285,882,3.285,883,3.285,884,3.285,885,4.063,886,3.285,887,3.285,888,3.285,889,3.285,890,4.771,891,2.374,892,3.285,893,3.006,894,3.285,895,2.797]],["title/interfaces/MagicAuthPayload-1.html",[0,0.207,452,1.034,776,2.216]],["body/interfaces/MagicAuthPayload-1.html",[0,0.459,2,1.307,3,0.086,4,0.066,5,0.066,8,0.612,14,0.185,15,0.713,17,3.217,22,0.363,23,0.304,24,0.008,28,0.208,33,0.132,36,0.958,37,1.261,76,0.367,87,1.481,90,1.435,91,1.229,101,0.006,102,0.006,103,0.076,109,2.455,111,3.525,114,0.76,118,2.455,124,3.525,125,3.525,147,1.366,149,1.017,180,1.683,393,4.115,446,3.135,545,2.125,754,3.135,761,3.954,762,4.265,776,4.265,777,5.113,778,5.347,779,4.548,780,5.347,790,5.113,794,3.689,797,4.548,806,2.751,812,2.67,813,3.028,815,3.135,896,4.649,897,3.871,899,3.873,900,4.446,901,2.67,902,3.367,903,3.686,904,3.686,905,2.594,906,3.954,907,4.086,908,3.871,909,4.086]],["title/classes/MagicService.html",[103,0.06,2033,3.673]],["body/classes/MagicService.html",[3,0.071,4,0.054,5,0.054,8,0.681,14,0.153,20,0.698,22,0.318,23,0.218,24,0.008,28,0.171,31,1.516,33,0.109,44,1.973,56,3.2,63,0.994,76,0.409,91,1.443,97,0.972,99,1.232,101,0.005,102,0.005,103,0.063,105,1.331,110,1.865,112,1.1,114,0.53,137,2.649,147,1.352,148,2.527,150,1.579,151,1.638,153,1.588,161,2.655,174,1.125,180,1.873,186,1.206,199,5.221,208,3.157,234,3.373,243,2.165,261,1.914,271,3.259,274,2.418,341,2.972,392,5.829,437,2.655,444,2.418,489,2.984,522,3.923,545,2.017,589,3.043,622,3.764,645,3.373,647,2.792,651,4.873,652,2.365,746,2.271,756,6.915,761,4.997,777,4.75,785,4.155,790,2.91,794,2.204,802,2.5,803,4.547,820,2.342,831,5.748,893,3.854,896,4.103,1053,5.733,1160,2.91,1218,4.835,1844,3.854,1861,6.29,1864,4.835,1878,4.212,1941,3.854,1955,3.854,1956,3.854,2016,3.854,2033,6.765,2034,4.212,2035,6.411,2036,7.252,2037,4.756,2038,6.411,2039,4.756,2040,6.875,2041,6.29,2042,7.762,2043,8.963,2044,4.756,2045,4.756,2046,7.252,2047,4.547,2048,4.756,2049,6.411,2050,3.854,2051,6.424,2052,4.212,2053,3.587,2054,6.411,2055,4.756,2056,7.762,2057,4.212,2058,4.756,2059,4.756,2060,4.756,2061,4.756,2062,4.756,2063,4.756,2064,3.854,2065,6.411,2066,4.756,2067,4.756,2068,4.756,2069,3.373,2070,3.587,2071,4.756,2072,4.756,2073,4.756,2074,4.756,2075,4.756,2076,4.756,2077,6.875,2078,4.756,2079,4.212]],["title/interfaces/NodeExecution.html",[0,0.249,1037,2.467]],["body/interfaces/NodeExecution.html",[0,0.475,2,1.231,3,0.105,4,0.062,5,0.062,8,0.576,11,1.808,12,2.385,13,0.968,14,0.174,15,0.686,19,2.137,22,0.367,23,0.3,24,0.008,33,0.13,37,0.859,41,1.766,42,2.034,54,2.513,55,3.24,56,2.622,63,0.841,76,0.552,82,2.442,87,1.798,90,1.64,91,0.917,92,2.374,101,0.006,102,0.006,107,1.85,114,0.578,115,2.761,137,1.85,138,2.374,146,3.148,149,0.957,153,1.109,159,5.175,163,2.901,170,2.192,216,2.034,245,3.318,250,2.513,280,1.62,307,2.221,318,1.985,427,3.061,444,2.757,590,3.804,594,2.132,623,2.137,652,1.768,656,2.31,862,2.374,891,3.469,1001,3.469,1021,4.697,1022,3.643,1023,5.487,1024,2.31,1025,3.846,1026,3.846,1027,4.697,1028,2.192,1029,3.643,1030,2.374,1031,2.31,1032,2.31,1033,4.697,1034,4.038,1035,4.038,1036,2.85,1037,4.21,1038,3.92,1039,4.038,1040,3.643,1041,2.67,1042,3.469,1043,4.958,1044,2.589,1045,3.469,1046,2.513,1047,2.67,1048,2.589,1049,3.643,1050,3.846,1051,3.846,1052,3.846]],["title/classes/NodeExecutionDto.html",[103,0.06,1436,2.467]],["body/classes/NodeExecutionDto.html",[3,0.102,4,0.04,5,0.04,8,0.996,13,0.917,14,0.113,15,0.509,20,0.384,22,0.351,23,0.294,24,0.008,28,0.187,33,0.123,34,2.216,36,0.967,37,0.559,39,0.927,41,1.935,62,2.717,63,0.547,64,1.83,66,2.929,76,0.552,89,1.151,90,1.367,91,1.431,99,1.184,101,0.004,102,0.004,103,0.11,105,0.987,110,0.907,112,1.265,114,0.69,115,2.563,141,2.472,163,2.717,166,1.323,204,1.151,243,1.053,267,2.201,280,1.901,296,0.907,307,2.155,380,2.717,450,2.04,452,0.967,479,1.685,496,1.517,517,2.679,556,1.636,594,2.754,611,2.679,621,1.589,623,1.391,652,2.675,656,1.504,767,1.738,802,1.855,862,2.274,924,2.736,927,3.062,955,1.636,1028,1.427,1030,3.52,1031,3.087,1032,3.425,1034,2.943,1035,2.943,1038,3.151,1039,3.246,1041,1.738,1047,2.557,1048,2.48,1249,4.37,1254,1.356,1394,1.921,1395,2.071,1396,2.071,1399,3.456,1404,2.646,1405,2.53,1406,3.618,1407,1.204,1408,1.921,1409,3.838,1410,2.369,1411,2.73,1412,2.492,1413,1.992,1414,1.009,1415,1.1,1416,2.071,1417,2.071,1418,4.719,1419,4.599,1420,2.071,1421,3.838,1422,2.071,1423,2.932,1424,3.246,1425,2.071,1426,2.071,1427,3.943,1428,3.838,1429,3.838,1430,1.356,1431,1.589,1432,2.071,1433,2.071,1434,2.071,1435,2.071,1436,2.827,1437,3.133,1438,1.921,1439,1.992,1440,1.992,1441,1.855,1442,1.992,1443,2.071,1444,1.992,1445,1.685,2080,5.193,2081,3.528,2082,3.528,2083,3.528,2084,3.528,2085,3.528,2086,3.528,2087,3.528,2088,3.528]],["title/injectables/NodeExecutionsService.html",[344,1.029,1722,3.418]],["body/injectables/NodeExecutionsService.html",[3,0.081,4,0.061,5,0.061,14,0.172,20,0.839,22,0.329,23,0.262,24,0.008,28,0.278,33,0.081,39,1.41,41,1.608,59,2.418,63,1.194,76,0.519,90,1.468,91,1.461,97,1.31,99,1.335,101,0.006,102,0.006,103,0.071,110,1.786,112,1.168,114,0.637,150,1.513,151,1.695,153,1.666,174,1.643,181,4.445,186,1.307,246,3.608,261,2.074,292,1.122,304,1.751,307,1.824,344,1.577,345,2.228,347,1.966,437,2.543,489,2.67,579,3.677,594,2.484,652,2.511,801,4.05,952,5.239,1024,2.96,1030,3.042,1031,2.96,1032,2.96,1034,3.317,1035,3.317,1037,4.191,1038,3.22,1039,3.317,1042,3.436,1061,3.436,1069,4.05,1229,4.445,1254,3.424,1427,3.781,1428,3.922,1429,3.922,1430,2.67,1436,4.191,1531,4.05,1532,4.701,1722,5.239,1761,4.352,2089,7.211,2090,5.37,2091,6.947,2092,5.37,2093,6.947,2094,5.37,2095,5.37,2096,4.756,2097,4.756,2098,4.756,2099,5.37,2100,4.756,2101,5.37,2102,6.947,2103,5.37,2104,5.37,2105,5.37,2106,5.37,2107,5.37,2108,5.37,2109,5.37,2110,6.947,2111,5.37,2112,4.352,2113,4.05,2114,4.756,2115,4.756,2116,4.756,2117,5.37,2118,5.37,2119,5.37,2120,5.37,2121,5.37,2122,5.37,2123,5.37,2124,5.37,2125,5.37,2126,4.756]],["title/classes/NodeLogDto.html",[103,0.06,1438,2.467]],["body/classes/NodeLogDto.html",[3,0.116,4,0.042,5,0.042,8,1,13,0.89,14,0.12,15,0.53,20,0.406,22,0.351,23,0.283,24,0.008,28,0.195,33,0.125,34,2.275,36,0.982,37,0.591,39,0.979,41,1.912,62,2.617,63,0.578,64,1.801,66,2.821,76,0.552,89,1.216,90,1.258,91,1.407,99,1.222,101,0.005,102,0.005,103,0.112,105,1.043,110,0.959,112,1.172,114,0.447,115,2.694,141,2.528,163,3.169,166,1.398,204,1.763,243,1.113,267,1.987,280,1.847,296,0.959,307,2.029,380,2.778,450,2.012,452,1.021,479,2.582,496,1.579,517,2.507,556,1.728,594,2.64,611,2.75,621,1.679,623,1.469,652,2.599,656,1.589,767,1.836,802,1.96,862,3.244,924,2.471,927,3.074,955,1.728,1028,1.507,1030,3.383,1031,2.973,1032,3.292,1034,1.78,1035,1.78,1038,2.506,1039,2.582,1041,1.836,1047,3.132,1048,3.038,1249,4.396,1254,1.433,1394,2.029,1395,2.189,1396,2.189,1399,3.234,1404,2.698,1405,2.587,1406,3.734,1407,1.272,1408,2.029,1409,3.94,1410,2.445,1411,2.842,1412,2.572,1413,2.105,1414,1.066,1415,1.163,1416,2.189,1417,2.189,1418,4.792,1419,4.678,1420,2.189,1421,3.94,1422,2.189,1423,3.053,1424,3.332,1425,2.189,1426,2.189,1427,3.798,1428,3.053,1429,3.053,1430,1.433,1431,1.679,1432,2.189,1433,2.189,1434,2.189,1435,2.189,1436,2.029,1437,3.234,1438,2.943,1439,3.053,1440,3.592,1441,3.344,1442,2.105,1443,2.189,1444,2.105,1445,1.78,2127,5.407,2128,3.728,2129,3.728,2130,3.728,2131,3.728]],["title/injectables/NodeLogsService.html",[344,1.029,1723,3.418]],["body/injectables/NodeLogsService.html",[3,0.093,4,0.071,5,0.071,14,0.2,20,0.831,22,0.314,23,0.26,24,0.008,28,0.297,33,0.093,39,1.635,41,1.301,59,2.804,63,1.182,76,0.397,91,1.29,92,3.339,97,1.25,99,1.196,101,0.007,102,0.007,103,0.082,110,1.961,112,1.157,114,0.631,115,1.986,150,1.356,151,1.617,153,1.56,163,2.336,174,1.473,186,1.172,246,4.184,261,2.276,292,1.301,304,2.03,344,1.731,345,2.584,347,2.28,437,2.28,489,2.394,579,3.641,594,2.515,652,2.03,801,4.696,862,2.727,1061,3.985,1229,3.985,1438,4.15,1440,3.516,1441,3.273,1531,4.696,1532,4.881,1681,5.124,1723,5.751,1761,5.047,2089,7.3,2096,5.515,2097,5.515,2098,5.515,2100,5.515,2112,5.047,2113,4.696,2114,5.515,2115,5.515,2116,5.515,2132,6.227,2133,7.625,2134,6.227,2135,7.625,2136,6.227,2137,6.227,2138,6.227,2139,6.227,2140,6.227,2141,6.227,2142,6.227,2143,6.227,2144,6.227]],["title/interfaces/NotificationCreateInput.html",[0,0.249,2145,3.214]],["body/interfaces/NotificationCreateInput.html",[0,0.369,2,1.159,3,0.052,4,0.039,5,0.039,10,1.232,11,1.15,13,1.017,14,0.111,15,0.501,22,0.356,23,0.302,24,0.008,28,0.219,31,1.099,33,0.108,36,0.809,37,1.315,39,0.905,52,2.012,63,0.535,76,0.572,79,1.398,87,1.728,91,0.864,94,1.663,96,1.705,97,1.345,101,0.004,102,0.004,103,0.046,109,1.469,114,0.556,115,2.683,116,1.204,118,1.469,132,2.683,133,2.683,134,1.598,135,1.697,137,1.176,147,1.443,148,3.547,149,1.621,150,1.855,151,1.671,153,1.722,155,1.469,171,2.206,174,1.929,177,2.683,186,1.583,204,1.982,212,3.417,215,1.869,216,2.28,225,2.175,226,2.997,227,2.109,247,1.697,248,2.662,249,2.023,251,1.293,253,3.091,274,1.753,437,1.262,450,1.705,469,1.697,489,1.325,496,1.491,545,1.233,546,3.771,547,3.969,548,4.231,565,2.778,575,4.636,592,1.946,613,2.023,622,2.023,810,1.812,820,1.697,860,1.753,899,3.115,1093,5.15,1225,2.438,1226,2.366,1410,2.337,1414,1.738,1415,1.075,1431,2.738,1468,2.882,1470,2.778,1474,1.946,1575,1.946,1615,2.206,1666,2.023,1672,4.112,1699,1.697,2145,3.621,2146,2.6,2147,2.6,2148,2.109,2149,2.109,2150,2.109,2151,3.267,2152,2.6,2153,2.316,2154,2.6,2155,2.023,2156,2.445,2157,2.445,2158,3.85,2159,3.85,2160,3.85,2161,3.43,2162,3.43,2163,2.445,2164,2.6,2165,3.43,2166,3.85,2167,3.85,2168,3.85,2169,2.316,2170,2.6,2171,4.767,2172,2.109,2173,2.6,2174,2.6,2175,3.621,2176,2.6,2177,2.6,2178,2.445,2179,2.6,2180,4.585,2181,2.6,2182,2.6,2183,2.6,2184,2.6,2185,3.89,2186,2.6,2187,2.6,2188,2.6,2189,2.6,2190,2.6,2191,2.6,2192,4.585,2193,2.6,2194,5.667,2195,2.6,2196,2.6,2197,2.6,2198,2.6,2199,2.6,2200,2.206,2201,2.6,2202,3.85,2203,2.445,2204,2.6,2205,2.6,2206,3.72,2207,3.72,2208,2.6,2209,2.6,2210,2.6,2211,2.6,2212,2.6,2213,2.6,2214,2.6]],["title/interfaces/NotificationPreferenceCreateInput.html",[0,0.249,2157,3.214]],["body/interfaces/NotificationPreferenceCreateInput.html",[0,0.368,2,1.154,3,0.051,4,0.039,5,0.039,10,1.226,11,1.143,13,1.005,14,0.11,15,0.499,22,0.354,23,0.296,24,0.008,28,0.219,31,1.093,33,0.107,36,0.807,37,1.375,39,0.9,52,2.004,63,0.532,76,0.571,79,1.393,87,1.724,91,0.86,94,1.659,96,1.702,97,1.344,101,0.004,102,0.004,103,0.045,109,1.461,114,0.686,115,2.542,116,1.197,118,1.461,132,2.672,133,2.672,134,1.589,135,1.688,137,1.17,147,1.442,148,3.545,149,1.62,150,1.853,151,1.669,153,1.72,155,1.461,171,2.194,174,1.927,177,2.672,186,1.581,204,1.976,212,3.408,215,1.861,216,2.273,225,2.167,226,2.985,227,2.098,247,1.688,248,2.654,249,2.013,251,1.286,253,3.081,274,1.743,437,1.255,450,1.702,469,1.688,489,1.318,496,1.485,545,1.228,546,3.763,547,3.966,548,4.229,565,2.767,575,4.432,592,1.936,613,2.013,622,2.013,810,1.802,820,1.688,860,1.743,899,3.107,1093,4.878,1225,2.428,1226,2.357,1410,2.329,1414,1.732,1415,1.069,1431,2.729,1468,2.871,1470,2.767,1474,1.936,1575,1.936,1615,2.194,1666,2.013,1672,4.102,1699,1.688,2145,2.432,2146,2.586,2147,2.586,2148,2.098,2149,2.098,2150,2.098,2151,3.253,2152,2.586,2153,2.304,2154,2.586,2155,2.013,2156,2.432,2157,3.606,2158,5.399,2159,5.399,2160,5.399,2161,4.81,2162,4.81,2163,2.432,2164,2.586,2165,3.416,2166,3.834,2167,3.834,2168,3.834,2169,2.304,2170,2.586,2171,4.754,2172,2.098,2173,2.586,2174,2.586,2175,3.606,2176,2.586,2177,2.586,2178,2.432,2179,2.586,2180,4.57,2181,2.586,2182,2.586,2183,2.586,2184,2.586,2185,3.878,2186,2.586,2187,2.586,2188,2.586,2189,2.586,2190,2.586,2191,2.586,2192,4.57,2193,2.586,2194,5.655,2195,2.586,2196,2.586,2197,2.586,2198,2.586,2199,2.586,2200,2.194,2201,2.586,2202,3.834,2203,2.432,2204,2.586,2205,2.586,2206,3.708,2207,3.708,2208,2.586,2209,2.586,2210,2.586,2211,2.586,2212,2.586,2213,2.586,2214,2.586]],["title/interfaces/NotificationPreferenceUpdateInput.html",[0,0.249,2163,3.214]],["body/interfaces/NotificationPreferenceUpdateInput.html",[0,0.369,2,1.158,3,0.052,4,0.039,5,0.039,10,1.232,11,1.149,13,1.006,14,0.111,15,0.5,22,0.353,23,0.293,24,0.008,28,0.219,31,1.098,33,0.108,36,0.809,37,1.376,39,0.905,52,2.011,63,0.534,76,0.572,79,1.398,87,1.728,91,0.863,94,1.662,96,1.705,97,1.345,101,0.004,102,0.004,103,0.046,109,1.468,114,0.686,115,2.545,116,1.203,118,1.468,132,2.682,133,2.682,134,1.597,135,1.696,137,1.175,147,1.442,148,3.547,149,1.607,150,1.854,151,1.671,153,1.721,155,1.468,171,2.204,174,1.929,177,2.682,186,1.583,204,1.981,212,3.416,215,1.868,216,2.279,225,2.174,226,2.995,227,2.108,247,1.696,248,2.661,249,2.022,251,1.292,253,3.089,274,1.751,437,1.261,450,1.705,469,1.696,489,1.324,496,1.49,545,1.232,546,3.77,547,3.969,548,4.231,565,2.777,575,4.438,592,1.945,613,2.022,622,2.022,810,1.811,820,1.696,860,1.751,899,3.114,1093,4.885,1225,2.436,1226,2.365,1410,2.336,1414,1.737,1415,1.074,1431,2.737,1468,2.881,1470,2.777,1474,1.945,1575,1.945,1615,2.204,1666,2.022,1672,4.111,1699,1.696,2145,2.443,2146,2.598,2147,2.598,2148,2.108,2149,2.108,2150,2.108,2151,3.265,2152,2.598,2153,2.315,2154,2.598,2155,2.022,2156,2.443,2157,2.443,2158,5.41,2159,5.41,2160,5.41,2161,4.82,2162,4.82,2163,3.619,2164,2.598,2165,3.428,2166,3.848,2167,3.848,2168,3.848,2169,2.315,2170,2.598,2171,4.765,2172,2.108,2173,2.598,2174,2.598,2175,3.619,2176,2.598,2177,2.598,2178,2.443,2179,2.598,2180,4.583,2181,2.598,2182,2.598,2183,2.598,2184,2.598,2185,3.889,2186,2.598,2187,2.598,2188,2.598,2189,2.598,2190,2.598,2191,2.598,2192,4.583,2193,2.598,2194,5.665,2195,2.598,2196,2.598,2197,2.598,2198,2.598,2199,2.598,2200,2.204,2201,2.598,2202,3.848,2203,2.443,2204,2.598,2205,2.598,2206,3.718,2207,3.718,2208,2.598,2209,2.598,2210,2.598,2211,2.598,2212,2.598,2213,2.598,2214,2.598]],["title/interfaces/NotificationUpdateInput.html",[0,0.249,2156,3.214]],["body/interfaces/NotificationUpdateInput.html",[0,0.369,2,1.159,3,0.052,4,0.039,5,0.039,10,1.233,11,1.15,13,1.017,14,0.111,15,0.501,22,0.355,23,0.3,24,0.008,28,0.219,31,1.1,33,0.108,36,0.809,37,1.315,39,0.906,52,2.013,63,0.535,76,0.572,79,1.399,87,1.729,91,0.864,94,1.663,96,1.706,97,1.345,101,0.004,102,0.004,103,0.046,109,1.47,114,0.687,115,2.684,116,1.205,118,1.47,132,2.685,133,2.685,134,1.599,135,1.699,137,1.177,147,1.443,148,3.547,149,1.607,150,1.855,151,1.672,153,1.722,155,1.47,171,2.207,174,1.93,177,2.685,186,1.584,204,1.983,212,3.418,215,1.87,216,2.281,225,2.176,226,2.998,227,2.111,247,1.699,248,2.663,249,2.025,251,1.294,253,3.092,274,1.754,437,1.263,450,1.706,469,1.699,489,1.326,496,1.492,545,1.234,546,3.772,547,3.969,548,4.232,565,2.78,575,4.637,592,1.948,613,2.025,622,2.025,810,1.813,820,1.699,860,1.754,899,3.116,1093,5.151,1225,2.439,1226,2.367,1410,2.338,1414,1.739,1415,1.076,1431,2.739,1468,2.884,1470,2.78,1474,1.948,1575,1.948,1615,2.207,1666,2.025,1672,4.114,1699,1.699,2145,2.447,2146,2.601,2147,2.601,2148,2.111,2149,2.111,2150,2.111,2151,3.268,2152,2.601,2153,2.318,2154,2.601,2155,2.025,2156,3.623,2157,2.447,2158,3.852,2159,3.852,2160,3.852,2161,3.432,2162,3.432,2163,2.447,2164,2.601,2165,3.432,2166,3.852,2167,3.852,2168,3.852,2169,2.318,2170,2.601,2171,4.769,2172,2.111,2173,2.601,2174,2.601,2175,3.623,2176,2.601,2177,2.601,2178,2.447,2179,2.601,2180,4.587,2181,2.601,2182,2.601,2183,2.601,2184,2.601,2185,3.892,2186,2.601,2187,2.601,2188,2.601,2189,2.601,2190,2.601,2191,2.601,2192,4.587,2193,2.601,2194,5.668,2195,2.601,2196,2.601,2197,2.601,2198,2.601,2199,2.601,2200,2.207,2201,2.601,2202,3.852,2203,2.447,2204,2.601,2205,2.601,2206,3.721,2207,3.721,2208,2.601,2209,2.601,2210,2.601,2211,2.601,2212,2.601,2213,2.601,2214,2.601]],["title/controllers/NotificationsController.html",[256,1.931,2215,3.673]],["body/controllers/NotificationsController.html",[3,0.073,4,0.055,5,0.055,13,0.875,14,0.156,20,0.889,22,0.349,23,0.317,24,0.008,28,0.264,33,0.073,63,1.265,76,0.521,92,2.847,97,1.238,101,0.006,102,0.006,103,0.064,112,1.238,114,0.675,115,1.548,147,1.36,149,1.483,150,1.777,151,1.806,153,1.33,186,1.614,251,1.821,253,3.726,256,2.069,258,2.069,260,2.851,261,1.941,266,3.571,267,2.189,276,3.085,290,2.643,291,3.539,292,1.014,293,2.742,294,4.742,295,2.971,296,1.249,303,2.127,304,1.583,306,4.608,452,1.33,454,3.301,546,3.417,547,3.675,548,3.893,575,3.989,758,5.236,955,3.014,995,5.483,996,6.155,1093,2.971,1412,3.165,1414,2.238,1415,2.286,2053,4.903,2171,4.612,2175,4.612,2215,5.269,2216,4.856,2217,5.758,2218,6.492,2219,5.758,2220,5.758,2221,6.492,2222,4.856,2223,4.856,2224,4.856,2225,4.856,2226,3.935,2227,4.856,2228,4.856,2229,4.856,2230,4.856,2231,4.856,2232,4.856,2233,4.856,2234,4.856,2235,4.856,2236,4.856,2237,4.856,2238,4.856,2239,5.199,2240,4.301,2241,4.856,2242,4.856,2243,4.301,2244,3.935,2245,6.501,2246,4.856,2247,6.501,2248,4.301,2249,4.856,2250,4.856,2251,4.856,2252,4.856,2253,4.856,2254,4.856,2255,4.856,2256,4.856,2257,4.856,2258,4.856,2259,4.856,2260,4.856]],["title/modules/NotificationsModule.html",[327,1.62,714,3.214]],["body/modules/NotificationsModule.html",[3,0.102,4,0.078,5,0.078,24,0.008,28,0.309,33,0.102,101,0.007,102,0.007,103,0.09,258,3.433,292,1.425,327,3.065,329,3.257,330,3.162,331,3.468,332,3.468,333,3.468,334,3.86,335,4.358,339,4.095,340,3.468,341,3.162,714,6.561,2215,6.947,2239,6.727,2240,6.042,2261,6.042,2262,6.042,2263,6.042,2264,6.822,2265,6.822]],["title/injectables/NotificationsService.html",[344,1.029,2239,3.214]],["body/injectables/NotificationsService.html",[3,0.077,4,0.059,5,0.059,13,0.998,14,0.165,20,0.948,22,0.361,23,0.314,24,0.008,28,0.244,33,0.077,36,0.964,63,1.349,89,1.678,92,2.254,94,1.193,96,1.168,97,1.295,101,0.006,102,0.006,103,0.068,110,1.738,112,1.32,114,0.72,115,2.405,141,1.756,149,1.591,150,1.859,151,1.836,153,1.639,174,1.895,186,1.419,253,4.072,261,2.017,266,3.157,276,3.157,292,1.075,304,1.678,344,1.534,345,2.136,347,1.884,380,1.93,452,1.851,546,2.705,548,3.856,565,2.801,773,2.136,1014,4.558,1093,4.616,1412,3.238,1414,2.29,1415,2.107,1615,5.463,2053,3.882,2178,4.793,2217,5.985,2218,5.985,2219,5.985,2220,5.985,2221,6.681,2239,4.793,2266,5.147,2267,7.544,2268,5.147,2269,5.147,2270,5.147,2271,5.147,2272,6.757,2273,5.147,2274,6.757,2275,5.147,2276,6.757,2277,5.147,2278,5.147,2279,5.147,2280,5.147,2281,5.147,2282,5.147,2283,5.147,2284,5.147,2285,5.147,2286,5.147,2287,6.757,2288,6.757,2289,6.757,2290,5.147,2291,5.147,2292,5.147]],["title/classes/PaginatedExecutionsResponseDto.html",[103,0.06,1423,2.559]],["body/classes/PaginatedExecutionsResponseDto.html",[3,0.107,4,0.044,5,0.044,8,1.003,13,0.939,14,0.125,15,0.547,20,0.424,22,0.349,23,0.281,24,0.008,28,0.201,33,0.126,34,2.124,36,0.994,37,0.616,39,1.464,41,1.915,62,2.668,63,0.603,64,1.814,66,2.876,76,0.536,89,1.268,90,1.283,91,1.397,99,1.367,101,0.005,102,0.005,103,0.113,105,1.088,110,1,112,0.988,114,0.461,115,2.573,141,1.902,163,2.825,166,1.458,204,1.268,243,1.664,267,1.495,280,1.913,296,1,307,2.058,380,2.09,450,2.025,452,1.065,479,1.857,496,1.628,517,2.567,556,1.802,594,2.634,611,2.567,621,1.751,623,1.532,652,2.632,656,1.657,767,1.915,802,2.044,862,2.441,924,1.859,927,3.082,955,1.802,1028,1.572,1030,3.432,1031,3.032,1032,3.339,1034,1.857,1035,1.857,1038,2.583,1039,2.661,1041,1.915,1047,2.744,1048,2.661,1249,4.414,1254,1.495,1394,2.116,1395,2.283,1396,2.283,1399,3.312,1404,2.737,1405,2.63,1406,3.824,1407,1.327,1408,2.116,1409,4.557,1410,2.504,1411,2.929,1412,2.633,1413,2.195,1414,1.112,1415,1.213,1416,2.283,1417,2.283,1418,4.846,1419,4.738,1420,2.283,1421,4.252,1422,2.283,1423,3.678,1424,3.11,1425,2.283,1426,2.283,1427,3.872,1428,3.147,1429,3.147,1430,2.142,1431,2.51,1432,3.824,1433,2.283,1434,2.283,1435,2.283,1436,2.116,1437,2.833,1438,2.116,1439,2.195,1440,2.195,1441,2.044,1442,2.195,1443,2.283,1444,2.195,1445,1.857,2293,5.573,2294,3.888]],["title/interfaces/PaginatedResult.html",[0,0.249,2295,3.673]],["body/interfaces/PaginatedResult.html",[0,0.361,2,1.119,3,0.074,4,0.056,5,0.056,8,0.524,13,0.977,14,0.158,15,0.644,22,0.312,23,0.268,24,0.008,33,0.123,36,1.066,37,0.782,44,3.065,53,2.656,63,1.308,76,0.419,79,1.8,87,2.214,94,1.143,97,1.12,101,0.006,102,0.006,116,2.294,138,3.449,141,2.242,148,3.325,150,1.608,183,4.287,186,1.697,243,2.449,249,4.624,251,3.322,266,2.589,452,2.158,496,1.441,616,3.156,746,2.355,1225,4.028,1226,3.651,1254,1.896,1410,3.153,1411,2.592,1412,3.481,1414,2.501,1415,1.538,1431,4.028,1575,2.785,1672,5.019,1693,4.414,1699,3.637,2064,3.997,2151,5.04,2153,3.314,2165,4.963,2169,3.314,2295,5.986,2296,3.997,2297,6.976,2298,7.472,2299,4.368,2300,6.542,2301,5.818,2302,5.986,2303,5.986,2304,5.986,2305,4.368,2306,5.818,2307,5.818,2308,5.818,2309,4.368,2310,5.818,2311,4.368,2312,5.818,2313,5.818,2314,4.368,2315,4.368,2316,4.368,2317,4.368,2318,4.368,2319,4.368,2320,4.368]],["title/classes/PaginatedWorkflowsResponseDto.html",[103,0.06,1508,2.9]],["body/classes/PaginatedWorkflowsResponseDto.html",[3,0.084,4,0.063,5,0.063,8,1.006,13,0.875,14,0.179,15,0.697,20,0.95,22,0.342,23,0.297,24,0.008,28,0.282,33,0.124,36,1.049,64,1.744,67,3.351,76,0.453,90,1.573,101,0.006,102,0.006,103,0.115,105,1.557,112,1.252,147,0.882,149,0.983,204,1.814,267,2.213,280,2.16,296,1.431,318,3.192,320,3.618,450,1.935,581,2.437,611,2.193,927,3.098,1254,2.139,1404,3.045,1405,2.977,1407,1.899,1410,3.01,1412,3.166,1414,2.239,1424,2.657,1496,3.561,1497,4.197,1504,4.814,1505,3.142,1506,3.561,1507,5.28,1508,4.548,2321,5.564,2322,5.564,2323,5.564,2324,5.564,2325,5.564]],["title/classes/PaginationMetaDto.html",[103,0.06,1409,2.559]],["body/classes/PaginationMetaDto.html",[3,0.106,4,0.043,5,0.043,8,1.001,13,0.895,14,0.122,15,0.537,20,0.414,22,0.348,23,0.279,24,0.008,28,0.198,33,0.125,34,2.096,36,1.076,37,0.602,39,0.997,41,1.909,62,2.64,63,0.589,64,1.807,66,2.845,76,0.533,89,1.238,90,1.269,91,1.388,99,1.235,101,0.005,102,0.005,103,0.112,105,1.063,110,0.977,112,1.132,114,0.453,115,2.555,141,2.402,163,2.799,166,1.425,204,1.238,243,1.134,267,1.888,280,1.857,296,0.977,307,2.042,380,2.64,450,2.018,452,1.501,479,1.814,496,2.056,517,2.774,556,1.76,594,2.621,611,2.534,621,1.71,623,1.497,652,2.613,656,1.618,767,1.87,802,1.996,862,2.4,924,2.347,927,3.078,955,1.76,1028,1.536,1030,3.405,1031,2.999,1032,3.313,1034,1.814,1035,1.814,1038,2.54,1039,2.617,1041,1.87,1047,2.698,1048,2.617,1249,4.404,1394,2.067,1395,2.23,1396,2.23,1399,3.268,1404,2.715,1405,2.606,1406,3.774,1407,1.296,1408,2.067,1409,4.213,1410,3.081,1411,3.699,1412,3.24,1413,3.094,1414,1.838,1415,1.709,1416,3.217,1417,3.774,1418,4.816,1419,4.705,1420,2.23,1421,3.974,1422,2.23,1423,3.094,1424,3.07,1425,2.23,1426,2.23,1427,3.83,1428,3.094,1429,3.094,1430,1.46,1431,1.71,1432,2.23,1433,2.23,1434,2.23,1435,2.23,1436,2.067,1437,2.786,1438,2.067,1439,2.144,1440,2.144,1441,1.996,1442,2.144,1443,2.23,1444,2.144,1445,1.814,2326,5.48,2327,3.798,2328,3.798,2329,3.798]],["title/interfaces/PaginationParams.html",[0,0.249,2151,2.9]],["body/interfaces/PaginationParams.html",[0,0.353,2,1.084,3,0.072,4,0.054,5,0.054,8,0.507,13,0.907,14,0.153,15,0.631,22,0.335,23,0.276,24,0.008,33,0.122,36,1.094,37,0.757,44,3.017,53,2.6,63,1.325,76,0.41,79,1.762,87,2.15,94,1.107,97,1.103,101,0.006,102,0.006,114,0.736,116,2.246,138,3.406,141,2.195,148,3.295,150,1.583,183,4.233,186,1.688,243,1.92,249,4.565,251,3.3,452,2.13,496,1.396,616,3.058,746,2.282,1225,4.202,1226,3.875,1254,1.837,1410,3.12,1411,2.512,1412,3.595,1414,2.565,1415,1.49,1431,4.005,1575,2.698,1672,4.966,1693,5.225,1699,3.58,2064,3.872,2151,5.194,2153,3.211,2165,4.885,2169,3.211,2295,5.212,2296,3.872,2297,5.696,2298,7.793,2299,6.888,2300,6.439,2301,5.696,2302,5.892,2303,5.892,2304,5.892,2305,4.232,2306,5.696,2307,5.696,2308,5.696,2309,4.232,2310,5.696,2311,4.232,2312,5.696,2313,5.696,2314,4.232,2315,4.232,2316,4.232,2317,4.232,2318,4.232,2319,4.232,2320,4.232]],["title/interfaces/PolicyContext.html",[0,0.249,120,2.773]],["body/interfaces/PolicyContext.html",[0,0.274,2,0.758,3,0.05,4,0.038,5,0.038,8,0.355,13,0.373,14,0.107,15,0.585,20,0.364,22,0.338,23,0.253,24,0.008,28,0.18,33,0.09,37,1.049,40,1.194,41,1.768,53,2.412,64,0.683,76,0.559,77,2.412,78,1.595,79,0.915,87,1.979,91,0.565,94,0.774,96,2.003,97,1.365,99,0.642,101,0.004,102,0.004,103,0.044,107,2.992,110,0.859,114,0.615,115,2.523,116,2.473,118,1.423,119,1.886,120,4.841,121,2.138,122,2.044,135,2.456,137,1.14,142,2.244,145,5.431,146,4.069,147,1.437,148,3.478,149,1.567,150,1.761,151,1.587,153,1.618,155,3.68,163,1.87,164,3.191,165,2.244,166,2.238,167,2.244,174,1.913,186,1.549,195,4.753,199,4.841,201,5.316,202,5.348,203,2.244,204,1.089,207,3.351,221,3.253,222,4.991,232,3.051,241,2.244,242,2.244,243,0.997,244,1.042,248,1.463,251,1.253,280,1.874,347,1.223,450,1.747,517,1.965,548,3.443,594,2.019,608,2.044,820,1.645,860,1.698,899,2.311,905,2.246,1024,2.543,1028,2.412,1037,2.714,1044,1.595,1155,2.369,1219,3.651,1276,2.138,1437,3.776,1445,2.381,1457,3.082,1681,4.009,1702,2.138,1772,4.194,2004,1.961,2069,3.537,2200,2.138,2330,2.707,2331,4.041,2332,6.237,2333,6.019,2334,2.707,2335,7.263,2336,2.707,2337,2.707,2338,2.707,2339,6.019,2340,2.519,2341,2.707,2342,2.707,2343,2.707,2344,2.707,2345,5.363,2346,2.707,2347,2.707,2348,2.707,2349,4.836,2350,2.707,2351,2.707,2352,3.651,2353,2.707,2354,2.244,2355,2.707,2356,2.707,2357,2.707,2358,2.707,2359,2.707,2360,2.707,2361,4.041,2362,2.707,2363,2.707,2364,2.707,2365,2.707,2366,2.707,2367,2.707,2368,2.519,2369,2.369]],["title/interfaces/PolicyResult.html",[0,0.249,121,2.9]],["body/interfaces/PolicyResult.html",[0,0.275,2,0.762,3,0.05,4,0.038,5,0.038,8,0.356,13,0.375,14,0.108,15,0.587,20,0.366,22,0.334,23,0.242,24,0.008,28,0.18,33,0.09,37,1.051,40,1.2,41,1.769,53,2.419,64,0.686,76,0.56,77,2.419,78,1.602,79,0.919,87,2.037,91,0.847,94,0.778,96,2.004,97,1.366,99,0.645,101,0.004,102,0.004,103,0.044,107,3.013,110,0.863,114,0.587,115,2.701,116,2.478,118,1.43,119,1.895,120,4.717,121,3.202,122,2.053,135,2.464,137,1.145,142,2.255,145,5.434,146,4.056,147,1.433,148,3.48,149,1.538,150,1.763,151,1.589,153,1.621,155,3.683,163,1.877,164,3.202,165,2.255,166,2.244,167,2.255,174,1.916,186,1.551,195,4.761,199,4.848,201,5.323,202,5.353,203,2.255,204,1.094,207,3.362,221,3.258,222,4.999,232,2.053,241,2.255,242,2.255,243,1.002,244,1.047,248,1.47,251,1.259,280,1.876,347,1.229,450,1.749,517,1.323,548,3.449,594,2.024,608,2.053,820,1.652,860,1.706,899,2.319,905,1.511,1024,2.55,1028,2.419,1037,2.724,1044,1.602,1155,2.38,1219,3.661,1276,2.147,1437,3.783,1445,2.857,1457,3.087,1681,4.021,1702,2.147,1772,4.201,2004,1.97,2069,3.549,2200,2.147,2330,2.72,2331,2.72,2332,5.375,2333,4.849,2334,4.055,2335,7.376,2336,2.72,2337,2.72,2338,2.72,2339,6.03,2340,2.531,2341,2.72,2342,2.72,2343,2.72,2344,2.72,2345,5.375,2346,2.72,2347,2.72,2348,2.72,2349,4.849,2350,2.72,2351,2.72,2352,3.661,2353,2.72,2354,2.255,2355,2.72,2356,2.72,2357,2.72,2358,2.72,2359,2.72,2360,2.72,2361,4.055,2362,2.72,2363,2.72,2364,2.72,2365,2.72,2366,2.72,2367,2.72,2368,2.531,2369,2.38]],["title/classes/PolicyService.html",[103,0.06,122,2.773]],["body/classes/PolicyService.html",[0,0.241,3,0.042,4,0.032,5,0.032,8,0.837,13,0.316,14,0.091,15,0.528,20,0.858,22,0.35,23,0.278,24,0.008,28,0.158,33,0.081,37,0.696,40,1.01,41,1.778,53,2.176,63,1.195,64,0.578,76,0.571,77,2.176,78,1.349,79,0.774,87,2.124,91,0.478,94,1.017,96,1.948,97,1.334,99,0.543,101,0.004,102,0.004,103,0.037,105,0.791,107,3.029,110,1.384,112,1.217,114,0.664,115,2.393,116,2.536,118,1.204,119,1.595,120,5.322,121,1.808,122,2.686,135,2.989,137,0.964,142,1.898,145,5.584,146,4.176,147,1.453,148,3.382,149,1.536,150,1.882,151,1.767,153,1.742,155,3.748,163,2.276,164,3.884,165,2.949,166,2.465,167,2.949,174,1.824,186,1.482,195,4.452,199,4.821,201,5.043,202,5.284,203,1.898,204,1.431,207,2.949,221,3.047,222,4.675,232,1.729,241,1.898,242,1.898,243,0.843,244,0.881,248,1.237,251,1.06,261,1.31,276,1.113,280,1.888,347,1.971,450,1.648,517,1.113,548,3.479,594,2.122,608,1.729,820,2.161,860,1.436,899,2.034,905,1.272,1024,2.586,1028,2.454,1037,2.389,1044,1.349,1155,2.004,1219,3.294,1276,1.808,1437,3.537,1445,2.57,1457,3.115,1681,4.078,1702,1.808,1772,3.928,2004,1.658,2069,3.113,2200,1.808,2330,2.289,2331,2.289,2332,4.919,2333,4.362,2334,2.289,2335,7.09,2336,3.557,2337,3.557,2338,4.362,2339,5.638,2340,2.131,2341,4.362,2342,2.289,2343,4.362,2344,2.289,2345,5.326,2346,4.362,2347,2.289,2348,2.289,2349,4.919,2350,4.362,2351,2.289,2352,3.714,2353,4.362,2354,1.898,2355,3.557,2356,2.289,2357,2.289,2358,2.289,2359,3.557,2360,2.289,2361,3.557,2362,2.289,2363,2.289,2364,2.289,2365,3.557,2366,2.289,2367,2.289,2368,2.131,2369,2.004,2370,4.389,2371,4.389,2372,4.389,2373,4.389,2374,2.825,2375,2.825,2376,2.825,2377,2.825,2378,2.825,2379,2.825,2380,2.825,2381,2.825,2382,2.825,2383,2.825,2384,2.825,2385,2.825,2386,2.825,2387,2.825,2388,2.825]],["title/injectables/PrismaService.html",[344,1.029,1192,2.559]],["body/injectables/PrismaService.html",[3,0.1,4,0.076,5,0.076,14,0.213,15,0.778,24,0.008,28,0.286,33,0.1,101,0.007,102,0.007,103,0.088,112,1.286,116,3.067,119,4.789,141,2.27,150,1.728,151,1.787,174,1.877,261,2.369,292,1.389,327,2.837,344,1.801,345,2.76,380,2.495,579,3.789,773,2.76,774,5.427,1192,4.481,1276,4.257,2389,6.652,2390,7.779,2391,8.066,2392,6.652,2393,6.652,2394,6.652,2395,5.891,2396,4.257,2397,6.652,2398,6.652,2399,4.718,2400,6.652,2401,6.652]],["title/classes/ProfileResponseDto.html",[103,0.06,1476,2.66]],["body/classes/ProfileResponseDto.html",[3,0.061,4,0.047,5,0.047,8,1.012,14,0.131,15,0.566,20,0.729,22,0.362,23,0.311,24,0.008,28,0.208,33,0.12,36,0.985,37,1.263,41,1.398,45,2.638,64,1.711,76,0.57,79,1.581,80,1.427,90,1.207,101,0.005,102,0.005,103,0.108,105,1.143,112,1.335,147,1.298,149,1.019,170,2.706,180,1.686,212,3.699,216,2.511,233,3.276,243,2.378,244,1.8,250,2.676,267,2.361,296,1.051,307,1.516,450,1.898,463,2.778,545,1.617,547,3.015,641,3.259,785,1.894,854,3.644,902,3.103,924,2.936,927,3.109,931,3.93,1036,4.034,1128,3.197,1404,2.97,1405,2.859,1407,1.394,1430,2.573,1446,2.398,1447,2.745,1448,3.197,1449,2.756,1450,3.259,1451,3.902,1457,3.305,1461,2.745,1462,3.519,1463,3.879,1464,2.398,1465,4.452,1466,2.147,1467,4.452,1468,3.78,1469,4.452,1470,3.644,1471,4.452,1472,4.498,1473,3.519,1474,2.307,1475,4.452,1476,3.389,1477,5.502,1478,4.498,1479,4.655,1480,4.284,1481,3.879,1482,4.284,1483,5.097,1484,4.498,1485,4.655,1486,4.655,1487,4.284,1488,3.93,1489,2.398,1490,2.398,1491,2.398,1492,2.398,1493,2.5,1494,3.694,1495,3.142,2402,4.085,2403,4.085,2404,4.085,2405,4.085,2406,4.085,2407,4.085,2408,4.085,2409,4.085,2410,4.085,2411,4.085,2412,4.085,2413,4.085]],["title/modules/QueueModule.html",[327,1.62,2414,3.214]],["body/modules/QueueModule.html",[3,0.104,4,0.079,5,0.079,24,0.008,28,0.293,33,0.104,101,0.007,102,0.007,103,0.091,292,1.442,327,3.08,329,3.297,330,3.201,331,3.511,332,3.511,333,3.511,334,3.88,335,4.38,339,4.125,340,3.511,341,3.201,2414,6.577,2415,6.116,2416,6.116,2417,6.116,2418,6.737,2419,6.905,2420,6.905]],["title/injectables/QueueService.html",[344,1.029,2418,3.214]],["body/injectables/QueueService.html",[3,0.056,4,0.042,5,0.042,14,0.119,15,0.528,20,0.905,22,0.354,23,0.278,24,0.008,28,0.134,33,0.122,41,1.544,52,1.462,53,2.178,56,1.391,63,1.079,70,1.926,71,1.95,91,1.476,96,1.85,97,1.17,99,0.713,101,0.005,102,0.005,103,0.049,112,1.28,114,0.576,115,1.183,137,1.266,149,1.51,150,1.775,151,1.8,153,1.749,161,2.322,174,2.14,186,1.735,192,2.177,208,1.826,244,2.171,253,1.886,261,1.608,271,2.739,274,1.886,292,0.775,344,1.223,345,1.539,347,3.042,437,2.823,444,1.886,450,0.842,452,1.476,459,2.374,460,2.631,476,3.447,478,2.492,489,2.842,496,2.033,552,3.296,613,2.177,788,2.797,794,3.426,820,2.652,1024,3.597,1028,3.457,1091,5.641,1171,2.374,1216,1.95,1622,5.14,1623,4.937,1624,6.001,1643,5.243,1731,3.006,1738,5.14,1784,3.285,1844,3.006,1861,3.006,1864,2.797,1880,3.006,1945,2.797,2057,3.285,2079,6.547,2148,3.296,2390,6.83,2391,6.83,2395,3.285,2418,3.821,2421,3.285,2422,5.618,2423,5.386,2424,6.343,2425,6.343,2426,5.386,2427,6.96,2428,6.96,2429,3.709,2430,3.709,2431,3.709,2432,3.709,2433,3.709,2434,3.709,2435,5.386,2436,3.709,2437,3.709,2438,3.709,2439,3.709,2440,3.709,2441,3.709,2442,3.709,2443,3.285,2444,3.285,2445,3.285,2446,6.84,2447,3.285,2448,6.165,2449,3.285,2450,5.618,2451,3.285,2452,3.709,2453,3.709,2454,4.771,2455,3.285,2456,4.771,2457,3.285,2458,6.343,2459,5.618,2460,3.285,2461,5.386,2462,4.771,2463,6.83,2464,4.771,2465,4.771,2466,3.285,2467,3.285,2468,4.771,2469,7.392,2470,7.392,2471,3.709,2472,5.386,2473,3.709,2474,3.709,2475,3.709,2476,3.709,2477,3.709,2478,5.386,2479,3.709,2480,3.709,2481,3.709,2482,3.709,2483,3.709,2484,3.709,2485,3.709,2486,3.709,2487,3.709,2488,3.709,2489,3.709,2490,3.709,2491,6.96,2492,5.386,2493,5.386,2494,7.047,2495,3.709,2496,5.386,2497,5.386,2498,3.285,2499,3.709,2500,3.709,2501,6.343,2502,3.709,2503,3.709,2504,5.386,2505,3.709,2506,3.709,2507,3.709,2508,3.709,2509,4.063,2510,3.709,2511,3.709,2512,3.709,2513,3.709,2514,3.709,2515,3.709,2516,3.709,2517,3.709,2518,3.709,2519,3.709,2520,3.709,2521,3.709,2522,3.709,2523,3.709,2524,3.709,2525,3.709,2526,3.709,2527,3.709,2528,3.709,2529,5.386,2530,3.709,2531,3.709]],["title/classes/RefineWorkflowDto.html",[103,0.06,284,2.773]],["body/classes/RefineWorkflowDto.html",[3,0.072,4,0.089,5,0.055,8,1.001,10,2.313,13,0.723,14,0.155,15,0.634,22,0.345,23,0.31,24,0.008,28,0.263,33,0.126,36,0.778,37,1.157,64,1.78,67,1.852,70,3.061,76,0.535,90,0.869,96,1.771,101,0.006,102,0.006,103,0.115,105,1.349,112,1.184,114,0.535,266,1.899,267,2.093,278,2.949,280,2.042,281,2.949,284,3.958,287,3.185,296,1.239,309,4.247,314,2.623,315,2.623,318,3.134,320,3.552,370,2.721,371,2.721,407,3.521,408,2.623,409,2.623,410,3.974,411,2.623,412,2.623,413,2.721,450,1.943,463,2.684,491,4.123,509,2.721,510,2.721,511,2.721,512,2.721,513,2.721,514,2.721,516,4.406,517,3.076,533,2.721,534,2.721,581,2.11,594,2.557,606,2.721,619,4.247,726,3.084,924,2.603,927,3.068,1404,3.039,1405,3.137,1407,1.644,1455,3.906,1462,3.838,1466,3.4,1473,2.533,1504,4.596,1505,4.732,1889,5.469,1890,3.238,1892,5.478,1894,5.729,1896,5.478,1898,4.672,1901,3.238,1902,3.238,1903,3.238,1904,3.238,2532,4.819,2533,4.819,2534,4.819,2535,4.819,2536,4.819,2537,4.819,2538,4.819]],["title/interfaces/RefreshToken.html",[0,0.249,813,2.382]],["body/interfaces/RefreshToken.html",[0,0.32,2,0.939,3,0.062,4,0.047,5,0.047,13,0.651,14,0.133,15,0.571,22,0.346,23,0.28,24,0.008,28,0.278,31,1.32,33,0.062,36,0.498,38,1.515,76,0.571,79,2.191,80,2.794,87,1.064,91,0.7,94,0.959,97,1.326,99,1.612,101,0.005,102,0.005,103,0.055,110,1.064,116,2.354,119,3.807,147,1.352,148,3.153,149,1.558,150,1.679,151,1.436,153,1.497,155,1.764,174,2.018,180,2.525,186,1.626,225,2.873,244,2.773,251,1.552,270,4.682,271,2.962,287,2.038,304,2.198,347,2.468,397,2.781,398,4.916,399,2.649,437,1.515,452,1.134,473,2.337,489,1.591,496,1.209,545,1,572,2.533,647,3.958,744,4.53,745,2.781,746,1.976,747,4.394,748,2.337,770,2.337,785,4.403,794,3.574,803,5.19,806,4.128,809,2.43,810,2.176,813,4.41,815,4.567,831,2.936,846,2.936,849,6.829,885,3.122,901,3.574,1154,3.122,1216,3.062,1254,1.591,1414,1.183,1415,1.291,1441,3.544,1488,3.958,1702,2.649,1765,5.19,1879,3.122,1961,3.666,1962,3.666,1963,3.666,1964,3.666,1972,3.666,1974,3.666,1976,3.666,1977,3.666,1981,3.666,1983,3.666,1985,3.666,1986,5.16,1987,3.354,1988,5.971,1989,3.666,1990,5.971,1991,3.666,1992,5.16,1993,3.666,1994,3.666,1995,5.16,1996,3.666,1997,3.666,1998,3.666,1999,3.666,2000,3.666,2001,6.48,2002,7.085,2003,6.83,2004,3.42,2005,5.16,2006,5.16,2007,3.666,2008,5.971,2009,3.666,2010,3.666,2011,3.666,2012,3.666,2013,3.666,2014,3.666,2015,3.666,2016,4.721,2017,3.666,2018,3.666,2019,5.16,2020,3.666,2021,3.666,2022,3.666,2023,5.16,2024,3.666,2025,5.16,2026,3.666,2027,3.666,2028,3.666]],["title/classes/RegisterDto.html",[103,0.06,930,3.418]],["body/classes/RegisterDto.html",[3,0.095,4,0.072,5,0.072,8,0.968,14,0.203,15,0.756,20,0.84,22,0.358,23,0.283,24,0.008,28,0.228,33,0.125,76,0.404,101,0.007,102,0.007,103,0.11,105,1.773,107,2.162,112,1.26,147,1.477,267,2.228,296,1.629,545,2.222,785,2.937,806,3.025,812,2.937,905,2.853,922,4.779,923,5.135,924,2.77,927,2.999,928,4.779,929,7.387,930,5.812,931,4.524,932,6.129,2539,6.336,2540,6.336,2541,6.336]],["title/interfaces/Session.html",[0,0.249,797,2.467]],["body/interfaces/Session.html",[0,0.463,2,1.344,3,0.089,4,0.067,5,0.067,8,0.629,14,0.19,15,0.725,17,3.258,22,0.362,23,0.306,24,0.008,28,0.214,33,0.133,36,1.045,37,0.939,76,0.378,87,1.523,90,1.068,91,1.251,101,0.006,102,0.006,103,0.078,109,2.524,111,3.624,118,2.524,124,3.624,125,3.624,147,1.44,149,1.046,180,1.73,266,2.913,393,2.916,446,3.223,545,1.947,754,3.223,761,3.223,762,3.476,776,3.476,777,3.624,778,3.789,779,3.223,780,3.789,790,4.931,794,3.426,797,4.821,806,2.828,812,3.912,813,4.436,815,4.594,896,4.73,897,3.979,899,3.912,900,4.523,901,2.745,902,3.426,903,3.789,904,3.789,905,3.329,906,4.023,907,4.2,908,3.979,909,4.2]],["title/interfaces/TokenResponse.html",[0,0.249,943,3.214]],["body/interfaces/TokenResponse.html",[0,0.451,2,1.401,3,0.093,4,0.07,5,0.07,14,0.198,15,0.744,20,0.933,22,0.351,23,0.258,24,0.008,28,0.296,33,0.093,36,0.988,76,0.484,97,1.246,101,0.006,102,0.006,103,0.082,110,1.588,147,1.302,151,1.488,153,1.552,174,1.461,180,1.803,186,1.545,292,1.29,304,2.473,344,1.722,347,2.777,452,1.691,545,2.069,722,3.624,748,4.964,770,4.636,771,3.486,773,2.562,794,2.862,808,4.642,809,4.453,810,4.316,811,4.149,812,4.148,901,3.806,906,4.129,933,4.656,937,4.82,939,4.656,941,4.656,943,5.38,944,4.656,945,4.656,946,4.656,947,4.656,948,4.656]],["title/interfaces/TransactionParams.html",[0,0.249,2542,3.214]],["body/interfaces/TransactionParams.html",[0,0.48,2,1.371,3,0.091,4,0.069,5,0.069,8,0.641,13,0.95,14,0.194,15,0.734,20,0.658,22,0.365,23,0.277,24,0.008,33,0.131,34,1.97,36,0.727,63,1.161,68,3.106,101,0.006,102,0.006,114,0.619,153,1.787,170,2.443,233,3.371,334,2.721,380,3.188,393,2.975,545,1.459,577,3.574,579,3.883,779,3.288,864,5.029,905,3.371,1046,2.8,1067,4.06,1128,3.883,1448,2.885,1449,3.883,1451,3.072,1457,3.527,1495,3.288,2004,3.547,2047,4.285,2399,4.285,2542,5.768,2543,4.285,2544,5.029,2545,5.309,2546,4.557,2547,4.285,2548,4.557,2549,4.557,2550,4.557,2551,5.645,2552,4.557,2553,4.557,2554,4.557,2555,4.557,2556,4.557,2557,3.866,2558,4.285,2559,4.557,2560,4.285,2561,4.557,2562,4.557,2563,4.557,2564,4.557]],["title/classes/UpdateExecutionDto.html",[103,0.06,1408,2.467]],["body/classes/UpdateExecutionDto.html",[3,0.107,4,0.044,5,0.044,8,1.003,13,0.922,14,0.125,15,0.547,22,0.351,23,0.267,24,0.008,28,0.201,33,0.126,34,2.124,36,0.994,37,0.616,39,1.021,41,1.931,62,2.668,64,1.846,66,3.263,76,0.536,89,1.268,90,1.283,91,1.461,99,1.367,101,0.005,102,0.005,103,0.113,105,1.088,112,0.988,114,0.668,115,2.632,163,2.825,166,1.458,204,1.268,243,1.161,267,1.747,280,1.87,296,1,307,2.208,450,2.025,452,1.065,479,1.857,496,1.628,517,2.567,556,1.802,594,2.634,611,2.567,621,1.751,623,1.532,652,2.692,656,1.657,767,1.915,802,2.044,862,2.441,924,2.172,927,3.082,1028,1.572,1030,3.432,1031,3.032,1032,3.339,1034,1.857,1035,1.857,1038,2.583,1039,2.661,1041,1.915,1047,2.744,1048,2.661,1249,4.377,1394,2.116,1395,2.283,1396,2.283,1397,3.444,1399,3.312,1400,3.271,1404,2.737,1405,2.63,1406,3.824,1407,1.327,1408,3.033,1409,4.017,1410,2.504,1411,2.929,1412,2.633,1413,2.195,1414,1.112,1415,1.213,1416,2.283,1417,2.283,1418,4.738,1419,4.738,1420,2.283,1421,4.017,1422,2.283,1423,3.147,1424,3.11,1425,2.283,1426,2.283,1427,3.872,1428,3.147,1429,3.147,1430,1.495,1431,1.751,1432,2.283,1433,2.283,1434,2.283,1435,2.283,1436,2.116,1437,2.833,1438,2.116,1439,2.195,1440,2.195,1441,2.044,1442,2.195,1443,2.283,1444,2.195,1445,1.857,2565,3.888,2566,3.888,2567,3.888]],["title/classes/UpdateProfileDto.html",[103,0.06,1464,2.66]],["body/classes/UpdateProfileDto.html",[3,0.065,4,0.049,5,0.049,8,1.015,14,0.139,15,0.59,20,0.752,22,0.361,23,0.3,24,0.008,28,0.217,33,0.122,36,0.944,37,1.286,41,1.256,45,2.722,64,1.832,76,0.562,79,1.647,80,1.512,90,1.246,101,0.005,102,0.005,103,0.11,105,1.212,112,1.189,114,0.722,147,1.286,149,1.062,170,2.431,180,1.265,212,3.057,216,2.255,233,3.361,243,2.422,244,1.35,250,2.787,267,2.103,296,1.113,307,1.137,450,1.926,463,2.866,545,1.668,547,3.111,641,3.395,785,2.007,854,3.759,902,3.201,924,2.615,927,3.118,931,4.055,1036,3.922,1128,3.298,1400,4.055,1404,3.009,1405,2.906,1407,1.477,1430,2.311,1446,2.542,1447,2.909,1448,3.298,1449,2.871,1450,3.395,1451,3.986,1457,3.367,1461,2.909,1462,3.63,1463,4.04,1464,3.529,1465,4.566,1466,3.16,1467,4.566,1468,3.9,1469,4.566,1470,3.759,1471,4.566,1472,4.641,1473,3.63,1474,3.395,1475,4.566,1476,2.542,1477,5.014,1478,4.04,1479,3.847,1480,2.771,1481,2.909,1482,2.771,1483,4.775,1484,4.04,1485,3.847,1486,3.847,1487,3.847,1488,2.542,1489,2.542,1490,2.542,1491,2.542,1492,2.542,1493,2.649,1494,3.847,1495,3.272,2568,6.012,2569,4.33,2570,4.33,2571,4.33,2572,4.33,2573,4.33]],["title/classes/UpdateWorkflowDto.html",[103,0.06,1506,2.9]],["body/classes/UpdateWorkflowDto.html",[3,0.081,4,0.062,5,0.062,8,1.008,13,0.605,14,0.174,15,0.685,20,0.982,22,0.346,23,0.295,24,0.008,28,0.279,33,0.123,36,0.93,64,1.844,67,3.43,76,0.446,90,1.609,101,0.006,102,0.006,103,0.115,105,1.516,112,1.239,114,0.738,147,0.859,149,0.956,204,1.766,267,2.191,280,2.18,296,1.393,318,3.301,320,3.741,450,1.919,581,2.372,611,2.135,924,2.724,927,3.074,1400,4.1,1404,3.023,1405,2.953,1407,1.848,1410,2.082,1412,2.19,1414,1.548,1424,2.586,1496,3.466,1497,4.085,1504,4.774,1505,3.058,1506,4.47,1507,4.947,1508,3.466,2574,5.416,2575,6.985,2576,5.416,2577,5.416,2578,5.416]],["title/classes/UsageResponseDto.html",[103,0.06,1489,2.66]],["body/classes/UsageResponseDto.html",[3,0.068,4,0.051,5,0.051,8,1.017,14,0.145,15,0.606,20,0.673,22,0.361,23,0.296,24,0.008,28,0.223,33,0.123,36,1.012,37,1.203,41,1.473,45,2.436,64,1.753,76,0.566,79,1.693,80,1.574,90,1.272,101,0.005,102,0.005,103,0.111,105,1.261,112,1.07,147,1.261,149,1.091,170,2.852,180,1.316,212,3.142,216,2.318,233,3.418,243,2.452,244,1.405,250,2.865,267,1.892,296,1.159,307,1.184,450,1.945,463,2.565,545,1.493,547,2.783,641,3.49,785,2.089,854,3.364,902,3.27,924,2.353,927,3.124,931,3.628,1036,3.99,1128,3.368,1404,3.036,1405,2.938,1407,1.538,1430,2.712,1446,2.645,1447,3.028,1448,3.368,1449,2.951,1450,3.49,1451,4.044,1457,3.409,1461,3.028,1462,3.708,1463,4.153,1464,2.645,1465,3.782,1466,2.369,1467,3.782,1468,3.49,1469,3.782,1470,3.364,1471,3.782,1472,4.153,1473,3.249,1474,2.545,1475,3.782,1476,2.645,1477,5.344,1478,4.74,1479,4.857,1480,2.884,1481,3.028,1482,2.884,1483,5.257,1484,4.74,1485,4.857,1486,4.857,1487,3.955,1488,2.645,1489,3.628,1490,2.645,1491,2.645,1492,2.645,1493,2.758,1494,3.955,1495,3.364,2579,4.507,2580,4.507,2581,4.507]],["title/controllers/UserController.html",[256,1.931,2582,3.673]],["body/controllers/UserController.html",[3,0.074,4,0.056,5,0.056,8,0.897,13,0.963,14,0.159,20,0.807,22,0.282,23,0.307,24,0.008,28,0.285,33,0.074,37,1.045,63,1.148,91,1.429,97,1.123,99,1.623,101,0.006,102,0.006,103,0.066,112,1.123,114,0.613,147,1.463,149,1.492,150,1.877,151,1.739,161,3.093,174,1.752,186,1.589,215,2.711,216,2.472,256,2.112,258,2.112,260,2.909,261,1.967,266,2.597,267,1.986,273,4.959,274,3.351,276,2.918,291,3.587,292,1.035,293,2.798,294,4.456,295,4.829,296,1.274,303,2.17,304,1.616,306,4.181,307,1.945,437,2.711,454,2.968,489,2.846,652,2.414,758,5.061,768,5.952,769,3.515,805,5.584,895,5.584,899,4.259,995,4.975,1212,5.252,1228,4.674,1229,4.217,1267,3.515,1344,3.738,1345,4.674,1359,6.558,1464,2.909,1465,3.032,1467,3.032,1469,3.032,1471,3.032,1475,3.032,1476,4.823,1489,4.346,2582,5.341,2583,4.956,2584,5.837,2585,5.837,2586,6.001,2587,4.956,2588,4.956,2589,6.59,2590,4.956,2591,4.956,2592,4.956,2593,8.756,2594,4.956,2595,4.956,2596,4.956,2597,4.956,2598,4.956,2599,5.252,2600,4.389,2601,3.738,2602,4.956,2603,4.956,2604,4.956,2605,4.956,2606,4.956,2607,4.956,2608,4.956,2609,4.956,2610,4.956,2611,4.956,2612,4.956]],["title/modules/UserModule.html",[327,1.62,715,3.214]],["body/modules/UserModule.html",[3,0.097,4,0.073,5,0.073,24,0.008,28,0.326,33,0.097,101,0.007,102,0.007,103,0.085,258,3.317,292,1.345,327,2.991,329,3.075,330,2.985,331,3.274,332,3.274,333,3.274,334,3.767,335,4.253,339,3.957,340,3.274,341,2.985,712,5.104,715,6.682,718,5.23,725,4.328,2582,6.779,2599,6.682,2600,5.704,2613,5.704,2614,5.704,2615,5.704,2616,6.44,2617,6.682,2618,6.44,2619,6.779,2620,6.44,2621,6.44,2622,5.704]],["title/injectables/UserRepository.html",[344,1.029,937,2.66]],["body/injectables/UserRepository.html",[3,0.07,4,0.053,5,0.053,13,0.989,14,0.149,20,0.904,22,0.358,23,0.301,24,0.008,28,0.259,33,0.07,36,0.76,37,1.002,63,1.286,68,2.622,76,0.513,80,2.207,94,1.783,96,1.826,97,1.22,99,1.214,101,0.005,102,0.005,103,0.062,110,1.197,112,1.258,114,0.686,116,2.207,147,0.738,149,1.267,150,1.751,151,1.796,153,1.81,181,4.044,186,0.876,205,4.246,215,2.627,217,3.867,244,2.237,261,1.886,266,3.032,292,0.972,303,2.039,344,1.434,345,1.932,545,2.004,579,3.017,773,1.932,860,4.09,899,3.933,932,5.088,937,3.71,952,4.766,1044,3.017,1139,4.246,1192,4.344,1249,3.426,1254,3.482,1380,3.511,1618,3.511,1837,5.597,2161,3.128,2162,3.128,2369,3.302,2447,5.597,2586,5.814,2623,4.655,2624,6.319,2625,4.655,2626,4.655,2627,6.319,2628,4.655,2629,4.655,2630,4.655,2631,4.123,2632,4.655,2633,6.319,2634,4.655,2635,6.319,2636,7.174,2637,6.319,2638,4.655,2639,4.655,2640,4.655,2641,4.655,2642,4.655,2643,4.655,2644,4.655,2645,4.655,2646,4.655,2647,4.655,2648,4.655,2649,4.655,2650,7.174,2651,4.655,2652,6.319,2653,4.655,2654,6.319,2655,4.655,2656,6.319,2657,4.655,2658,6.319,2659,4.655,2660,6.319,2661,4.655,2662,6.319,2663,4.655,2664,6.319,2665,4.655,2666,6.319,2667,4.655,2668,6.319,2669,6.319,2670,6.319,2671,6.319,2672,6.319,2673,6.319,2674,4.123,2675,4.655]],["title/injectables/UserService.html",[344,1.029,2599,3.214]],["body/injectables/UserService.html",[3,0.081,4,0.061,5,0.061,14,0.173,20,0.888,22,0.343,23,0.278,24,0.008,28,0.278,33,0.081,63,1.265,76,0.444,96,1.581,97,1.281,99,1.567,100,4.089,101,0.006,102,0.006,103,0.071,110,1.387,112,1.237,114,0.675,141,1.84,147,1.293,149,1.491,150,1.68,151,1.768,153,1.769,161,2.55,174,1.825,180,2.035,186,1.311,221,3.05,261,2.079,292,1.126,303,2.362,304,1.758,344,1.581,345,2.238,450,1.581,496,2.254,773,2.238,809,3.166,899,3.229,932,3.825,937,5.076,1252,5.473,1464,4.787,1465,4.262,1467,4.262,1469,4.262,1471,4.262,1475,4.262,1476,3.166,1479,4.937,1480,4.457,1482,4.457,1485,4.937,1486,4.937,1488,4.089,1489,3.166,1575,4.357,1760,4.067,1772,3.045,2161,3.624,2162,3.624,2203,3.825,2584,6.17,2585,6.17,2586,6.253,2599,4.941,2601,4.067,2631,4.777,2676,5.393,2677,5.393,2678,5.393,2679,6.966,2680,5.393,2681,6.966,2682,5.393,2683,5.393,2684,6.966,2685,6.966,2686,7.716,2687,6.966,2688,5.393,2689,5.393,2690,5.393,2691,5.393,2692,5.393,2693,5.393,2694,5.393,2695,5.393,2696,5.393,2697,5.393,2698,5.393,2699,5.393,2700,5.393,2701,5.393,2702,5.393,2703,5.393,2704,5.393]],["title/interfaces/WalletBalance.html",[0,0.249,2558,3.214]],["body/interfaces/WalletBalance.html",[0,0.48,2,1.371,3,0.091,4,0.069,5,0.069,8,0.641,13,0.675,14,0.194,15,0.734,20,0.658,22,0.365,23,0.277,24,0.008,33,0.131,34,1.97,36,0.727,63,0.937,68,3.106,101,0.006,102,0.006,153,1.787,170,2.443,233,2.721,334,2.721,380,2.266,393,2.975,545,1.459,577,2.885,579,3.883,779,3.288,864,4.06,905,3.662,1046,2.8,1067,4.06,1128,3.883,1448,2.885,1449,3.883,1451,3.072,1457,3.625,1495,4.626,2004,4.99,2047,4.285,2399,4.285,2542,5.309,2543,4.285,2544,5.029,2545,5.309,2546,4.557,2547,4.285,2548,4.557,2549,4.557,2550,4.557,2551,5.645,2552,4.557,2553,4.557,2554,4.557,2555,4.557,2556,4.557,2557,4.79,2558,5.309,2559,6.411,2560,4.285,2561,4.557,2562,4.557,2563,4.557,2564,4.557]],["title/interfaces/WalletCreateInput.html",[0,0.249,2705,3.418]],["body/interfaces/WalletCreateInput.html",[0,0.309,2,1.054,3,0.046,4,0.035,5,0.035,10,1.087,11,1.014,12,1.037,13,0.977,14,0.098,15,0.456,22,0.354,23,0.289,24,0.008,28,0.203,31,0.969,33,0.112,36,0.948,39,1.882,40,1.087,41,0.97,52,1.198,64,0.622,68,1.261,70,2.256,71,2.441,76,0.578,79,1.963,80,1.062,91,0.514,94,1.462,97,1.342,99,1.212,101,0.004,102,0.004,103,0.04,109,1.295,114,0.593,116,1.622,118,1.295,132,2.441,133,2.441,134,1.409,135,1.497,137,1.923,138,1.331,147,1.314,148,3.579,149,1.608,150,1.846,151,1.664,153,1.735,155,1.295,161,1.7,174,1.493,177,4.04,180,1.646,183,1.655,186,1.402,189,2.043,190,2.043,204,2.057,208,1.497,215,2.31,216,1.742,221,1.331,233,3.62,243,2.029,244,0.948,248,1.331,251,1.14,307,1.785,439,1.945,464,1.945,469,1.497,496,0.888,522,1.86,529,4.866,566,1.945,577,4.15,611,1.83,620,2.842,746,1.452,761,1.655,789,2.156,900,3.449,902,4.138,1024,2.402,1044,2.218,1046,1.409,1053,2.043,1079,2.156,1128,3.67,1171,2.972,1176,2.293,1216,1.598,1225,3.559,1226,3.455,1254,1.169,1414,2.252,1415,1.758,1448,3.958,1449,3.838,1450,4.538,1451,2.865,1457,3.829,1492,1.785,1616,2.043,1627,2.043,1666,1.785,1693,2.043,1699,2.775,1772,3.182,1948,2.156,2070,3.503,2148,1.86,2149,1.86,2150,1.86,2155,1.785,2172,3.449,2185,1.945,2206,1.86,2207,2.842,2352,3.449,2354,3.121,2396,3.606,2557,2.972,2705,3.503,2706,2.293,2707,3.764,2708,2.464,2709,2.464,2710,2.464,2711,2.293,2712,3.503,2713,2.293,2714,3.503,2715,2.293,2716,3.503,2717,2.293,2718,2.464,2719,2.464,2720,2.464,2721,2.464,2722,2.293,2723,3.764,2724,2.464,2725,2.464,2726,2.464,2727,3.764,2728,2.464,2729,2.464,2730,2.464,2731,2.464,2732,2.464,2733,4.567,2734,2.464,2735,2.464,2736,2.464,2737,2.464,2738,2.464,2739,2.464,2740,4.758,2741,2.464,2742,2.464,2743,2.293,2744,2.464,2745,2.464,2746,2.464,2747,2.464,2748,2.293,2749,2.464,2750,2.464,2751,3.764,2752,3.764,2753,2.464,2754,2.464,2755,3.294,2756,2.464,2757,2.464,2758,2.464,2759,5.113,2760,2.293,2761,2.464,2762,2.464,2763,3.503,2764,2.464,2765,3.764,2766,2.464,2767,3.764,2768,2.464,2769,2.464,2770,2.464,2771,3.764,2772,2.464,2773,2.464,2774,2.464,2775,2.464,2776,2.464,2777,4.758,2778,4.758,2779,2.464,2780,2.464,2781,2.464,2782,2.464,2783,2.464,2784,2.464,2785,2.464,2786,2.464,2787,2.464]],["title/interfaces/WalletInfo.html",[0,0.249,2547,3.214]],["body/interfaces/WalletInfo.html",[0,0.473,2,1.304,3,0.086,4,0.065,5,0.065,8,0.61,13,0.642,14,0.184,15,0.712,20,0.626,22,0.365,23,0.31,24,0.008,33,0.129,34,1.874,36,0.957,63,0.891,68,3.01,101,0.006,102,0.006,114,0.727,153,1.761,170,2.324,233,2.588,266,2.859,334,2.588,380,2.156,393,4.112,545,1.388,577,2.744,579,3.796,779,3.128,864,3.862,905,3.58,1046,2.664,1067,3.862,1128,4.263,1448,3.987,1449,4.312,1451,3.688,1457,3.573,1495,3.128,2004,3.374,2047,5.146,2399,4.077,2542,5.146,2543,4.077,2544,4.875,2545,5.146,2546,5.471,2547,5.146,2548,4.335,2549,4.335,2550,6.297,2551,5.471,2552,4.335,2553,6.297,2554,6.297,2555,4.335,2556,4.335,2557,3.678,2558,4.077,2559,4.335,2560,4.077,2561,4.335,2562,4.335,2563,4.335,2564,4.335]],["title/interfaces/WalletProvider.html",[0,0.249,2560,3.214]],["body/interfaces/WalletProvider.html",[0,0.482,2,1.303,3,0.086,4,0.065,5,0.065,8,0.61,13,0.641,14,0.184,20,0.909,22,0.363,23,0.271,24,0.008,33,0.129,34,1.872,36,0.691,63,1.294,68,3.008,101,0.006,102,0.006,112,1.305,114,0.657,150,1.874,153,1.878,170,2.321,233,2.585,261,2.164,334,3.265,380,2.153,393,2.827,545,1.751,577,2.741,579,3.794,779,3.125,864,3.857,905,3.265,1046,2.661,1067,4.871,1128,3.985,1448,2.741,1449,3.794,1451,2.919,1457,3.571,1495,3.125,1672,3.513,2004,3.37,2047,4.072,2396,4.639,2399,5.92,2542,5.92,2543,4.072,2544,4.871,2545,5.142,2546,4.33,2547,4.072,2548,4.33,2549,4.33,2550,4.33,2551,5.468,2552,4.33,2553,4.33,2554,4.33,2555,4.33,2556,4.33,2557,3.674,2558,4.072,2559,4.33,2560,5.142,2561,5.468,2562,5.468,2563,5.468,2564,6.295,2788,7.249,2789,7.249,2790,5.741,2791,5.741,2792,5.741,2793,5.741,2794,5.741]],["title/classes/WalletResponseDto.html",[103,0.06,1490,2.66]],["body/classes/WalletResponseDto.html",[3,0.064,4,0.048,5,0.048,8,1.014,14,0.136,15,0.581,20,0.645,22,0.362,23,0.311,24,0.008,28,0.214,33,0.121,36,0.936,37,1.172,41,1.237,45,2.335,64,1.727,76,0.58,79,2.026,80,2.385,90,1.334,101,0.005,102,0.005,103,0.109,105,1.186,112,1.301,147,1.278,149,1.306,170,2.395,180,1.238,212,3.012,216,2.562,233,3.33,243,2.56,244,1.322,250,3.166,267,2.3,296,1.09,307,1.113,450,1.916,463,2.458,545,1.431,547,2.668,641,3.856,785,1.965,854,3.225,902,3.606,924,2.86,927,3.115,931,3.478,1036,4.237,1128,3.531,1404,2.995,1405,2.889,1407,1.447,1430,2.277,1446,2.489,1447,2.848,1448,3.715,1449,3.531,1450,4.175,1451,4.206,1457,3.559,1461,2.848,1462,3.59,1463,3.981,1464,2.489,1465,3.625,1466,2.228,1467,3.625,1468,3.345,1469,3.625,1470,3.225,1471,3.625,1472,3.981,1473,3.114,1474,2.394,1475,3.625,1476,2.489,1477,4.968,1478,3.981,1479,3.791,1480,2.713,1481,2.848,1482,2.713,1483,4.732,1484,3.981,1485,3.791,1486,3.791,1487,4.37,1488,2.489,1489,2.489,1490,3.478,1491,2.489,1492,2.489,1493,2.594,1494,3.791,1495,3.225,2795,4.239,2796,4.239,2797,4.239,2798,4.239,2799,4.239,2800,4.239,2801,4.239,2802,4.239,2803,4.239]],["title/interfaces/WalletTransactionFindManyInput.html",[0,0.249,2716,3.418]],["body/interfaces/WalletTransactionFindManyInput.html",[0,0.311,2,1.062,3,0.046,4,0.035,5,0.035,10,1.098,11,1.024,12,1.048,13,0.979,14,0.099,15,0.459,22,0.348,23,0.286,24,0.008,28,0.204,31,0.979,33,0.112,36,1.012,39,1.889,40,1.098,41,0.978,52,1.211,64,0.628,68,1.274,70,2.268,71,2.46,76,0.578,79,1.971,80,1.073,91,0.52,94,1.47,97,1.344,99,1.219,101,0.004,102,0.004,103,0.041,109,1.309,114,0.595,116,1.635,118,1.309,132,2.46,133,2.46,134,1.424,135,1.512,137,1.935,138,1.345,147,1.317,148,3.583,149,1.596,150,1.85,151,1.667,153,1.738,155,1.309,161,1.714,174,1.501,177,4.053,180,1.657,183,3.452,186,1.407,189,2.064,190,2.064,204,2.068,208,1.512,215,2.322,216,1.756,221,1.345,233,3.629,243,1.397,244,0.958,248,1.345,251,1.152,266,1.845,307,1.793,439,1.965,464,1.965,469,1.512,496,0.897,522,1.879,529,4.878,566,1.965,577,4.157,611,1.845,620,2.864,746,1.467,761,1.672,789,2.179,900,3.47,902,4.085,1024,2.417,1044,2.235,1046,1.424,1053,2.064,1079,2.179,1128,3.682,1171,2.995,1176,2.316,1216,1.614,1225,3.848,1226,3.467,1254,1.181,1414,2.259,1415,1.769,1448,3.773,1449,3.572,1450,4.224,1451,2.883,1457,3.832,1492,1.803,1616,2.064,1627,2.064,1666,1.803,1693,2.064,1699,3.542,1772,3.202,1948,2.179,2070,3.53,2148,1.879,2149,1.879,2150,1.879,2155,1.803,2172,3.47,2185,1.965,2206,1.879,2207,2.864,2352,3.47,2354,3.145,2396,3.629,2557,2.995,2705,2.316,2706,2.316,2707,3.793,2708,2.489,2709,2.489,2710,2.489,2711,2.316,2712,3.53,2713,2.316,2714,3.53,2715,2.316,2716,4.277,2717,2.316,2718,2.489,2719,2.489,2720,2.489,2721,2.489,2722,2.316,2723,3.793,2724,2.489,2725,2.489,2726,2.489,2727,3.793,2728,2.489,2729,2.489,2730,2.489,2731,2.489,2732,2.489,2733,4.596,2734,2.489,2735,2.489,2736,2.489,2737,2.489,2738,2.489,2739,2.489,2740,4.783,2741,2.489,2742,2.489,2743,2.316,2744,2.489,2745,2.489,2746,2.489,2747,2.489,2748,2.316,2749,2.489,2750,2.489,2751,3.793,2752,3.793,2753,2.489,2754,2.489,2755,3.32,2756,2.489,2757,2.489,2758,2.489,2759,5.14,2760,2.316,2761,2.489,2762,2.489,2763,3.53,2764,2.489,2765,3.793,2766,2.489,2767,3.793,2768,2.489,2769,2.489,2770,2.489,2771,3.793,2772,2.489,2773,2.489,2774,2.489,2775,2.489,2776,2.489,2777,4.783,2778,4.783,2779,2.489,2780,2.489,2781,2.489,2782,2.489,2783,2.489,2784,2.489,2785,2.489,2786,2.489,2787,2.489]],["title/classes/WalletTransactionResponseDto.html",[103,0.06,1491,2.66]],["body/classes/WalletTransactionResponseDto.html",[3,0.063,4,0.048,5,0.048,8,1.013,14,0.135,15,0.578,20,0.642,22,0.363,23,0.313,24,0.008,28,0.212,33,0.121,36,0.933,37,1.168,41,1.23,45,2.321,64,1.723,76,0.579,79,2.018,80,1.468,90,1.329,101,0.005,102,0.005,103,0.109,105,1.176,112,1.315,147,1.274,149,1.301,170,2.381,180,1.228,212,2.995,216,2.209,233,3.794,243,2.555,244,1.311,250,2.73,267,2.326,296,1.081,307,1.104,450,1.912,463,2.444,545,1.423,547,2.653,641,3.839,785,2.73,854,3.206,902,3.595,924,2.892,927,3.114,931,3.458,1036,4.077,1128,3.518,1404,2.989,1405,2.883,1407,1.435,1430,2.264,1446,2.468,1447,2.825,1448,3.704,1449,2.813,1450,3.326,1451,4.087,1457,3.425,1461,2.825,1462,3.574,1463,3.958,1464,2.468,1465,3.604,1466,2.21,1467,3.604,1468,3.326,1469,3.604,1470,3.206,1471,3.604,1472,3.958,1473,3.096,1474,2.374,1475,3.604,1476,2.468,1477,4.95,1478,3.958,1479,3.769,1480,2.69,1481,2.825,1482,2.69,1483,4.714,1484,3.958,1485,3.769,1486,3.769,1487,3.769,1488,2.468,1489,2.468,1490,2.468,1491,3.458,1492,3.458,1493,4.16,1494,4.963,1495,4.222,2804,4.204,2805,4.204,2806,4.204,2807,4.204,2808,4.204,2809,4.204,2810,4.204,2811,4.204,2812,4.204,2813,4.204]],["title/interfaces/WalletUpdateInput.html",[0,0.249,2711,3.418]],["body/interfaces/WalletUpdateInput.html",[0,0.31,2,1.056,3,0.046,4,0.035,5,0.035,10,1.089,11,1.016,12,1.039,13,0.978,14,0.098,15,0.456,22,0.353,23,0.286,24,0.008,28,0.203,31,0.971,33,0.112,36,0.948,39,1.883,40,1.089,41,0.971,52,1.2,64,0.623,68,1.264,70,2.258,71,2.445,76,0.578,79,1.964,80,1.064,91,0.515,94,1.463,97,1.342,99,1.213,101,0.004,102,0.004,103,0.04,109,1.298,114,0.665,116,1.624,118,1.298,132,2.445,133,2.445,134,1.412,135,1.5,137,1.925,138,1.334,147,1.315,148,3.58,149,1.594,150,1.847,151,1.664,153,1.735,155,1.298,161,1.703,174,1.494,177,4.043,180,1.648,183,1.658,186,1.403,189,2.046,190,2.046,204,2.059,208,1.5,215,2.312,216,1.744,221,1.334,233,3.621,243,2.03,244,0.95,248,1.334,251,1.142,307,1.786,439,1.949,464,1.949,469,1.5,496,0.89,522,1.864,529,4.868,566,1.949,577,4.151,611,1.833,620,2.846,746,1.454,761,1.658,789,2.16,900,3.452,902,4.139,1024,2.404,1044,2.221,1046,1.412,1053,2.046,1079,2.16,1128,3.672,1171,2.976,1176,2.297,1216,1.601,1225,3.562,1226,3.457,1254,1.171,1414,2.253,1415,1.759,1448,3.96,1449,3.84,1450,4.54,1451,2.868,1457,3.829,1492,1.788,1616,2.046,1627,2.046,1666,1.788,1693,2.046,1699,2.778,1772,3.186,1948,2.16,2070,3.508,2148,1.864,2149,1.864,2150,1.864,2155,1.788,2172,3.452,2185,1.949,2206,1.864,2207,2.846,2352,3.452,2354,3.125,2396,3.61,2557,2.976,2705,2.297,2706,2.297,2707,3.769,2708,2.468,2709,2.468,2710,2.468,2711,3.508,2712,3.508,2713,2.297,2714,3.508,2715,2.297,2716,3.508,2717,2.297,2718,2.468,2719,2.468,2720,2.468,2721,2.468,2722,2.297,2723,3.769,2724,2.468,2725,2.468,2726,2.468,2727,3.769,2728,2.468,2729,2.468,2730,2.468,2731,2.468,2732,2.468,2733,4.572,2734,2.468,2735,2.468,2736,2.468,2737,2.468,2738,2.468,2739,2.468,2740,4.763,2741,2.468,2742,2.468,2743,2.297,2744,2.468,2745,2.468,2746,2.468,2747,2.468,2748,2.297,2749,2.468,2750,2.468,2751,3.769,2752,3.769,2753,2.468,2754,2.468,2755,3.299,2756,2.468,2757,2.468,2758,2.468,2759,5.118,2760,2.297,2761,2.468,2762,2.468,2763,3.508,2764,2.468,2765,3.769,2766,2.468,2767,3.769,2768,2.468,2769,2.468,2770,2.468,2771,3.769,2772,2.468,2773,2.468,2774,2.468,2775,2.468,2776,2.468,2777,4.763,2778,4.763,2779,2.468,2780,2.468,2781,2.468,2782,2.468,2783,2.468,2784,2.468,2785,2.468,2786,2.468,2787,2.468]],["title/controllers/WalletsController.html",[256,1.931,2619,3.673]],["body/controllers/WalletsController.html",[3,0.072,4,0.055,5,0.055,8,0.923,14,0.154,20,0.848,22,0.346,23,0.316,24,0.008,28,0.281,33,0.072,63,1.207,76,0.497,94,1.493,97,1.181,101,0.006,102,0.006,103,0.063,112,1.181,114,0.644,147,1.378,148,1.889,149,1.434,150,1.892,151,1.774,153,1.778,186,1.528,215,2.359,225,3.102,226,3.783,251,1.797,256,2.042,258,2.042,260,2.813,261,1.923,266,3.425,267,2.088,273,4.911,274,3.958,290,3.507,291,3.507,292,1.001,293,2.706,294,4.587,295,4.971,296,1.232,303,2.098,304,1.562,306,4.396,307,2.045,454,3.659,577,3.476,758,5.102,902,3.609,955,2.987,995,5.231,996,5.872,1254,2.477,1345,4.571,1414,2.226,1415,2.01,1446,4.57,1457,3.692,1490,4.57,1491,3.783,1517,3.883,2226,3.883,2244,3.883,2248,4.244,2352,4.764,2601,3.614,2617,5.164,2619,5.222,2622,4.244,2755,5.164,2814,4.792,2815,4.792,2816,6.448,2817,6.448,2818,6.448,2819,6.448,2820,4.792,2821,6.896,2822,4.244,2823,6.444,2824,6.444,2825,6.444,2826,4.792,2827,4.792,2828,4.792,2829,4.792,2830,4.792,2831,4.792,2832,4.792,2833,4.792,2834,4.792,2835,4.792,2836,4.792,2837,4.792,2838,4.792,2839,4.792,2840,4.792,2841,4.792,2842,4.792,2843,4.792,2844,4.792,2845,4.792,2846,6.444,2847,4.792]],["title/injectables/WalletsService.html",[344,1.029,2617,3.214]],["body/injectables/WalletsService.html",[3,0.066,4,0.05,5,0.05,14,0.141,20,0.859,22,0.35,23,0.278,24,0.008,28,0.251,33,0.066,36,0.732,63,1.223,76,0.479,79,2.059,80,2.433,89,1.435,90,1.257,91,1.179,94,1.02,96,0.999,97,1.196,99,1.567,101,0.005,102,0.005,103,0.058,107,1.502,108,2.693,110,1.132,112,1.196,114,0.653,141,1.502,147,0.964,149,1.625,150,1.636,151,1.749,153,1.743,155,1.875,161,2.986,174,2.046,177,2.313,186,1.534,215,1.611,221,3.051,225,1.875,233,1.982,243,2.243,261,1.815,276,3.108,287,2.167,292,0.919,303,1.927,304,1.435,344,1.38,345,1.826,380,1.651,437,1.611,489,1.692,577,3.327,773,1.826,876,3.567,877,3.567,902,4.008,955,2.04,1272,3.319,1414,2.255,1415,1.896,1446,4.411,1448,3.588,1449,3.327,1450,3.934,1457,3.727,1490,2.584,1491,2.584,1493,2.693,1494,2.816,1495,2.395,1616,5.48,1699,2.167,1760,3.319,1765,4.313,1766,3.898,1772,2.485,2352,4.598,2544,5.299,2601,3.319,2617,4.313,2740,5.254,2743,4.586,2755,3.122,2760,4.586,2763,4.586,2816,6.171,2817,6.171,2818,5.386,2819,6.171,2821,6.171,2848,4.401,2849,4.401,2850,4.401,2851,4.401,2852,4.401,2853,4.401,2854,4.401,2855,6.081,2856,4.401,2857,4.401,2858,4.401,2859,6.967,2860,4.401,2861,4.401,2862,6.081,2863,7.514,2864,6.081,2865,6.081,2866,6.081,2867,6.081,2868,6.081,2869,6.081,2870,4.401,2871,6.967,2872,4.401,2873,4.401,2874,4.401,2875,4.401,2876,6.081,2877,6.081,2878,6.081,2879,6.081,2880,4.401,2881,4.401,2882,4.401,2883,4.401,2884,4.401,2885,4.401,2886,4.401,2887,4.401,2888,4.401,2889,4.401,2890,4.401,2891,4.401,2892,6.967,2893,4.401,2894,3.898,2895,4.401,2896,4.401,2897,4.401,2898,4.401,2899,4.401,2900,4.401,2901,4.401,2902,4.401,2903,4.401,2904,4.401,2905,4.401,2906,4.401]],["title/interfaces/Workflow.html",[0,0.249,280,1.05]],["body/interfaces/Workflow.html",[0,0.363,2,0.651,3,0.043,4,0.033,5,0.033,8,0.743,13,0.9,14,0.092,15,0.436,20,0.796,22,0.345,23,0.297,24,0.008,28,0.252,31,0.915,33,0.092,36,0.797,37,0.97,39,1.428,54,1.33,56,2.039,58,1.292,73,4.096,76,0.583,77,3.131,78,3.161,79,2.122,80,2.445,81,3.48,84,3.953,87,1.801,94,1.622,96,1.234,97,1.305,99,1.345,101,0.004,102,0.004,103,0.038,104,2.036,107,2.089,108,1.756,109,1.223,114,0.726,116,2.445,118,1.893,119,1.62,120,1.756,123,2.164,126,3.151,132,2.335,133,2.335,134,1.33,135,1.413,137,1.855,138,2.381,145,4.617,146,3.153,147,1.314,148,3.365,149,1.598,150,1.686,151,1.553,152,4.1,153,1.584,155,2.821,161,1.627,164,1.836,170,1.16,174,1.983,177,3.68,179,5.281,180,2.562,181,1.836,186,1.619,195,3.479,199,1.756,200,2.164,202,4.481,204,1.449,205,1.928,215,1.051,216,1.666,221,1.257,225,1.223,234,2.036,236,2.164,244,2.277,247,3.014,248,1.257,250,2.52,271,1.459,280,2.138,318,2.995,320,3.394,347,1.051,450,0.651,452,0.786,469,1.413,518,2.036,519,2.036,531,4.732,555,1.836,620,1.756,684,2.036,774,2.843,860,2.764,872,4.96,950,2.542,1027,4.113,1044,2.122,1065,3.151,1139,2.985,1171,1.836,1172,2.542,1186,2.326,1216,2.335,1219,3.327,1225,2.923,1226,2.837,1414,1.27,1415,0.895,1430,2.691,1437,1.459,1445,1.37,1533,1.756,1537,3.601,1654,2.326,1699,1.413,1772,3.738,1864,2.164,1879,2.164,1880,3.601,1942,2.326,1987,2.326,2040,2.542,2069,2.036,2113,2.164,2149,1.756,2150,1.756,2155,1.685,2172,1.756,2206,1.756,2340,2.164,2369,3.856,2396,1.836,2422,3.935,2509,2.164,2722,2.164,2748,2.164,2907,2.542,2908,2.87,2909,2.87,2910,2.87,2911,2.87,2912,2.87,2913,2.87,2914,2.87,2915,4.815,2916,2.542,2917,2.542,2918,2.542,2919,2.542,2920,2.87,2921,2.87,2922,2.87,2923,2.542,2924,2.542,2925,3.935,2926,3.935,2927,3.935,2928,7.002,2929,3.935,2930,2.87,2931,2.87,2932,2.87,2933,2.542,2934,2.542,2935,4.443,2936,2.87,2937,5.436,2938,5.436,2939,2.87,2940,2.87,2941,5.436,2942,5.436,2943,5.436,2944,7.002,2945,6.12,2946,5.436,2947,6.62,2948,2.87,2949,2.87,2950,2.87,2951,5.436,2952,2.87,2953,2.87,2954,2.87,2955,6.62,2956,2.87,2957,2.87,2958,2.87,2959,2.87,2960,2.87,2961,2.87,2962,2.87,2963,2.87,2964,2.87,2965,2.87,2966,4.443,2967,2.87,2968,2.87,2969,2.87,2970,2.87,2971,7.002,2972,2.87,2973,4.443,2974,4.443,2975,2.87,2976,2.87,2977,4.443,2978,2.87,2979,2.87,2980,2.87,2981,2.87,2982,2.87,2983,2.87,2984,2.87,2985,6.62,2986,5.436,2987,2.87,2988,2.87,2989,2.87]],["title/classes/WorkflowDto.html",[103,0.06,1507,2.9]],["body/classes/WorkflowDto.html",[3,0.08,4,0.061,5,0.061,8,1.007,13,0.597,14,0.171,15,0.679,20,0.98,22,0.35,23,0.303,24,0.008,28,0.277,33,0.122,36,0.924,64,1.722,67,3.421,76,0.537,90,1.605,101,0.006,102,0.006,103,0.114,105,1.495,112,1.308,114,0.573,147,1.097,149,1.356,204,2.257,267,2.313,280,2.187,296,1.374,318,3.293,320,3.732,450,1.911,581,2.339,611,2.729,924,2.877,927,3.071,1404,3.012,1405,2.94,1407,1.823,1410,2.053,1412,2.16,1414,1.527,1424,3.306,1496,3.418,1497,4.029,1504,4.753,1505,3.016,1506,3.418,1507,5.2,1508,3.418,2990,5.342,2991,5.342,2992,5.342,2993,5.342,2994,5.342,2995,5.342]],["title/interfaces/WorkflowEdge.html",[0,0.249,363,3.214]],["body/interfaces/WorkflowEdge.html",[0,0.275,2,0.574,3,0.038,4,0.085,5,0.046,8,0.841,9,3.069,10,0.904,11,2.409,12,2.657,13,0.832,14,0.161,15,0.395,16,1.107,17,1.626,18,1.921,19,2.456,20,0.758,21,3.348,22,0.349,23,0.278,24,0.008,28,0.251,29,1.138,31,2.116,33,0.038,34,0.824,35,2.322,36,0.687,37,0.905,38,1.473,39,1.315,40,2.041,41,0.528,42,0.948,44,1.049,45,1.585,47,1.285,53,2.025,56,0.948,58,2.571,59,1.811,61,1.207,62,1.509,64,1.168,66,2.519,67,0.972,68,1.049,69,2.806,70,1.791,73,1.285,76,0.513,82,2.806,87,0.65,89,0.824,90,0.903,91,1.361,94,0.932,96,1.58,97,1.295,99,1.337,101,0.003,102,0.004,103,0.033,107,0.863,110,0.65,114,0.472,134,2.322,137,1.372,146,1.138,147,1.209,151,1.223,153,1.168,161,2.282,166,1.879,174,1.474,180,2.11,186,1.658,208,1.245,231,1.484,247,3.069,263,1.793,264,1.793,270,3.988,271,1.285,273,1.484,276,0.996,280,1.93,286,2.853,287,3.069,288,1.793,292,0.528,297,1.547,304,0.824,307,0.664,309,3.612,314,2.189,315,2.189,318,2.984,320,3.338,344,0.913,346,1.793,347,2.793,348,1.907,352,1.907,354,1.907,355,1.907,356,1.907,357,1.907,359,1.907,361,1.907,363,5.621,364,1.907,366,5.524,367,1.907,370,3.747,371,3.747,373,1.907,378,2.853,382,3.033,383,3.778,387,3.836,390,3.033,391,1.793,392,1.699,393,1.245,394,4.306,395,1.793,396,1.699,397,1.699,398,3.365,399,3.205,400,1.699,401,3.276,402,1.547,403,1.793,404,1.793,405,1.793,406,1.793,407,3.392,408,3.392,409,3.392,410,3.932,411,3.612,412,3.612,413,1.427,414,1.793,415,4.42,416,2.853,417,4.708,418,2.853,419,2.853,420,1.793,421,3.553,422,3.365,423,1.793,424,3.553,425,3.553,426,1.793,427,4.079,428,1.793,429,2.853,430,3.553,431,1.793,432,1.907,433,1.907,434,1.907,435,1.907,436,1.907,437,2.09,438,5.006,439,1.618,440,3.553,441,3.778,442,2.94,443,3.033,444,3.784,445,3.778,446,3.107,447,1.907,448,1.907,449,1.907,450,1.58,451,1.484,452,1.372,453,2.574,454,3.352,455,1.907,456,4.7,457,1.907,458,3.033,459,1.618,460,1.793,461,1.907,462,1.907,463,1.669,464,1.618,465,1.907,466,1.547,467,1.907,468,1.907,469,2.811,470,1.907,471,2.702,472,1.907,473,1.427,474,1.907,475,3.778,476,3.653,477,5.006,478,4.46,479,3.169,480,3.778,481,1.907,482,3.778,483,1.907,484,3.033,485,3.033,486,3.033,487,5.006,488,3.033,489,2.195,490,3.778,491,2.271,492,1.547,493,1.907,494,4.306,495,3.033,496,1.463,497,1.907,498,1.907,499,3.033,500,3.033,501,3.033,502,3.033,503,3.033,504,3.033,505,3.033,506,1.907,507,1.907,508,1.907,509,1.427,510,1.427,511,1.427,512,1.427,513,1.427,514,1.427,515,1.907,516,3.519,517,1.585,518,1.793,519,1.793,520,1.907,521,4.306,522,2.461,523,3.033,524,3.553,525,3.033,526,4.306,527,1.907,528,1.907,529,2.361,530,1.907,531,3.223,532,1.907,533,1.427,534,1.427,535,1.907,536,1.907,537,1.907,538,1.907,539,1.699,540,1.793,541,1.699,542,1.699,543,1.699,544,2.702,545,0.972,546,2.633,547,1.811,548,1.172,549,2.702,550,1.699,551,1.907,552,1.547,553,1.618,554,1.907,555,1.618,556,1.172,557,2.461,558,1.699,559,1.907,560,1.907,561,1.547,562,1.699,563,1.699,564,1.699,565,2.189,566,1.618,567,1.618,568,1.699,569,1.699,570,1.618,571,1.699,572,2.461,573,2.702,574,1.793,575,1.376,576,1.907,577,1.207,578,1.907,579,1.207,580,1.907,581,1.107,582,1.699,583,1.618,584,1.699,585,1.618,586,1.699,587,1.907,588,1.793,589,1.618,590,1.376,591,1.793,592,1.427,593,1.907,594,2.025,595,1.699,596,3.205,597,1.907,598,1.907,599,1.907,600,1.907,601,1.907,602,1.699,603,1.907,604,1.484,605,3.033,606,2.828,607,1.907,608,1.547,609,1.699,610,1.793,611,0.996,612,1.907,613,1.484,614,1.907,615,3.033,616,1.618,617,1.907,618,2.853,619,1.376,620,1.547,621,1.138,622,1.484,623,0.996,624,1.618,625,1.907,626,1.699,627,1.907,628,3.033,629,1.907,630,1.907,631,1.907,632,3.033,633,1.907,634,1.907,635,1.907,636,1.907,637,3.033,638,1.907,639,1.907,640,1.907,641,1.427,642,1.907,643,1.907,644,1.907,645,1.793,646,1.907,647,1.484,648,1.907,649,1.907,650,1.907,651,1.699,652,0.824,653,1.907,654,1.907,655,1.907,656,1.714,657,1.907,658,1.907,659,5.006,660,1.907,661,1.907,662,1.907,663,1.907,664,1.907,665,1.907,666,1.907,667,1.907,668,3.033,669,1.907,670,1.907,671,1.907,672,1.907,673,1.907,674,1.907,675,1.907,676,1.907,677,1.907,678,1.907,679,1.907,680,1.907,681,1.907,682,1.907,683,1.907,684,1.793,685,1.907,686,3.033,687,1.907,688,1.907,689,3.033,690,1.907,691,1.907,692,1.907,693,1.907,694,1.907,695,3.033,696,3.033,697,1.907,698,1.907,699,1.907,700,1.907,701,1.907,702,1.907,703,1.907,704,1.907]],["title/classes/WorkflowEdgeDto.html",[103,0.06,1892,2.9]],["body/classes/WorkflowEdgeDto.html",[3,0.071,4,0.099,5,0.054,8,1,10,2.292,13,0.716,14,0.153,15,0.629,22,0.351,23,0.31,24,0.008,28,0.262,33,0.125,36,0.772,37,1.15,64,1.798,67,1.828,70,2.775,76,0.553,90,0.858,96,1.762,101,0.005,102,0.005,103,0.115,105,1.331,112,1.229,114,0.642,267,2.173,278,2.91,280,1.977,281,2.91,284,2.91,287,3.157,296,1.223,309,3.489,314,2.589,315,2.589,318,2.967,320,3.362,370,2.685,371,2.685,407,3.489,408,2.589,409,2.589,410,4.644,411,3.947,412,3.947,413,2.685,450,1.936,463,3.221,491,4.095,509,2.685,510,2.685,511,2.685,512,2.685,513,2.685,514,2.685,516,3.62,517,2.527,533,2.685,534,2.685,581,2.083,594,2.647,606,3.62,619,4.225,726,3.043,924,2.703,927,3.064,1400,3.764,1404,3.03,1405,3.13,1407,1.623,1462,3.812,1466,3.37,1473,2.5,1504,4.575,1505,4.714,1889,5.609,1890,3.196,1892,5.46,1896,5.342,1898,4.641,1901,3.196,1902,3.196,1903,3.196,1904,3.196,2996,6.424,2997,4.756,2998,4.756,2999,4.756,3000,4.756,3001,4.756]],["title/classes/WorkflowExecutionDto.html",[103,0.06,1421,2.559]],["body/classes/WorkflowExecutionDto.html",[3,0.103,4,0.041,5,0.041,8,0.997,13,0.921,14,0.115,15,0.516,20,0.391,22,0.351,23,0.292,24,0.008,28,0.189,33,0.124,34,2.234,36,0.972,37,0.568,39,0.942,41,1.934,62,2.735,63,0.556,64,1.834,66,2.948,76,0.548,89,1.169,90,1.374,91,1.436,99,1.195,101,0.004,102,0.004,103,0.111,105,1.003,110,0.922,112,1.25,114,0.693,115,2.575,141,2.337,163,2.735,166,1.345,204,1.169,243,1.07,267,2.166,280,1.941,296,0.922,307,2.164,380,2.569,450,2.044,452,0.982,479,1.712,496,1.535,517,2.7,556,1.662,594,2.59,611,2.7,621,1.615,623,1.413,652,2.686,656,1.528,767,1.766,802,1.885,862,2.301,924,2.693,927,3.066,955,1.662,1028,1.45,1030,3.536,1031,3.108,1032,3.441,1034,1.712,1035,1.712,1038,3.175,1039,3.271,1041,3.063,1047,2.588,1048,2.509,1249,4.378,1254,1.378,1394,1.952,1395,2.105,1396,2.105,1399,3.483,1404,2.661,1405,2.547,1406,3.652,1407,1.224,1408,1.952,1409,3.868,1410,2.391,1411,2.762,1412,2.515,1413,2.025,1414,1.025,1415,1.118,1416,2.105,1417,2.105,1418,4.74,1419,4.622,1420,2.105,1421,4.118,1422,2.105,1423,2.967,1424,3.271,1425,3.085,1426,3.085,1427,3.969,1428,3.868,1429,3.868,1430,1.378,1431,1.615,1432,2.105,1433,2.105,1434,2.105,1435,2.105,1436,1.952,1437,2.672,1438,1.952,1439,2.025,1440,2.025,1441,1.885,1442,2.025,1443,2.105,1444,2.025,1445,1.712,3002,5.255,3003,3.586,3004,3.586,3005,3.586,3006,3.586,3007,3.586,3008,3.586,3009,3.586]],["title/interfaces/WorkflowNode.html",[0,0.249,366,3.214]],["body/interfaces/WorkflowNode.html",[0,0.276,2,0.576,3,0.038,4,0.076,5,0.046,8,0.842,9,3.075,10,0.908,11,2.413,12,2.661,13,0.887,14,0.161,15,0.396,16,1.112,17,1.632,18,1.927,19,2.462,20,0.76,21,3.354,22,0.344,23,0.289,24,0.008,28,0.251,29,1.144,31,2.12,33,0.038,34,0.828,35,2.329,36,0.689,37,0.907,38,1.478,39,1.319,40,2.046,41,0.53,42,0.952,44,1.054,45,1.591,47,1.291,53,2.031,56,0.952,58,2.578,59,1.818,61,1.213,62,1.514,64,1.171,66,2.525,67,0.976,68,1.054,69,2.813,70,1.796,73,1.291,76,0.514,82,2.813,87,0.653,89,0.828,90,1.126,91,1.362,94,0.935,96,1.582,97,1.296,99,1.34,101,0.003,102,0.004,103,0.034,107,0.867,110,0.653,134,2.329,137,1.377,146,1.144,147,1.211,151,1.225,153,1.171,161,2.287,166,1.884,174,1.478,180,2.114,186,1.659,208,1.25,231,1.491,247,3.075,263,1.801,264,1.801,266,1.591,270,3.997,271,1.291,273,1.491,276,1.001,280,1.932,286,2.863,287,3.075,288,1.801,292,0.53,297,1.554,304,0.828,307,0.667,309,3.619,314,2.197,315,2.197,318,2.987,320,3.342,344,0.916,346,1.801,347,2.797,348,1.915,352,1.915,354,1.915,355,1.915,356,1.915,357,1.915,359,1.915,361,1.915,363,5.531,364,1.915,366,5.628,367,1.915,370,3.755,371,3.755,373,1.915,378,2.863,382,3.044,383,3.789,387,3.846,390,3.044,391,1.801,392,1.706,393,1.25,394,4.317,395,1.801,396,1.706,397,1.706,398,3.375,399,3.215,400,1.706,401,3.283,402,1.554,403,1.801,404,1.801,405,1.801,406,1.801,407,3.938,408,3.399,409,3.399,410,3.399,411,2.734,412,2.734,413,1.434,414,1.801,415,4.43,416,2.863,417,4.717,418,2.863,419,2.863,420,1.801,421,3.563,422,3.375,423,1.801,424,3.563,425,3.563,426,1.801,427,4.085,428,1.801,429,2.863,430,3.563,431,1.801,432,1.915,433,1.915,434,1.915,435,1.915,436,1.915,437,2.096,438,5.015,439,1.625,440,3.563,441,3.789,442,2.949,443,3.044,444,3.79,445,3.789,446,3.115,447,1.915,448,1.915,449,1.915,450,1.582,451,1.491,452,1.376,453,2.583,454,3.357,455,1.915,456,4.71,457,1.915,458,3.044,459,1.625,460,1.801,461,1.915,462,1.915,463,1.675,464,1.625,465,1.915,466,1.554,467,1.915,468,1.915,469,2.818,470,1.915,471,2.712,472,1.915,473,1.434,474,1.915,475,3.789,476,3.663,477,5.015,478,4.468,479,3.175,480,3.789,481,1.915,482,3.789,483,1.915,484,3.044,485,3.044,486,3.044,487,5.015,488,3.044,489,2.2,490,3.789,491,2.279,492,1.554,493,1.915,494,4.317,495,3.044,496,1.467,497,1.915,498,1.915,499,3.044,500,3.044,501,3.044,502,3.044,503,3.044,504,3.044,505,3.044,506,1.915,507,1.915,508,1.915,509,1.434,510,1.434,511,1.434,512,1.434,513,1.434,514,1.434,515,1.915,516,3.526,517,1.591,518,1.801,519,1.801,520,1.915,521,4.317,522,2.47,523,3.044,524,3.563,525,3.044,526,4.317,527,1.915,528,1.915,529,2.369,530,1.915,531,3.232,532,1.915,533,1.434,534,1.434,535,1.915,536,1.915,537,1.915,538,1.915,539,1.706,540,1.801,541,1.706,542,1.706,543,1.706,544,2.712,545,0.975,546,2.641,547,1.818,548,1.177,549,2.712,550,1.706,551,1.915,552,1.554,553,1.625,554,1.915,555,1.625,556,1.177,557,2.47,558,1.706,559,1.915,560,1.915,561,1.554,562,1.706,563,1.706,564,1.706,565,2.197,566,1.625,567,1.625,568,1.706,569,1.706,570,1.625,571,1.706,572,2.47,573,2.712,574,1.801,575,1.382,576,1.915,577,1.213,578,1.915,579,1.213,580,1.915,581,1.112,582,1.706,583,1.625,584,1.706,585,1.625,586,1.706,587,1.915,588,1.801,589,1.625,590,1.382,591,1.801,592,1.434,593,1.915,594,2.029,595,1.706,596,3.215,597,1.915,598,1.915,599,1.915,600,1.915,601,1.915,602,1.706,603,1.915,604,1.491,605,3.044,606,2.836,607,1.915,608,1.554,609,1.706,610,1.801,611,1.001,612,1.915,613,1.491,614,1.915,615,3.044,616,1.625,617,1.915,618,2.863,619,1.382,620,1.554,621,1.144,622,1.491,623,1.001,624,1.625,625,1.915,626,1.706,627,1.915,628,3.044,629,1.915,630,1.915,631,1.915,632,3.044,633,1.915,634,1.915,635,1.915,636,1.915,637,3.044,638,1.915,639,1.915,640,1.915,641,1.434,642,1.915,643,1.915,644,1.915,645,1.801,646,1.915,647,1.491,648,1.915,649,1.915,650,1.915,651,1.706,652,0.828,653,1.915,654,1.915,655,1.915,656,1.72,657,1.915,658,1.915,659,5.015,660,1.915,661,1.915,662,1.915,663,1.915,664,1.915,665,1.915,666,1.915,667,1.915,668,3.044,669,1.915,670,1.915,671,1.915,672,1.915,673,1.915,674,1.915,675,1.915,676,1.915,677,1.915,678,1.915,679,1.915,680,1.915,681,1.915,682,1.915,683,1.915,684,1.801,685,1.915,686,3.044,687,1.915,688,1.915,689,3.044,690,1.915,691,1.915,692,1.915,693,1.915,694,1.915,695,3.044,696,3.044,697,1.915,698,1.915,699,1.915,700,1.915,701,1.915,702,1.915,703,1.915,704,1.915]],["title/classes/WorkflowNodeDto.html",[103,0.06,1896,2.9]],["body/classes/WorkflowNodeDto.html",[3,0.073,4,0.089,5,0.055,8,1.001,10,2.324,13,0.912,14,0.156,15,0.638,22,0.347,23,0.314,24,0.008,28,0.264,33,0.126,36,0.782,37,1.162,64,1.755,67,1.867,70,2.799,76,0.556,90,1.173,96,1.777,101,0.006,102,0.006,103,0.115,105,1.359,112,1.187,266,1.914,267,2.1,278,2.971,280,1.988,281,2.971,284,2.971,287,3.202,296,1.249,309,3.539,314,2.643,315,2.643,318,2.988,320,3.386,370,2.742,371,2.742,407,4.442,408,2.643,409,2.643,410,3.989,411,2.643,412,2.643,413,2.742,450,1.947,463,2.698,491,4.138,509,2.742,510,2.742,511,2.742,512,2.742,513,2.742,514,2.742,516,3.671,517,2.562,533,2.742,534,2.742,581,2.127,594,2.721,606,2.742,619,4.26,726,3.107,924,2.611,927,3.07,1404,3.044,1405,3.141,1407,1.657,1462,3.853,1466,3.417,1473,2.552,1504,4.608,1505,4.742,1889,5.483,1890,3.263,1892,5.374,1896,5.489,1898,4.69,1901,3.263,1902,3.263,1903,3.263,1904,3.263,2996,4.301,3010,4.856,3011,4.856,3012,4.856,3013,4.856,3014,4.856]],["title/injectables/WorkflowRepository.html",[344,1.029,1533,2.773]],["body/injectables/WorkflowRepository.html",[3,0.073,4,0.055,5,0.055,8,0.779,13,0.959,14,0.156,20,0.972,22,0.354,23,0.301,24,0.008,28,0.265,33,0.073,36,0.943,63,1.331,76,0.547,80,2.273,90,1.323,94,1.508,96,1.477,97,1.239,99,0.935,101,0.006,102,0.006,103,0.064,110,1.251,112,1.302,114,0.71,116,2.273,141,1.66,149,1.54,150,1.83,151,1.826,153,1.854,174,1.54,181,4.166,183,3.543,186,1.225,197,3.269,205,4.374,215,2.686,217,2.977,225,2.774,227,3.983,244,1.517,261,1.943,266,2.566,280,1.127,292,1.016,303,2.131,312,5.204,318,2.686,320,3.251,325,6.498,326,6.498,344,1.477,345,2.019,380,1.825,452,2.01,531,3.676,773,2.019,860,3.31,951,5.204,952,4.91,1192,4.423,1225,2.323,1226,2.255,1239,5.533,1249,3.503,1380,3.669,1410,2.502,1412,3.301,1414,2.402,1415,2.03,1430,2.502,1533,3.983,1618,3.669,1654,5.276,1666,3.821,1697,4.309,1699,2.396,1702,4.166,1713,4.309,3015,4.865,3016,4.865,3017,4.865,3018,4.865,3019,4.865,3020,4.865,3021,4.865,3022,4.865,3023,6.51,3024,6.51,3025,4.865,3026,4.865,3027,4.865,3028,4.865,3029,4.865]],["title/classes/WorkflowResponseDto.html",[103,0.06,281,2.773]],["body/classes/WorkflowResponseDto.html",[3,0.075,4,0.09,5,0.057,8,1.003,10,2.826,13,0.738,14,0.16,15,0.648,22,0.344,23,0.305,24,0.008,28,0.268,33,0.127,36,0.795,37,1.176,64,1.765,67,1.912,70,2.826,76,0.54,90,0.897,96,1.794,101,0.006,102,0.006,103,0.116,105,1.392,112,1.002,267,1.772,278,3.044,280,2.056,281,4.043,284,3.044,287,3.254,296,1.279,309,3.596,314,2.708,315,2.708,318,3.209,320,3.637,370,2.809,371,2.809,407,3.596,408,2.708,409,2.708,410,4.038,411,2.708,412,2.708,413,2.809,450,1.959,463,2.742,491,4.189,509,2.809,510,2.809,511,2.809,512,2.809,513,2.809,514,2.809,516,3.731,517,2.604,533,2.809,534,2.809,581,2.179,594,2.58,606,2.809,619,4.302,726,3.184,924,2.204,927,3.076,1404,3.061,1405,3.154,1407,1.698,1462,3.899,1466,3.473,1473,2.615,1504,4.645,1505,4.775,1889,4.985,1890,3.343,1892,5.522,1896,5.522,1898,4.747,1901,3.343,1902,3.343,1903,3.343,1904,3.343,3030,4.975,3031,4.975]],["title/controllers/WorkflowsController.html",[256,1.931,3032,3.673]],["body/controllers/WorkflowsController.html",[3,0.058,4,0.044,5,0.044,8,0.969,14,0.123,20,0.896,22,0.345,23,0.319,24,0.008,28,0.281,33,0.058,36,0.968,41,1.154,63,1.21,64,1.447,76,0.582,87,0.988,94,1.737,97,1.29,99,1.243,101,0.005,102,0.005,103,0.051,112,1.184,114,0.646,141,1.885,147,1.237,148,1.514,150,1.699,151,1.776,153,1.78,174,0.909,186,1.039,204,1.801,215,2.744,216,2.072,221,3.604,225,2.757,226,3.243,251,1.441,256,1.637,258,1.637,260,2.255,261,1.649,266,3.43,267,2.093,274,4.088,280,2.145,290,3.007,291,3.851,292,0.802,293,2.169,294,4.54,295,5.27,296,0.988,303,1.682,304,1.252,306,4.407,307,2.262,380,2.072,450,1.606,452,1.513,454,3.621,531,3.994,557,3.38,623,2.954,624,3.535,758,5.108,769,2.725,774,2.458,951,4.589,1024,1.637,1254,3.311,1344,2.897,1345,3.918,1347,3.402,1367,6.266,1399,2.809,1412,3.155,1414,2.231,1415,1.723,1496,5.146,1506,5.266,1507,4.796,1508,3.535,1517,3.113,1619,5.336,1623,5.018,1641,4.166,1643,4.589,1644,2.897,1732,5.243,2226,3.113,2243,3.402,2244,3.113,2368,2.897,2509,4.879,2822,3.402,3032,4.477,3033,3.841,3034,3.841,3035,6.469,3036,3.841,3037,3.841,3038,6.469,3039,3.841,3040,3.841,3041,3.841,3042,3.841,3043,3.841,3044,3.841,3045,3.841,3046,3.841,3047,3.841,3048,3.841,3049,3.841,3050,3.841,3051,5.524,3052,3.841,3053,3.841,3054,3.841,3055,3.841,3056,3.841,3057,3.841,3058,3.841,3059,3.841,3060,6.469,3061,3.402,3062,3.841,3063,3.841,3064,4.589,3065,3.402,3066,3.841,3067,3.841,3068,6.469,3069,3.841,3070,3.841,3071,7.074,3072,3.841,3073,7.495,3074,5.524,3075,3.841,3076,3.841,3077,3.841,3078,3.841,3079,3.841,3080,3.841,3081,3.841,3082,3.841,3083,3.841,3084,3.841,3085,3.841,3086,3.841,3087,3.841]],["title/modules/WorkflowsModule.html",[327,1.62,716,3.214]],["body/modules/WorkflowsModule.html",[3,0.099,4,0.075,5,0.075,24,0.008,28,0.322,33,0.099,101,0.007,102,0.007,103,0.087,258,3.355,292,1.371,327,3.015,329,3.135,330,3.043,331,3.338,332,3.338,333,3.338,334,3.798,335,4.288,339,4.003,340,3.338,341,3.043,712,5.127,716,6.673,718,5.291,725,4.412,2414,6.441,3032,6.835,3064,6.697,3065,5.815,3088,5.815,3089,6.566,3090,5.815,3091,5.815,3092,6.566,3093,6.566,3094,6.566]],["title/injectables/WorkflowsService.html",[344,1.029,3064,3.214]],["body/injectables/WorkflowsService.html",[3,0.056,4,0.042,5,0.042,8,0.82,13,0.603,14,0.119,20,0.951,22,0.355,23,0.295,24,0.008,28,0.251,33,0.056,36,0.839,38,1.362,41,1.823,58,3.139,62,2.776,63,1.235,76,0.587,79,1.019,80,1.299,90,1.543,91,0.913,94,1.715,96,0.844,97,1.123,99,1.567,101,0.005,102,0.005,103,0.049,110,1.388,112,1.208,114,0.659,116,1.299,127,2.806,134,1.724,137,1.269,138,1.629,141,1.269,147,1.224,149,1.649,150,1.681,151,1.768,153,1.769,161,2.826,174,2.046,186,1.642,197,2.5,204,1.213,215,2.552,217,2.276,221,3.052,244,2.308,261,1.611,271,2.744,274,1.891,280,2.023,292,0.777,307,0.977,318,2.826,320,3.203,344,1.225,345,1.544,347,2.326,380,1.395,437,1.362,452,1.741,489,1.43,492,3.303,531,2.1,621,1.675,623,2.504,652,2.072,773,1.544,951,4.506,955,2.502,1024,3.476,1046,3.231,1139,2.5,1170,4.792,1217,2.806,1254,2.679,1410,1.43,1412,2.992,1414,2.207,1415,1.683,1431,1.675,1496,4.94,1506,5.096,1507,2.38,1508,2.38,1532,4.335,1533,4.724,1623,5.25,1643,3.829,1644,2.806,1732,4.375,1745,4.781,1760,2.806,1765,4.506,1768,3.295,1775,3.295,1778,6.173,2112,3.015,2113,2.806,2126,3.295,2396,3.454,2418,5.649,2446,5.649,2494,3.295,2498,3.295,2509,4.071,2894,5.627,2923,6.173,2924,6.173,2925,6.173,2926,6.173,2927,6.173,2929,6.173,2933,3.295,2934,3.295,3061,3.295,3064,3.829,3095,3.72,3096,3.72,3097,3.72,3098,3.72,3099,3.72,3100,3.72,3101,3.72,3102,3.72,3103,3.72,3104,5.398,3105,3.72,3106,3.72,3107,3.72,3108,3.72,3109,3.72,3110,3.72,3111,3.72,3112,5.398,3113,5.398,3114,5.398,3115,3.72,3116,3.72,3117,6.97,3118,6.97,3119,3.72,3120,3.72,3121,3.72,3122,3.72,3123,3.72,3124,3.72,3125,6.97,3126,3.72,3127,3.72,3128,3.72,3129,3.72,3130,3.72,3131,3.72,3132,3.72,3133,3.72,3134,5.398,3135,3.72,3136,3.72,3137,3.72,3138,3.72]],["title/dependencies.html",[330,2.529,400,2.537]],["body/dependencies.html",[9,3.323,24,0.008,101,0.007,102,0.007,103,0.106,243,2.015,292,1.41,296,1.736,330,3.128,391,4.787,392,4.535,393,3.323,396,4.535,399,4.319,402,4.13,581,2.956,720,5.978,722,3.962,724,5.47,773,2.801,806,3.223,835,5.47,917,4.787,1407,2.303,1936,6.487,1937,5.47,3139,8.533,3140,6.749,3141,6.749,3142,6.749,3143,6.749,3144,6.749,3145,6.749,3146,8.004,3147,6.749,3148,6.749,3149,6.749,3150,6.749,3151,6.749,3152,6.749,3153,6.749,3154,6.749,3155,6.749,3156,6.749,3157,6.749,3158,6.749,3159,6.749,3160,6.749,3161,6.749,3162,6.749,3163,6.749]],["title/miscellaneous/enumerations.html",[3164,2.537,3165,4.832]],["body/miscellaneous/enumerations.html",[4,0.062,6,3.2,7,4.806,11,2.825,12,2.794,13,0.609,14,0.175,17,2.836,22,0.267,23,0.239,24,0.008,29,3.159,30,3.078,31,2.765,32,3.2,35,3.251,36,0.844,37,1.112,38,2.568,39,1.842,40,2.927,41,1.465,42,2.631,43,4.117,44,2.91,45,3.227,46,3.687,47,3.566,48,4.117,49,4.117,50,3.2,51,3.2,52,2.148,55,3.251,57,3.2,58,2.455,59,2.455,60,3.96,61,3.91,101,0.006,102,0.006,166,2.631,170,2.836,276,2.764,280,1.625,380,3.622,401,3.687,440,3.866,442,3.2,478,3.663,540,4.975,545,1.694,548,3.251,552,4.292,557,4.292,561,4.292,567,4.488,570,4.488,574,4.975,581,3.072,583,4.488,585,4.488,588,4.975,591,4.975,594,1.663,621,3.159,1060,4.828,1061,4.488,1065,3.866,1068,4.418,1069,4.111,1070,4.418,1449,3.349,1457,2.262,2155,3.2,2207,3.335,2543,3.866,2544,4.713,2545,4.975,3164,3.663,3165,4.828,3166,6.212,3167,5.451,3168,5.451,3169,5.451,3170,7.014,3171,7.014,3172,7.014,3173,7.014,3174,7.014,3175,7.014,3176,7.014,3177,5.451,3178,5.451,3179,5.451]],["title/index.html",[14,0.121,1399,1.919,3180,3.775]],["body/index.html",[5,0.072,24,0.007,36,0.927,41,1.935,52,3.035,63,1.287,64,1.698,76,0.53,92,3.635,94,1.466,97,0.96,101,0.007,102,0.007,141,3.021,183,3.444,246,5.174,247,3.116,248,2.771,251,3.113,280,2.147,290,4.701,307,2.022,330,2.933,442,3.715,496,1.848,556,2.933,594,2.701,616,4.049,819,4.773,1024,2.697,1028,2.558,1031,2.697,1038,2.933,1044,3.022,1198,5.462,1214,5.462,1226,2.933,1414,1.809,1415,1.973,1430,3.32,1627,5.578,1645,5.128,1681,4.252,1691,5.605,1692,5.605,1731,5.128,1736,5.605,1737,5.605,1738,5.128,1805,5.605,1829,6.241,2041,5.128,3181,6.328,3182,6.328,3183,6.328,3184,7.701,3185,6.328,3186,6.328,3187,7.701,3188,7.701,3189,6.328,3190,6.328,3191,6.328,3192,6.328,3193,6.328,3194,6.328,3195,6.328,3196,6.328,3197,6.328,3198,6.328,3199,6.328,3200,6.328,3201,6.328,3202,7.701,3203,6.328]],["title/modules.html",[329,2.963]],["body/modules.html",[24,0.007,101,0.007,102,0.007,328,4.878,329,3.284,705,5.187,708,4.878,709,4.878,710,4.878,711,4.878,712,3.883,713,4.878,714,4.878,715,4.878,716,4.878,2414,4.878,3204,9.493,3205,9.493,3206,9.493,3207,9.493]],["title/overview.html",[539,4.169]],["body/overview.html",[2,1.084,24,0.008,101,0.006,102,0.006,105,1.337,258,2.036,297,5.227,327,1.708,328,5.929,329,2.282,330,2.215,331,2.429,332,2.429,333,2.429,334,2.152,335,2.429,336,4.232,337,4.232,338,4.232,339,3.27,340,2.429,341,2.215,345,1.983,539,3.211,705,7.076,706,4.232,707,4.232,708,6.485,709,5.929,710,6.16,711,5.929,712,5.298,713,6.485,714,5.929,715,6.363,716,6.308,737,6.059,771,4.823,772,5.865,910,4.232,911,4.232,912,4.232,914,5.157,937,5.015,989,6.059,1004,4.232,1005,4.232,1006,4.232,1192,4.823,1196,5.466,1372,4.232,1374,4.232,1375,4.232,1518,6.059,1525,4.232,1526,4.232,1527,4.232,1532,4.65,1533,5.227,1612,4.232,1613,4.232,1614,4.232,1615,4.976,1616,5.225,1635,3.872,1717,4.232,1719,4.232,1720,4.232,1721,6.443,1722,6.443,1723,6.443,2239,6.059,2261,4.232,2262,4.232,2263,4.232,2414,5.929,2415,4.232,2416,4.232,2417,4.232,2418,6.059,2599,6.059,2613,4.232,2614,4.232,2615,4.232,2617,6.059,3064,6.059,3088,4.232,3090,4.232,3091,4.232,3208,4.778,3209,4.778,3210,4.778,3211,4.778]],["title/properties.html",[15,0.535,400,2.537]],["body/properties.html",[8,0.786,15,0.726,24,0.008,52,2.916,84,4.178,101,0.007,102,0.007,819,5.58,1198,5.248,3212,7.399]],["title/miscellaneous/typealiases.html",[3164,2.537,3213,5.456]],["body/miscellaneous/typealiases.html",[14,0.211,23,0.269,24,0.008,31,2.099,41,1.375,44,3.272,55,3.051,101,0.007,102,0.007,145,4.826,147,1.043,280,1.525,555,4.212,652,2.146,754,3.583,897,4.423,899,3.051,906,4.292,1022,4.423,1029,5.299,1030,2.883,1031,2.805,1032,2.805,1061,4.212,1065,4.669,2706,4.965,2712,5.948,2713,4.965,2714,5.948,2715,4.965,2717,5.948,2907,5.83,2915,6.985,2916,5.83,2917,6.985,2918,5.83,2919,6.985,3164,4.423,3166,5.83,3214,6.583,3215,8.443,3216,7.886,3217,8.443,3218,6.583,3219,7.886,3220,7.886,3221,7.886,3222,7.886,3223,7.886,3224,8.949,3225,7.886,3226,7.886,3227,7.886,3228,7.886,3229,8.443,3230,6.583,3231,6.583,3232,6.583,3233,6.583,3234,6.583,3235,6.583,3236,6.583,3237,6.583]],["title/miscellaneous/variables.html",[2050,4.421,3164,2.537]],["body/miscellaneous/variables.html",[4,0.043,5,0.062,8,0.92,12,2.182,13,0.849,14,0.075,16,3.755,19,2.52,20,0.696,21,1.078,22,0.256,23,0.313,24,0.008,31,0.741,34,1.544,36,0.57,38,0.851,39,0.988,40,2.136,41,0.486,42,1.411,45,2.144,52,0.916,53,2.2,55,2.769,58,1.047,59,1.047,60,2.124,61,3.053,63,0.844,67,0.894,69,3.883,70,1.345,76,0.24,77,0.94,90,0.678,91,0.636,96,1.451,99,1.461,101,0.003,102,0.003,114,0.45,115,2.038,116,2.233,117,3.572,122,2.898,126,2.668,133,1.222,141,3.048,149,0.411,163,0.872,166,0.872,180,1.099,215,0.851,225,2.018,231,1.365,232,4.89,243,1.123,248,1.647,250,1.078,251,2.241,253,1.182,276,1.867,280,0.539,290,3.252,291,3.252,318,0.851,320,0.965,346,1.649,380,3.36,387,1.562,395,4.773,396,1.562,401,1.222,403,2.668,404,1.649,405,1.649,406,1.649,407,1.266,408,1.266,409,1.266,410,1.266,411,1.266,412,1.266,414,2.668,415,6.276,416,2.668,417,5.272,418,2.668,419,3.359,420,1.649,421,6.37,422,1.562,423,1.649,424,1.649,425,1.649,426,1.649,427,2.674,428,1.649,429,2.668,430,1.649,431,2.668,451,1.365,452,1.03,453,1.488,454,1.047,459,3.031,466,2.301,469,1.852,471,2.527,476,1.488,479,2.598,529,3.194,531,2.674,541,2.527,542,1.562,543,1.562,544,3.182,545,1.144,546,3.141,547,1.694,548,1.078,549,1.562,550,1.562,552,2.301,553,2.407,555,2.407,556,2.195,557,2.301,562,2.527,563,4.015,564,1.562,565,2.578,567,2.407,568,1.562,569,1.562,570,1.488,571,1.562,572,1.423,573,1.562,575,2.961,577,1.11,579,3.345,581,1.018,582,1.562,583,1.488,584,1.562,585,2.407,586,2.527,589,1.488,590,1.266,592,1.313,604,5.034,618,1.649,621,1.694,626,1.562,651,1.562,746,1.11,754,3.939,762,1.365,770,4.086,771,4.086,774,2.407,788,1.754,830,1.884,840,4.104,854,3.48,905,1.047,1044,1.796,1045,4.091,1046,1.078,1048,1.11,1059,2.059,1061,3.482,1064,6.082,1065,2.668,1066,1.649,1067,1.562,1068,1.884,1069,1.754,1070,1.884,1071,2.668,1072,2.059,1073,4.195,1074,2.059,1075,3.359,1076,2.059,1077,2.059,1078,4.195,1079,3.859,1080,2.059,1081,3.331,1082,2.059,1083,3.331,1084,4.195,1085,5.496,1086,2.059,1087,4.195,1088,4.195,1089,4.195,1090,2.059,1091,5.181,1092,2.059,1093,2.301,1094,4.195,1095,2.059,1096,3.331,1097,3.048,1098,2.059,1099,4.195,1100,4.195,1101,4.773,1102,4.195,1103,2.059,1104,2.837,1105,3.331,1106,3.048,1107,3.048,1108,4.195,1109,2.059,1110,2.059,1111,4.819,1112,5.662,1113,3.331,1114,1.884,1115,4.195,1116,3.331,1117,2.059,1118,4.195,1119,2.059,1120,2.059,1121,4.195,1122,2.059,1123,2.059,1124,4.195,1125,2.059,1126,3.331,1127,4.819,1128,1.796,1129,3.331,1130,4.195,1131,4.195,1132,3.331,1133,4.819,1134,3.331,1135,3.331,1136,4.195,1137,2.059,1138,3.331,1139,1.562,1140,3.331,1141,3.331,1142,4.195,1143,2.059,1144,2.059,1145,4.195,1146,3.331,1147,3.331,1148,4.195,1149,4.195,1150,2.059,1151,3.331,1152,4.195,1153,5.662,1154,1.754,1155,2.668,1156,4.195,1157,2.059,1158,4.195,1159,2.059,1160,1.423,1161,4.195,1162,1.649,1171,1.488,1254,0.894,1344,3.572,1411,1.222,1415,0.725,1431,1.047,1448,1.11,1457,0.965,1470,1.266,1483,1.488,1493,1.423,1532,2.578,1533,3.912,1575,1.313,1576,3.048,1624,1.754,1626,1.884,1810,3.331,1821,3.331,1829,1.884,1842,2.059,1926,3.331,1945,1.754,2033,1.884,2034,2.059,2041,1.884,2050,1.884,2051,3.331,2052,2.059,2053,1.754,2077,3.331,2296,1.884,2302,3.048,2303,3.048,2304,3.048,2421,2.059,2443,3.331,2444,2.059,2445,2.059,2446,1.884,2448,4.819,2449,2.059,2450,4.819,2451,2.059,2454,4.195,2455,2.059,2456,4.195,2457,2.059,2459,4.195,2460,2.059,2462,3.331,2463,5.292,2464,3.331,2465,3.331,2466,2.059,2467,2.059,2468,3.331,2674,2.059,2777,1.754,2778,1.754,3164,1.562,3238,7.237,3239,3.761,3240,3.761,3241,2.325,3242,3.761,3243,2.325,3244,7.237,3245,4.736,3246,3.761,3247,3.761,3248,3.761,3249,2.325,3250,3.761,3251,2.325,3252,2.325,3253,2.325,3254,2.325,3255,2.325,3256,2.325,3257,2.325,3258,2.325,3259,2.325,3260,7.748,3261,2.325,3262,2.325,3263,2.325,3264,2.325,3265,2.325,3266,2.325,3267,2.325,3268,2.325,3269,2.325,3270,2.325,3271,2.325,3272,3.761,3273,3.761,3274,2.325,3275,2.325,3276,2.325,3277,2.325,3278,2.325,3279,2.325,3280,2.325,3281,2.325,3282,2.325,3283,2.325,3284,2.325,3285,4.736,3286,4.736,3287,2.325,3288,4.736,3289,2.325,3290,3.761,3291,2.325,3292,3.761,3293,2.325,3294,4.736,3295,2.325,3296,2.325,3297,2.325,3298,2.325,3299,2.325,3300,2.325,3301,3.761,3302,2.325,3303,2.325,3304,2.325,3305,2.325,3306,2.325,3307,2.325,3308,5.441,3309,2.325,3310,2.325,3311,2.325,3312,2.325,3313,2.325,3314,2.325,3315,2.325,3316,2.325,3317,2.325,3318,2.325,3319,2.325,3320,2.325,3321,2.325,3322,2.325,3323,2.325,3324,2.325,3325,2.325,3326,2.325,3327,2.325,3328,2.325,3329,2.325,3330,2.325,3331,2.325,3332,2.325,3333,3.761,3334,2.325,3335,2.325,3336,2.325,3337,2.325,3338,2.325,3339,2.325,3340,3.761,3341,2.325,3342,2.325,3343,2.325,3344,2.325,3345,5.441,3346,2.325,3347,2.325,3348,2.325,3349,4.736,3350,2.325,3351,3.761,3352,3.761,3353,2.325,3354,2.325,3355,2.325,3356,2.325,3357,3.761,3358,2.325,3359,3.761,3360,3.761,3361,3.761,3362,2.325,3363,3.761,3364,2.325,3365,2.325,3366,2.325,3367,2.325,3368,2.325,3369,2.325,3370,2.325,3371,2.325,3372,2.325,3373,2.325,3374,2.325,3375,2.325,3376,2.325,3377,2.325,3378,2.325,3379,2.325,3380,3.761,3381,2.325,3382,2.325,3383,2.325,3384,2.325,3385,3.761,3386,4.736,3387,3.761,3388,2.325,3389,2.325,3390,2.325,3391,2.325,3392,2.325,3393,2.325,3394,2.325]]],"invertedIndex":[["",{"_index":24,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":496,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"injectables/DashboardService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateExecutionDto.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"index.html":{}}}],["0.1",{"_index":499,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["0.1.0",{"_index":3212,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":3159,"title":{},"body":{"dependencies.html":{}}}],["0.10.3",{"_index":3149,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":3153,"title":{},"body":{"dependencies.html":{}}}],["0.3",{"_index":481,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["0.5.1",{"_index":3152,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":3156,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":3145,"title":{},"body":{"dependencies.html":{}}}],["09:00",{"_index":1098,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":452,"title":{"interfaces/JwtPayload-1.html":{},"interfaces/MagicAuthPayload-1.html":{}},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["1.4.7",{"_index":3155,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1415,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"classes/JwtService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["10.0.0",{"_index":3139,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1575,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":845,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"interfaces/MagicAuthPayload.html":{}}}],["10000",{"_index":1114,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":3208,"title":{},"body":{"overview.html":{}}}],["11.0.0",{"_index":3141,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3142,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":1635,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"overview.html":{}}}],["12000",{"_index":500,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["19",{"_index":3209,"title":{},"body":{"overview.html":{}}}],["1].id",{"_index":2317,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["1d",{"_index":1994,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["2",{"_index":444,"title":{"interfaces/JwtPayload-2.html":{}},"body":{"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"injectables/QueueService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["20",{"_index":827,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["200",{"_index":273,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/BillingController.html":{},"controllers/DashboardController.html":{},"interfaces/GenerationOptions.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["2000",{"_index":1082,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["201",{"_index":2824,"title":{},"body":{"controllers/WalletsController.html":{}}}],["2024",{"_index":1634,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["24",{"_index":843,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["24h",{"_index":749,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["25t10:00:00.000z",{"_index":1636,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["3",{"_index":459,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"injectables/QueueService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["3.1.1",{"_index":3140,"title":{},"body":{"dependencies.html":{}}}],["3.22.0",{"_index":3163,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":842,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["30d",{"_index":823,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["3600",{"_index":947,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["4",{"_index":462,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["4.0.1",{"_index":3157,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":3147,"title":{},"body":{"dependencies.html":{}}}],["4000",{"_index":483,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["42",{"_index":3210,"title":{},"body":{"overview.html":{}}}],["46",{"_index":3211,"title":{},"body":{"overview.html":{}}}],["4o",{"_index":405,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":466,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["50",{"_index":693,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["6",{"_index":470,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["6.0.0",{"_index":3151,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":844,"title":{},"body":{"controllers/AuthController.html":{},"injectables/DashboardService.html":{},"interfaces/MagicAuthPayload.html":{}}}],["7",{"_index":473,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/RefreshToken.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["7.1.16",{"_index":3144,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":3161,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1117,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["8601",{"_index":1632,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["9",{"_index":1628,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["9.0.0",{"_index":3162,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":1180,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["__secure",{"_index":832,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["_count",{"_index":3024,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["_userid",{"_index":2766,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["a.label.localecompare(b.label",{"_index":1211,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["a.time",{"_index":1831,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["a.timestamp.localecompare(b.timestamp",{"_index":1860,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["above",{"_index":1080,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["abs",{"_index":3305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abstract",{"_index":131,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["access",{"_index":107,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NodeExecution.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/RegisterDto.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["accessdeniederror",{"_index":104,"title":{"classes/AccessDeniedError.html":{}},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/Workflow.html":{}}}],["accessdeniederror(\"access",{"_index":2979,"title":{},"body":{"interfaces/Workflow.html":{}}}],["accessdeniederror(result.message",{"_index":162,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["accesstoken",{"_index":812,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{}}}],["accomplishes",{"_index":643,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["account",{"_index":2874,"title":{},"body":{"injectables/WalletsService.html":{}}}],["action",{"_index":166,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":556,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["active",{"_index":2687,"title":{},"body":{"injectables/UserService.html":{}}}],["activeworkflows",{"_index":1560,"title":{},"body":{"injectables/DashboardService.html":{}}}],["actual",{"_index":1879,"title":{},"body":{"injectables/ExecutionsService.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Workflow.html":{}}}],["adapter",{"_index":2549,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["add",{"_index":53,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["addcronexecutionjob",{"_index":2423,"title":{},"body":{"injectables/QueueService.html":{}}}],["addcronexecutionjob(executionid",{"_index":2429,"title":{},"body":{"injectables/QueueService.html":{}}}],["added",{"_index":1043,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["addexecutionjob",{"_index":2424,"title":{},"body":{"injectables/QueueService.html":{}}}],["addexecutionjob(executionid",{"_index":2431,"title":{},"body":{"injectables/QueueService.html":{}}}],["adding",{"_index":640,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["additional",{"_index":250,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateWalletDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/Workflow.html":{},"miscellaneous/variables.html":{}}}],["address",{"_index":1128,"title":{},"body":{"interfaces/BlockMetadata.html":{},"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/variables.html":{}}}],["address'})@isstring",{"_index":1458,"title":{},"body":{"classes/CreateWalletDto.html":{}}}],["addscheduledexecutionjob",{"_index":2425,"title":{},"body":{"injectables/QueueService.html":{}}}],["addscheduledexecutionjob(executionid",{"_index":2433,"title":{},"body":{"injectables/QueueService.html":{}}}],["adjust",{"_index":682,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["adjustednewnodes",{"_index":689,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["admin",{"_index":199,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"classes/MagicService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["agenda",{"_index":2518,"title":{},"body":{"injectables/QueueService.html":{}}}],["aggregate",{"_index":584,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["aggregator",{"_index":583,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["ai",{"_index":9,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"dependencies.html":{}}}],["ai'})@apiresponse({status",{"_index":272,"title":{},"body":{"controllers/AiController.html":{}}}],["ai.controller",{"_index":343,"title":{},"body":{"modules/AiModule.html":{}}}],["ai.service",{"_index":298,"title":{},"body":{"controllers/AiController.html":{},"modules/AiModule.html":{}}}],["ai/ai.module",{"_index":734,"title":{},"body":{"modules/AppModule.html":{}}}],["aicontroller",{"_index":257,"title":{"controllers/AiController.html":{}},"body":{"controllers/AiController.html":{},"modules/AiModule.html":{}}}],["aicustomblockdata",{"_index":1,"title":{"interfaces/AICustomBlockData.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["aimodule",{"_index":328,"title":{"modules/AiModule.html":{}},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["aiservice",{"_index":297,"title":{"injectables/AiService.html":{}},"body":{"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"overview.html":{}}}],["alias",{"_index":2785,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["aliases",{"_index":3214,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allexecutions",{"_index":1552,"title":{},"body":{"injectables/DashboardService.html":{}}}],["allexecutions.filter",{"_index":1555,"title":{},"body":{"injectables/DashboardService.html":{}}}],["allow",{"_index":2749,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["allowed",{"_index":2335,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["allows",{"_index":156,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["already",{"_index":2763,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{}}}],["alternative",{"_index":1626,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["amount",{"_index":1494,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"injectables/WalletsService.html":{}}}],["amoy",{"_index":3351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amqp",{"_index":2474,"title":{},"body":{"injectables/QueueService.html":{}}}],["amqp.connect(rabbitmq_url",{"_index":2476,"title":{},"body":{"injectables/QueueService.html":{}}}],["amqp://guest:guest@localhost:5672",{"_index":2445,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["amqplib",{"_index":3148,"title":{},"body":{"dependencies.html":{}}}],["analyze",{"_index":453,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["animated",{"_index":430,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["another",{"_index":2873,"title":{},"body":{"injectables/WalletsService.html":{}}}],["any).nodeinputs?.[0]?.inputdata",{"_index":2110,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["any)?.blocktype",{"_index":660,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["any)?.config",{"_index":665,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["any)?.description",{"_index":662,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["any)?.iconname",{"_index":664,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["any)?.label",{"_index":661,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["any)?.nodetype",{"_index":663,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["api",{"_index":52,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"controllers/BlocksController.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/QueueService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api/docs",{"_index":3203,"title":{},"body":{"index.html":{}}}],["api/executions",{"_index":3194,"title":{},"body":{"index.html":{}}}],["api/executions/:id/cancel",{"_index":3199,"title":{},"body":{"index.html":{}}}],["api/executions/:id/pause",{"_index":3200,"title":{},"body":{"index.html":{}}}],["api/executions/:id/resume",{"_index":3201,"title":{},"body":{"index.html":{}}}],["api/executions/:id/retry",{"_index":3198,"title":{},"body":{"index.html":{}}}],["api/executions/:path",{"_index":3254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/executions/node",{"_index":3197,"title":{},"body":{"index.html":{}}}],["api/executions/nodes",{"_index":3196,"title":{},"body":{"index.html":{}}}],["api/workflows/:path",{"_index":3253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":1345,"title":{},"body":{"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["apikey",{"_index":433,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["apioperation",{"_index":294,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["apiproperty",{"_index":927,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/LoginDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["apiproperty({description",{"_index":924,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/LoginDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["apiproperty({type",{"_index":2321,"title":{},"body":{"classes/PaginatedWorkflowsResponseDto.html":{}}}],["apiquery",{"_index":3060,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["apiresponse",{"_index":295,"title":{},"body":{"controllers/AiController.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["apis",{"_index":566,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["apitags",{"_index":293,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["apitags(\"ai",{"_index":301,"title":{},"body":{"controllers/AiController.html":{}}}],["apitags(\"auth",{"_index":781,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["apitags(\"billing",{"_index":991,"title":{},"body":{"controllers/BillingController.html":{}}}],["apitags(\"blocks",{"_index":1348,"title":{},"body":{"controllers/BlocksController.html":{}}}],["apitags(\"dashboard",{"_index":1520,"title":{},"body":{"controllers/DashboardController.html":{}}}],["apitags(\"notifications",{"_index":2241,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["apitags(\"user",{"_index":2602,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags(\"user/wallets",{"_index":2837,"title":{},"body":{"controllers/WalletsController.html":{}}}],["apitags(\"workflows",{"_index":3066,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["app_guard",{"_index":723,"title":{},"body":{"modules/AppModule.html":{}}}],["append",{"_index":3382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":3182,"title":{},"body":{"index.html":{}}}],["apply",{"_index":249,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["applypagination",{"_index":2152,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["applypagination(query",{"_index":2169,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["appmodule",{"_index":705,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":458,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["apps/api",{"_index":3186,"title":{},"body":{"index.html":{}}}],["arbitrum",{"_index":3347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arithmetic",{"_index":568,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["array",{"_index":39,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["array.from(heatmapmap.entries()).map(([date",{"_index":1882,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["array.from(trendsmap.entries",{"_index":1856,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["array.isarray(dbblock.tags",{"_index":1281,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["arrays",{"_index":636,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["asc",{"_index":1693,"title":{},"body":{"injectables/ExecutionRepository.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["assert",{"_index":2478,"title":{},"body":{"injectables/QueueService.html":{}}}],["assertion",{"_index":1778,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/WorkflowsService.html":{}}}],["asset",{"_index":1078,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["associated",{"_index":2723,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["assumes",{"_index":2738,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["async",{"_index":151,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["async/await",{"_index":467,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["asynchronous",{"_index":468,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["attached",{"_index":1953,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["audit",{"_index":164,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["auditenabled",{"_index":129,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["auth",{"_index":754,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":918,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":739,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":1911,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:11",{"_index":1917,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:16",{"_index":1920,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:29",{"_index":1922,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.middleware.ts",{"_index":3240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth.service",{"_index":919,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.session",{"_index":834,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{}}}],["auth/auth.module",{"_index":727,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/decorators/public.decorator",{"_index":1347,"title":{},"body":{"controllers/BlocksController.html":{},"controllers/WorkflowsController.html":{}}}],["auth/guards/jwt",{"_index":738,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/invalid",{"_index":2066,"title":{},"body":{"classes/MagicService.html":{}}}],["authcontroller",{"_index":752,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/MagicAuthPayload.html":{}}}],["authentication",{"_index":790,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/Session.html":{}}}],["autherror",{"_index":896,"title":{"classes/AuthError.html":{}},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/Session.html":{}}}],["authguard",{"_index":1925,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":1912,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":708,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authorization",{"_index":1942,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/Workflow.html":{}}}],["authresponsedto",{"_index":922,"title":{"classes/AuthResponseDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["authresult",{"_index":908,"title":{"interfaces/AuthResult.html":{}},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["authservice",{"_index":771,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/TokenResponse.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["authuser",{"_index":906,"title":{"interfaces/AuthUser.html":{}},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"miscellaneous/typealiases.html":{}}}],["automation",{"_index":526,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["available",{"_index":442,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"controllers/BlocksController.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["avatarurl",{"_index":2638,"title":{},"body":{"injectables/UserRepository.html":{}}}],["average",{"_index":1576,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"miscellaneous/variables.html":{}}}],["averageduration",{"_index":1608,"title":{},"body":{"injectables/DashboardService.html":{}}}],["avgduration",{"_index":1798,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["avgdurationms",{"_index":1587,"title":{},"body":{"injectables/DashboardService.html":{}}}],["avoid",{"_index":684,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["await",{"_index":174,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/NotificationsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["b",{"_index":1210,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/ExecutionsService.html":{}}}],["b.time",{"_index":1832,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["back",{"_index":140,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["backend",{"_index":3181,"title":{},"body":{"index.html":{}}}],["backward",{"_index":1948,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["balance",{"_index":2557,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["balances",{"_index":576,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["base",{"_index":126,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/Workflow.html":{},"miscellaneous/variables.html":{}}}],["base.repository",{"_index":2150,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["base64",{"_index":3360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base64\").tostring",{"_index":2062,"title":{},"body":{"classes/MagicService.html":{}}}],["base_sepolia",{"_index":3350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":247,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"index.html":{}}}],["baserepository",{"_index":132,"title":{"classes/BaseRepository.html":{}},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["baserepositoryoptions",{"_index":128,"title":{"interfaces/BaseRepositoryOptions.html":{}},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["baseurl",{"_index":435,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["basic",{"_index":188,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["batches",{"_index":2190,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["batchsize",{"_index":2191,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["bcrypt",{"_index":3150,"title":{},"body":{"dependencies.html":{}}}],["before",{"_index":1422,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["behavior",{"_index":824,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["being",{"_index":1425,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["bell",{"_index":1090,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["belongs",{"_index":1437,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/Workflow.html":{},"classes/WorkflowExecutionDto.html":{}}}],["below",{"_index":3262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":1904,"title":{},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["between",{"_index":555,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["billing",{"_index":976,"title":{},"body":{"controllers/BillingController.html":{}}}],["billing.controller",{"_index":1008,"title":{},"body":{"modules/BillingModule.html":{}}}],["billing.service",{"_index":990,"title":{},"body":{"controllers/BillingController.html":{},"modules/BillingModule.html":{}}}],["billing/billing.module",{"_index":733,"title":{},"body":{"modules/AppModule.html":{}}}],["billingcontroller",{"_index":974,"title":{"controllers/BillingController.html":{}},"body":{"controllers/BillingController.html":{},"modules/BillingModule.html":{}}}],["billingmodule",{"_index":709,"title":{"modules/BillingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BillingModule.html":{},"modules.html":{},"overview.html":{}}}],["billingservice",{"_index":989,"title":{"injectables/BillingService.html":{}},"body":{"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"overview.html":{}}}],["binance",{"_index":3267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["binary\"]).default(\"utf8",{"_index":3361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["block",{"_index":12,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["block')@apioperation({summary",{"_index":269,"title":{},"body":{"controllers/AiController.html":{}}}],["block.ts",{"_index":7,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["block_catalog",{"_index":1071,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"miscellaneous/variables.html":{}}}],["block_catalog[blocktype",{"_index":1164,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["block_catalog[blocktypekey",{"_index":1202,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blockchain",{"_index":529,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["blockchain_read",{"_index":574,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["blockchain_write",{"_index":3173,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["blockchaintransaction",{"_index":2708,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["blockchaintransactioncreateinput",{"_index":2714,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/typealiases.html":{}}}],["blockdata",{"_index":1234,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blockdata.inputs",{"_index":1286,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blockdata.outputs",{"_index":1293,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blockexecutioncontext",{"_index":1021,"title":{"interfaces/BlockExecutionContext.html":{}},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["blockhandler",{"_index":1049,"title":{"interfaces/BlockHandler.html":{}},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["blockmetadata",{"_index":1058,"title":{"interfaces/BlockMetadata.html":{}},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blocknumber",{"_index":2778,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/variables.html":{}}}],["blockparameter",{"_index":74,"title":{"interfaces/BlockParameter.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["blocks",{"_index":42,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["blocks.controller",{"_index":1377,"title":{},"body":{"modules/BlocksModule.html":{}}}],["blocks.map(this.mapdatabasetocustomblockdefinition",{"_index":1227,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blocks.service",{"_index":1346,"title":{},"body":{"controllers/BlocksController.html":{},"modules/BlocksModule.html":{}}}],["blocks/blocks.module",{"_index":731,"title":{},"body":{"modules/AppModule.html":{}}}],["blockschemas",{"_index":3242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blockschemas.ts",{"_index":3243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blockscontroller",{"_index":1321,"title":{"controllers/BlocksController.html":{}},"body":{"controllers/BlocksController.html":{},"modules/BlocksModule.html":{}}}],["blocksmodule",{"_index":710,"title":{"modules/BlocksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlocksModule.html":{},"modules.html":{},"overview.html":{}}}],["blocksservice",{"_index":1196,"title":{"injectables/BlocksService.html":{}},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"overview.html":{}}}],["blocktype",{"_index":401,"title":{"interfaces/BlockType.html":{}},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["blocktype.aggregator",{"_index":1142,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.blockchain_read",{"_index":1124,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.blockchain_write",{"_index":1156,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.calculator",{"_index":1115,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.comparator",{"_index":1118,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.condition",{"_index":1100,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.database_query",{"_index":1130,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.database_write",{"_index":1152,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.delay",{"_index":1102,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.email",{"_index":1084,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.file_read",{"_index":1131,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.file_write",{"_index":1158,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.http_call",{"_index":1148,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.http_request",{"_index":1108,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.loop",{"_index":1145,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.magic_wallet",{"_index":3383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blocktype.message_send",{"_index":1149,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.notification",{"_index":1088,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.price_monitor",{"_index":1073,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.schedule",{"_index":1094,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.tolowercase",{"_index":1313,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blocktype.transformer",{"_index":1136,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.unknown",{"_index":1161,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktype.webhook",{"_index":1099,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["blocktypekey",{"_index":1201,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blocktypes",{"_index":1199,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["blocktypes.sort((a",{"_index":1209,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["body",{"_index":291,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"interfaces/BlockMetadata.html":{},"controllers/BlocksController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":37,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/Session.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/enumerations.html":{}}}],["bootstrap",{"_index":333,"title":{},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["both",{"_index":3179,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["branching",{"_index":551,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["breaking",{"_index":2116,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["browse",{"_index":3207,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3204,"title":{},"body":{"modules.html":{}}}],["bsc",{"_index":3348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer",{"_index":985,"title":{},"body":{"controllers/BillingController.html":{},"injectables/BillingService.html":{}}}],["buffer.from(json.stringify(payload",{"_index":2496,"title":{},"body":{"injectables/QueueService.html":{}}}],["buffer.from(parts[1",{"_index":2061,"title":{},"body":{"classes/MagicService.html":{}}}],["build",{"_index":2309,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["bull",{"_index":2517,"title":{},"body":{"injectables/QueueService.html":{}}}],["business",{"_index":2742,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["calculate",{"_index":1601,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["calculations",{"_index":569,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["calculator",{"_index":567,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["calendar",{"_index":1095,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["call",{"_index":589,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"classes/MagicService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["call_contract",{"_index":3340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callbackurl",{"_index":784,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["calls",{"_index":564,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["canactivate",{"_index":1913,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":1918,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["cancel",{"_index":1731,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["cancel(id",{"_index":1740,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["cancelled",{"_index":1782,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["cancelling",{"_index":2511,"title":{},"body":{"injectables/QueueService.html":{}}}],["cancelscheduledjob",{"_index":2426,"title":{},"body":{"injectables/QueueService.html":{}}}],["cancelscheduledjob(executionid",{"_index":2435,"title":{},"body":{"injectables/QueueService.html":{}}}],["capabilities",{"_index":628,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["catalog",{"_index":1066,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":489,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"controllers/UserController.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["categories",{"_index":30,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["categories.ts",{"_index":3168,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["category",{"_index":16,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["causes",{"_index":2737,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["cc",{"_index":3270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cd",{"_index":3185,"title":{},"body":{"index.html":{}}}],["ceil",{"_index":3304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ch",{"_index":2491,"title":{},"body":{"injectables/QueueService.html":{}}}],["ch.checkqueue(execution_delayed_queue",{"_index":2526,"title":{},"body":{"injectables/QueueService.html":{}}}],["ch.checkqueue(execution_dlq",{"_index":2524,"title":{},"body":{"injectables/QueueService.html":{}}}],["ch.checkqueue(execution_queue",{"_index":2520,"title":{},"body":{"injectables/QueueService.html":{}}}],["ch.checkqueue(execution_retry_queue",{"_index":2522,"title":{},"body":{"injectables/QueueService.html":{}}}],["ch.publish",{"_index":2507,"title":{},"body":{"injectables/QueueService.html":{}}}],["ch.sendtoqueue",{"_index":2495,"title":{},"body":{"injectables/QueueService.html":{}}}],["chain",{"_index":1451,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{}}}],["chain_id",{"_index":2552,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["chainid",{"_index":1448,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"miscellaneous/variables.html":{}}}],["chainid.tostring",{"_index":2734,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["chainidstring",{"_index":2733,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["chaintype",{"_index":1449,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"miscellaneous/enumerations.html":{}}}],["change",{"_index":1991,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["change\"]).optional",{"_index":3263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changefromlastweek",{"_index":1611,"title":{},"body":{"injectables/DashboardService.html":{}}}],["changes",{"_index":1602,"title":{},"body":{"injectables/DashboardService.html":{}}}],["changing",{"_index":2750,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["channel",{"_index":1091,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["channels",{"_index":592,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["chart",{"_index":1144,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":155,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"classes/JwtService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{}}}],["checkexecutionaccess",{"_index":2341,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["checkexecutionaccess(executionid",{"_index":2374,"title":{},"body":{"classes/PolicyService.html":{}}}],["checkinterval",{"_index":1083,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["checknodeexecutionaccess",{"_index":2343,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["checknodeexecutionaccess(nodeexecutionid",{"_index":2376,"title":{},"body":{"classes/PolicyService.html":{}}}],["checknotificationaccess",{"_index":2350,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["checknotificationaccess(notificationid",{"_index":2378,"title":{},"body":{"classes/PolicyService.html":{}}}],["checkout",{"_index":981,"title":{},"body":{"controllers/BillingController.html":{}}}],["checkpolicyresult",{"_index":949,"title":{},"body":{"classes/BaseRepository.html":{}}}],["checkpolicyresult(result",{"_index":158,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["checkteamaccess",{"_index":2346,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["checkteamaccess(teamid",{"_index":2380,"title":{},"body":{"classes/PolicyService.html":{}}}],["checkwalletaccess",{"_index":2353,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["checkwalletaccess(walletid",{"_index":2382,"title":{},"body":{"classes/PolicyService.html":{}}}],["checkworkflowaccess",{"_index":2338,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["checkworkflowaccess(workflowid",{"_index":2384,"title":{},"body":{"classes/PolicyService.html":{}}}],["circle",{"_index":1162,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":103,"title":{"classes/AccessDeniedError.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"classes/BaseRepository.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/JwtService.html":{},"classes/LoginDto.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}},"body":{"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{},"dependencies.html":{}}}],["classes",{"_index":105,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"classes/BaseRepository.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/JwtService.html":{},"classes/LoginDto.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"overview.html":{}}}],["clause",{"_index":2748,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["clean",{"_index":851,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["cleanedtext",{"_index":484,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["clear",{"_index":602,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["client",{"_index":119,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"classes/JwtService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Workflow.html":{}}}],["client.ts",{"_index":3249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clock",{"_index":1103,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["cluster_aimodule",{"_index":336,"title":{},"body":{"modules/AiModule.html":{},"overview.html":{}}}],["cluster_aimodule_exports",{"_index":338,"title":{},"body":{"modules/AiModule.html":{},"overview.html":{}}}],["cluster_aimodule_providers",{"_index":337,"title":{},"body":{"modules/AiModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":706,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":707,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":910,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":911,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":913,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":912,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_billingmodule",{"_index":1004,"title":{},"body":{"modules/BillingModule.html":{},"overview.html":{}}}],["cluster_billingmodule_exports",{"_index":1005,"title":{},"body":{"modules/BillingModule.html":{},"overview.html":{}}}],["cluster_billingmodule_providers",{"_index":1006,"title":{},"body":{"modules/BillingModule.html":{},"overview.html":{}}}],["cluster_blocksmodule",{"_index":1372,"title":{},"body":{"modules/BlocksModule.html":{},"overview.html":{}}}],["cluster_blocksmodule_exports",{"_index":1374,"title":{},"body":{"modules/BlocksModule.html":{},"overview.html":{}}}],["cluster_blocksmodule_imports",{"_index":1373,"title":{},"body":{"modules/BlocksModule.html":{}}}],["cluster_blocksmodule_providers",{"_index":1375,"title":{},"body":{"modules/BlocksModule.html":{},"overview.html":{}}}],["cluster_dashboardmodule",{"_index":1525,"title":{},"body":{"modules/DashboardModule.html":{},"overview.html":{}}}],["cluster_dashboardmodule_exports",{"_index":1526,"title":{},"body":{"modules/DashboardModule.html":{},"overview.html":{}}}],["cluster_dashboardmodule_providers",{"_index":1527,"title":{},"body":{"modules/DashboardModule.html":{},"overview.html":{}}}],["cluster_databasemodule",{"_index":1612,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_exports",{"_index":1614,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_databasemodule_providers",{"_index":1613,"title":{},"body":{"modules/DatabaseModule.html":{},"overview.html":{}}}],["cluster_executionsmodule",{"_index":1717,"title":{},"body":{"modules/ExecutionsModule.html":{},"overview.html":{}}}],["cluster_executionsmodule_exports",{"_index":1719,"title":{},"body":{"modules/ExecutionsModule.html":{},"overview.html":{}}}],["cluster_executionsmodule_imports",{"_index":1718,"title":{},"body":{"modules/ExecutionsModule.html":{}}}],["cluster_executionsmodule_providers",{"_index":1720,"title":{},"body":{"modules/ExecutionsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule",{"_index":2261,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_exports",{"_index":2262,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_notificationsmodule_providers",{"_index":2263,"title":{},"body":{"modules/NotificationsModule.html":{},"overview.html":{}}}],["cluster_queuemodule",{"_index":2415,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_exports",{"_index":2416,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_queuemodule_providers",{"_index":2417,"title":{},"body":{"modules/QueueModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":2613,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":2614,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":2616,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":2615,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_workflowsmodule",{"_index":3088,"title":{},"body":{"modules/WorkflowsModule.html":{},"overview.html":{}}}],["cluster_workflowsmodule_exports",{"_index":3090,"title":{},"body":{"modules/WorkflowsModule.html":{},"overview.html":{}}}],["cluster_workflowsmodule_imports",{"_index":3089,"title":{},"body":{"modules/WorkflowsModule.html":{}}}],["cluster_workflowsmodule_providers",{"_index":3091,"title":{},"body":{"modules/WorkflowsModule.html":{},"overview.html":{}}}],["code",{"_index":17,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["coinmarketcap",{"_index":3266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":1067,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"miscellaneous/variables.html":{}}}],["comparator",{"_index":570,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["compare",{"_index":571,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["compatibility",{"_index":1046,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/NodeExecution.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["complete",{"_index":82,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["completed",{"_index":1032,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"miscellaneous/typealiases.html":{}}}],["completed\").length",{"_index":1790,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["completed_at",{"_index":1039,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["completedexecutions",{"_index":1795,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["completedexecutions.length",{"_index":1801,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["completedexecutions.map((exec",{"_index":1804,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["completedwithduration",{"_index":1578,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["components",{"_index":3176,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comprehensive",{"_index":537,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["concurrency",{"_index":1820,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["condition",{"_index":61,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["conditional",{"_index":550,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["conditions",{"_index":544,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["config",{"_index":427,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["configfields",{"_index":18,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["configmodule",{"_index":719,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":740,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":67,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["configuration'})@isarray",{"_index":1499,"title":{},"body":{"classes/CreateWorkflowDto.html":{}}}],["configuration'})@isboolean",{"_index":1908,"title":{},"body":{"classes/GenerationOptionsDto.html":{}}}],["configurations",{"_index":618,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":2048,"title":{},"body":{"classes/MagicService.html":{}}}],["conflict",{"_index":2959,"title":{},"body":{"interfaces/Workflow.html":{}}}],["conflictexception",{"_index":2859,"title":{},"body":{"injectables/WalletsService.html":{}}}],["connect",{"_index":2396,"title":{},"body":{"injectables/PrismaService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["connect(email",{"_index":2561,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["connected",{"_index":2872,"title":{},"body":{"injectables/WalletsService.html":{}}}],["connection",{"_index":2422,"title":{},"body":{"injectables/QueueService.html":{},"interfaces/Workflow.html":{}}}],["connections",{"_index":629,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["consider",{"_index":2741,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["consistency",{"_index":3177,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["consistent",{"_index":3388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.error",{"_index":801,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["console.error(\"ai",{"_index":490,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["console.error(\"error",{"_index":1212,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"controllers/UserController.html":{}}}],["console.error(\"failed",{"_index":2079,"title":{},"body":{"classes/MagicService.html":{},"injectables/QueueService.html":{}}}],["console.error(\"login",{"_index":874,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["console.error(\"logout",{"_index":894,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["console.error(\"magicservice",{"_index":2065,"title":{},"body":{"classes/MagicService.html":{}}}],["console.error('failed",{"_index":2214,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["console.error(`failed",{"_index":2126,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/WorkflowsService.html":{}}}],["console.log",{"_index":3134,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["console.log(\"[queue",{"_index":2492,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(\"auth",{"_index":799,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["console.log(\"created",{"_index":825,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["console.log(\"creating",{"_index":817,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["console.log(\"login",{"_index":787,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["console.log(\"magicservice",{"_index":2056,"title":{},"body":{"classes/MagicService.html":{}}}],["console.log(\"queue",{"_index":2490,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(\"sending",{"_index":866,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["console.log(`[queue",{"_index":2510,"title":{},"body":{"injectables/QueueService.html":{}}}],["console.log(`logged",{"_index":889,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["console.log(`magicservice",{"_index":2067,"title":{},"body":{"classes/MagicService.html":{}}}],["console.log(`successfully",{"_index":3137,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["console.warn",{"_index":2054,"title":{},"body":{"classes/MagicService.html":{}}}],["const",{"_index":186,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["constructor",{"_index":110,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"injectables/BlocksService.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{}}}],["constructor(executionrepository",{"_index":1531,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["constructor(jwtservice",{"_index":936,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(message",{"_index":111,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["constructor(notificationrepository",{"_index":2268,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["constructor(partial",{"_index":1418,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["constructor(prisma",{"_index":1380,"title":{},"body":{"injectables/BlocksService.html":{},"injectables/ExecutionRepository.html":{},"injectables/UserRepository.html":{},"injectables/WorkflowRepository.html":{}}}],["constructor(prismaclient",{"_index":136,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["constructor(private",{"_index":303,"title":{},"body":{"controllers/AiController.html":{},"controllers/BillingController.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"controllers/DashboardController.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"injectables/JwtAuthGuard.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{}}}],["constructor(reflector",{"_index":1915,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(userrepository",{"_index":2677,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(walletrepository",{"_index":2849,"title":{},"body":{"injectables/WalletsService.html":{}}}],["constructor(workflowrepository",{"_index":3096,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["containing",{"_index":2331,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["contains",{"_index":3324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["content",{"_index":479,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":146,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/NodeExecution.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["context.config.fieldname",{"_index":472,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["context.getclass",{"_index":1930,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":1929,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.isadmin",{"_index":195,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["context.userid",{"_index":201,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["continue",{"_index":2072,"title":{},"body":{"classes/MagicService.html":{}}}],["contractaddress",{"_index":3354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control",{"_index":2337,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["controller",{"_index":256,"title":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["controller(\"ai",{"_index":302,"title":{},"body":{"controllers/AiController.html":{}}}],["controller(\"auth",{"_index":782,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["controller(\"billing",{"_index":992,"title":{},"body":{"controllers/BillingController.html":{}}}],["controller(\"blocks",{"_index":1349,"title":{},"body":{"controllers/BlocksController.html":{}}}],["controller(\"dashboard",{"_index":1521,"title":{},"body":{"controllers/DashboardController.html":{}}}],["controller(\"notifications",{"_index":2242,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["controller(\"user",{"_index":2603,"title":{},"body":{"controllers/UserController.html":{}}}],["controller(\"user/wallets",{"_index":2838,"title":{},"body":{"controllers/WalletsController.html":{}}}],["controller(\"workflows",{"_index":3067,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["controllers",{"_index":258,"title":{},"body":{"controllers/AiController.html":{},"modules/AiModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"modules/ExecutionsModule.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["conversion",{"_index":1779,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["convert",{"_index":1186,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"interfaces/Workflow.html":{}}}],["converting",{"_index":2921,"title":{},"body":{"interfaces/Workflow.html":{}}}],["cookie",{"_index":835,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"dependencies.html":{}}}],["cookiename",{"_index":829,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["cookies",{"_index":828,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{}}}],["copy",{"_index":2989,"title":{},"body":{"interfaces/Workflow.html":{}}}],["core",{"_index":524,"title":{},"body":{"injectables/AiService.html":{},"modules/AppModule.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["correct",{"_index":2724,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["corresponding",{"_index":1178,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["count",{"_index":253,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["count')@apioperation({summary",{"_index":2230,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["count(filter",{"_index":254,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["counts",{"_index":1846,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["countunreadbyuserid(userid",{"_index":2174,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["cp",{"_index":3190,"title":{},"body":{"index.html":{}}}],["create",{"_index":94,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/NotificationsService.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"injectables/UserRepository.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{}}}],["create(createexecutiondto",{"_index":1742,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["create(createworkflowdto",{"_index":3098,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["create(data",{"_index":205,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/UserRepository.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{}}}],["create(req",{"_index":3034,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["createaccesswhereclause",{"_index":2909,"title":{},"body":{"interfaces/Workflow.html":{}}}],["createaccesswhereclause(userid",{"_index":2940,"title":{},"body":{"interfaces/Workflow.html":{}}}],["createblockchaintransaction",{"_index":2773,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["createcheckout",{"_index":977,"title":{},"body":{"controllers/BillingController.html":{}}}],["createcheckout(req",{"_index":979,"title":{},"body":{"controllers/BillingController.html":{}}}],["createcheckoutsession",{"_index":1010,"title":{},"body":{"injectables/BillingService.html":{}}}],["createcheckoutsession(userid",{"_index":1011,"title":{},"body":{"injectables/BillingService.html":{}}}],["createcontext",{"_index":2370,"title":{},"body":{"classes/PolicyService.html":{}}}],["createcontext(userid",{"_index":2359,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["createcustomblock",{"_index":1233,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["createcustomblock(data",{"_index":1325,"title":{},"body":{"controllers/BlocksController.html":{}}}],["createcustomblock(userid",{"_index":1382,"title":{},"body":{"injectables/BlocksService.html":{}}}],["createcustomblockdefinition(options",{"_index":98,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["createcustomblockrequest",{"_index":1195,"title":{"interfaces/CreateCustomBlockRequest.html":{}},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["created",{"_index":204,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateWorkflowDto.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowExecutionDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["created/updated",{"_index":2825,"title":{},"body":{"controllers/WalletsController.html":{}}}],["created_at",{"_index":1441,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/JwtService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["createdat",{"_index":79,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateWalletDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/ExecutionRepository.html":{},"classes/JwtService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["createdata",{"_index":2821,"title":{},"body":{"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["createdata.chainid",{"_index":2877,"title":{},"body":{"injectables/WalletsService.html":{}}}],["createdata.chaintype",{"_index":2879,"title":{},"body":{"injectables/WalletsService.html":{}}}],["createdata.walletaddress",{"_index":2871,"title":{},"body":{"injectables/WalletsService.html":{}}}],["createdata.wallettype",{"_index":2878,"title":{},"body":{"injectables/WalletsService.html":{}}}],["createdby",{"_index":78,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["createdcount",{"_index":2192,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["createexecution",{"_index":1653,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["createexecution(data",{"_index":1664,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["createexecutiondto",{"_index":1394,"title":{"classes/CreateExecutionDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["createexecutiondto.input",{"_index":1770,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["createexecutiondto.triggertype",{"_index":1771,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["createexecutiondto.workflowid",{"_index":1769,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["createforuser",{"_index":2761,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["createforuser(userid",{"_index":2184,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["createforusers(userids",{"_index":2189,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["createinput",{"_index":206,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["createnotification",{"_index":2267,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createnotification(userid",{"_index":2270,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["createopenrouter",{"_index":390,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["createpaginatedresult",{"_index":2153,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["createpaginatedresult(data",{"_index":2170,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["createparameter(name",{"_index":95,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["createpolicycontext",{"_index":950,"title":{},"body":{"classes/BaseRepository.html":{},"interfaces/Workflow.html":{}}}],["createpolicycontext(userid",{"_index":152,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/Workflow.html":{}}}],["creates",{"_index":439,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["createtransaction",{"_index":2768,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["createwallet",{"_index":2816,"title":{},"body":{"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["createwallet(req",{"_index":2820,"title":{},"body":{"controllers/WalletsController.html":{}}}],["createwallet(userid",{"_index":2851,"title":{},"body":{"injectables/WalletsService.html":{}}}],["createwalletdto",{"_index":1446,"title":{"classes/CreateWalletDto.html":{}},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["createwithnodesandedges",{"_index":2965,"title":{},"body":{"interfaces/Workflow.html":{}}}],["createworkflowdto",{"_index":1496,"title":{"classes/CreateWorkflowDto.html":{}},"body":{"classes/CreateWorkflowDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["createworkflowdto.description",{"_index":3121,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["createworkflowdto.edges",{"_index":3123,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["createworkflowdto.name",{"_index":3120,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["createworkflowdto.nodes",{"_index":3122,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["creating",{"_index":1247,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["creation",{"_index":641,"title":{},"body":{"injectables/AiService.html":{},"classes/CreateWalletDto.html":{},"interfaces/GenerationOptions.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["critical",{"_index":607,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["cron",{"_index":1624,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["cronexpression",{"_index":1622,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"injectables/QueueService.html":{}}}],["crypto",{"_index":530,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["cryptocurrency",{"_index":542,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["cs_test_123",{"_index":1019,"title":{},"body":{"injectables/BillingService.html":{}}}],["current",{"_index":517,"title":{},"body":{"injectables/AiService.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["currentconcurrency",{"_index":1833,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["cursor",{"_index":2298,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["custom",{"_index":11,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["customblock",{"_index":1237,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["customblockconfigfield",{"_index":25,"title":{"interfaces/CustomBlockConfigField.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["customblockdata",{"_index":83,"title":{"interfaces/CustomBlockData.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["customblockdefinition",{"_index":75,"title":{"interfaces/CustomBlockDefinition.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["customblockexecutionresult",{"_index":88,"title":{"interfaces/CustomBlockExecutionResult.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["customblockinput",{"_index":26,"title":{"interfaces/CustomBlockInput.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["customblockoutput",{"_index":27,"title":{"interfaces/CustomBlockOutput.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["daily",{"_index":1097,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"miscellaneous/variables.html":{}}}],["dark",{"_index":1472,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["dark_mode",{"_index":1475,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["darkmode",{"_index":2649,"title":{},"body":{"injectables/UserRepository.html":{}}}],["dashboard",{"_index":853,"title":{},"body":{"controllers/AuthController.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"interfaces/MagicAuthPayload.html":{}}}],["dashboard.controller",{"_index":1529,"title":{},"body":{"modules/DashboardModule.html":{}}}],["dashboard.service",{"_index":1519,"title":{},"body":{"controllers/DashboardController.html":{},"modules/DashboardModule.html":{}}}],["dashboard/dashboard.module",{"_index":735,"title":{},"body":{"modules/AppModule.html":{}}}],["dashboardcontroller",{"_index":1509,"title":{"controllers/DashboardController.html":{}},"body":{"controllers/DashboardController.html":{},"modules/DashboardModule.html":{}}}],["dashboardmodule",{"_index":711,"title":{"modules/DashboardModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DashboardModule.html":{},"modules.html":{},"overview.html":{}}}],["dashboardservice",{"_index":1518,"title":{"injectables/DashboardService.html":{}},"body":{"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"overview.html":{}}}],["data",{"_index":13,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateWorkflowDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["data.avatarurl",{"_index":2652,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.blocknumber",{"_index":2782,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["data.category",{"_index":1240,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["data.code",{"_index":1241,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["data.completedexecutions",{"_index":1887,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["data.completedwithduration",{"_index":1883,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["data.data",{"_index":2290,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["data.description",{"_index":312,"title":{},"body":{"controllers/AiController.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/WorkflowRepository.html":{}}}],["data.discordwebhook",{"_index":2673,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.discordwebhookurl",{"_index":2670,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.edges",{"_index":326,"title":{},"body":{"controllers/AiController.html":{},"injectables/WorkflowRepository.html":{}}}],["data.email",{"_index":2635,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.error",{"_index":1709,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["data.executions",{"_index":1886,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["data.existingedges",{"_index":317,"title":{},"body":{"controllers/AiController.html":{}}}],["data.existingnodes",{"_index":316,"title":{},"body":{"controllers/AiController.html":{}}}],["data.finishedat",{"_index":1708,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["data.fullname",{"_index":2636,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.inputs",{"_index":1235,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["data.ispublic",{"_index":1245,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["data.length",{"_index":3116,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["data.logictype",{"_index":1242,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["data.message",{"_index":2288,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["data.monthlyexecutionquota",{"_index":2660,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.monthlyexecutionsused",{"_index":2662,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.name",{"_index":1239,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/WorkflowRepository.html":{}}}],["data.nodes",{"_index":325,"title":{},"body":{"controllers/AiController.html":{},"injectables/WorkflowRepository.html":{}}}],["data.nodetype.touppercase",{"_index":1174,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["data.options",{"_index":313,"title":{},"body":{"controllers/AiController.html":{}}}],["data.outputs",{"_index":1236,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["data.priceid",{"_index":998,"title":{},"body":{"controllers/BillingController.html":{}}}],["data.prompt",{"_index":324,"title":{},"body":{"controllers/AiController.html":{}}}],["data.slice(startindex",{"_index":3115,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["data.status",{"_index":1714,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["data.stripecustomerid",{"_index":2664,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.stripesubscriptionid",{"_index":2666,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.subscriptionexpiresat",{"_index":2658,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.subscriptionstatus",{"_index":2656,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.subscriptiontier",{"_index":2654,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.tags",{"_index":1261,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["data.telegramchatid",{"_index":2668,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.telegramhandle",{"_index":2672,"title":{},"body":{"injectables/UserRepository.html":{}}}],["data.title",{"_index":2287,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["data.total",{"_index":1858,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["data.txhash",{"_index":2781,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["data.type",{"_index":2289,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["data.userid",{"_index":1713,"title":{},"body":{"injectables/ExecutionRepository.html":{},"injectables/WorkflowRepository.html":{}}}],["data.walletaddress",{"_index":2765,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["data.workflowid",{"_index":1712,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["data?.blocktype",{"_index":1183,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["data?.id].filter(boolean",{"_index":1185,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["data?.nodetype",{"_index":1173,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["data?.type",{"_index":1184,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["data[data.length",{"_index":2316,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["database",{"_index":579,"title":{},"body":{"injectables/AiService.html":{},"modules/AppModule.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"injectables/PrismaService.html":{},"interfaces/TransactionParams.html":{},"injectables/UserRepository.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":725,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlocksModule.html":{},"modules/ExecutionsModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{}}}],["database/prisma.service",{"_index":1193,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["database/repositories/execution.repository",{"_index":2097,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["database_query",{"_index":3170,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["database_query/write",{"_index":578,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["database_write",{"_index":3172,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["databaseauthservice",{"_index":772,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/MagicAuthPayload.html":{},"overview.html":{}}}],["databasemodule",{"_index":712,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlocksModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"modules.html":{},"overview.html":{}}}],["datapath",{"_index":3293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasource",{"_index":3264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datatype",{"_index":35,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["date",{"_index":244,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateWalletDto.html":{},"injectables/DashboardService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserRepository.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{}}}],["date((exec.startedat",{"_index":1585,"title":{},"body":{"injectables/DashboardService.html":{}}}],["date().toisostring",{"_index":100,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/UserService.html":{}}}],["date(e.startedat",{"_index":1558,"title":{},"body":{"injectables/DashboardService.html":{}}}],["date(exec.finishedat!).gettime",{"_index":1808,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["date(exec.finishedat).gettime",{"_index":1828,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["date(exec.startedat!).gettime",{"_index":1806,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["date(exec.startedat).gettime",{"_index":1827,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["date(executedto.scheduledtime",{"_index":3083,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["date(execution.finishedat).gettime",{"_index":1874,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["date(execution.startedat).gettime",{"_index":1875,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["date(now",{"_index":1546,"title":{},"body":{"injectables/DashboardService.html":{}}}],["date(oneweekago",{"_index":1549,"title":{},"body":{"injectables/DashboardService.html":{}}}],["date).toisostring",{"_index":1583,"title":{},"body":{"injectables/DashboardService.html":{}}}],["date).toisostring()).gettime",{"_index":1586,"title":{},"body":{"injectables/DashboardService.html":{}}}],["datekey",{"_index":1848,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["day",{"_index":848,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExecutionsService.html":{},"interfaces/MagicAuthPayload.html":{}}}],["daydata",{"_index":1851,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["daydata.completedexecutions",{"_index":1872,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["daydata.completedwithduration",{"_index":1877,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["daydata.executions",{"_index":1871,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["daydata.successful",{"_index":1855,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["daydata.total",{"_index":1853,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["daydata.totalduration",{"_index":1876,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["days",{"_index":846,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExecutionsService.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/RefreshToken.html":{}}}],["days\"]).default(\"minutes",{"_index":3278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":2012,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["dbblock",{"_index":1275,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.blockdata",{"_index":1277,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.category",{"_index":1285,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.code",{"_index":1299,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.createdat?.toisostring",{"_index":1302,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.description",{"_index":1284,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.id",{"_index":1282,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.ispublic",{"_index":1301,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.logictype",{"_index":1300,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.name",{"_index":1283,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.tags",{"_index":1279,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.updatedat?.toisostring",{"_index":1303,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dbblock.userid",{"_index":1304,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["dead",{"_index":2452,"title":{},"body":{"injectables/QueueService.html":{}}}],["deadletterexchange",{"_index":2464,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["deadletterroutingkey",{"_index":2465,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["debug",{"_index":1047,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["declarations",{"_index":332,"title":{},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["decoded",{"_index":1985,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["decorators",{"_index":267,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"controllers/DashboardController.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/LoginDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"controllers/NotificationsController.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"controllers/WalletsController.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{}}}],["decorators/public.decorator",{"_index":775,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/MagicAuthPayload.html":{}}}],["deduplicatededges",{"_index":696,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["deduplicatededges.push(edge",{"_index":704,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["deduplicatednodes",{"_index":695,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["deduplicatednodes.push(node",{"_index":700,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["deduplicateworkflow",{"_index":349,"title":{},"body":{"injectables/AiService.html":{}}}],["deduplicateworkflow(workflow",{"_index":359,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["deep",{"_index":527,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["default",{"_index":141,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/WalletsService.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default(\"coingecko",{"_index":3268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"daily",{"_index":3283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default(\"ethereum",{"_index":3352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default_limit",{"_index":2303,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["default_page",{"_index":2302,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["defaultconfig",{"_index":1064,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":65,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["define",{"_index":1987,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Workflow.html":{}}}],["defined",{"_index":112,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"classes/BaseRepository.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockHandler.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["defines",{"_index":1060,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/enumerations.html":{}}}],["definition",{"_index":73,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["definitions",{"_index":2155,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"miscellaneous/enumerations.html":{}}}],["delay",{"_index":552,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"injectables/QueueService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["delayed",{"_index":2458,"title":{},"body":{"injectables/QueueService.html":{}}}],["delayedqueue",{"_index":2525,"title":{},"body":{"injectables/QueueService.html":{}}}],["delayedqueue.messagecount",{"_index":2531,"title":{},"body":{"injectables/QueueService.html":{}}}],["delays",{"_index":554,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["delete",{"_index":225,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/JwtService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/RefreshToken.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"miscellaneous/variables.html":{}}}],["delete\"]).default(\"post",{"_index":3287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete(\":id",{"_index":3078,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["delete(\":walletid",{"_index":2841,"title":{},"body":{"controllers/WalletsController.html":{}}}],["delete(\"custom/:id",{"_index":1369,"title":{},"body":{"controllers/BlocksController.html":{}}}],["delete(':id')@apioperation({summary",{"_index":3054,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["delete(':walletid')@apioperation({summary",{"_index":2828,"title":{},"body":{"controllers/WalletsController.html":{}}}],["delete('custom/:id')@apioperation({summary",{"_index":1329,"title":{},"body":{"controllers/BlocksController.html":{}}}],["delete(id",{"_index":227,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/WorkflowRepository.html":{}}}],["deleteallforuser(userid",{"_index":2182,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["deletecustomblock",{"_index":1268,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["deletecustomblock(@param(\"id",{"_index":1370,"title":{},"body":{"controllers/BlocksController.html":{}}}],["deletecustomblock(id",{"_index":1328,"title":{},"body":{"controllers/BlocksController.html":{},"injectables/BlocksService.html":{}}}],["deleted",{"_index":226,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["deletedentity",{"_index":229,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["deleteresult",{"_index":1269,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["deleteresult.count",{"_index":1271,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["deletewallet",{"_index":2817,"title":{},"body":{"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["deletewallet(req",{"_index":2827,"title":{},"body":{"controllers/WalletsController.html":{}}}],["deletewallet(userid",{"_index":2853,"title":{},"body":{"injectables/WalletsService.html":{}}}],["deleting",{"_index":1273,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["delta",{"_index":1824,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["denied",{"_index":108,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{}}}],["dependencies",{"_index":330,"title":{"dependencies.html":{}},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deploy_contract",{"_index":3378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desc",{"_index":1226,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/ExecutionRepository.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{},"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"controllers/WalletsController.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["descriptive",{"_index":601,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["design",{"_index":457,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["destroyed",{"_index":2400,"title":{},"body":{"injectables/PrismaService.html":{}}}],["detailed",{"_index":1901,"title":{},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["detailedmode",{"_index":314,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["details",{"_index":2546,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["development",{"_index":2041,"title":{},"body":{"classes/MagicService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["didtoken",{"_index":777,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/Session.html":{}}}],["didtoken.length",{"_index":2059,"title":{},"body":{"classes/MagicService.html":{}}}],["different",{"_index":2011,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["differently",{"_index":2980,"title":{},"body":{"interfaces/Workflow.html":{}}}],["direct",{"_index":1171,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/QueueService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"miscellaneous/variables.html":{}}}],["directly",{"_index":3124,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["disabled",{"_index":182,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["disconnect",{"_index":2399,"title":{},"body":{"injectables/PrismaService.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["discord",{"_index":1470,"title":{},"body":{"classes/CreateWalletDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"miscellaneous/variables.html":{}}}],["discord_webhook",{"_index":1471,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["discordwebhook",{"_index":2648,"title":{},"body":{"injectables/UserRepository.html":{}}}],["discordwebhookurl",{"_index":2162,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["divide",{"_index":3298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dlq",{"_index":2529,"title":{},"body":{"injectables/QueueService.html":{}}}],["dlqqueue",{"_index":2523,"title":{},"body":{"injectables/QueueService.html":{}}}],["dlqqueue.messagecount",{"_index":2530,"title":{},"body":{"injectables/QueueService.html":{}}}],["documentation",{"_index":3202,"title":{},"body":{"index.html":{}}}],["doesn't",{"_index":189,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["domain",{"_index":726,"title":{},"body":{"modules/AppModule.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["domainhint",{"_index":413,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["don't",{"_index":1878,"title":{},"body":{"injectables/ExecutionsService.html":{},"classes/MagicService.html":{}}}],["downloads",{"_index":86,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["dto",{"_index":3109,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["dto/execute",{"_index":3062,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["dto/execution.dto",{"_index":1761,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["dto/user.dto",{"_index":2601,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["dto/workflow",{"_index":299,"title":{},"body":{"controllers/AiController.html":{}}}],["dto/workflow.dto",{"_index":3061,"title":{},"body":{"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["dtos",{"_index":2100,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["duplicate",{"_index":2985,"title":{},"body":{"interfaces/Workflow.html":{}}}],["duplicated",{"_index":2987,"title":{},"body":{"interfaces/Workflow.html":{}}}],["durable",{"_index":2463,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["duration",{"_index":1104,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"miscellaneous/variables.html":{}}}],["durationchange",{"_index":1605,"title":{},"body":{"injectables/DashboardService.html":{}}}],["durations",{"_index":1802,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["durations.length",{"_index":1811,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["durations.reduce((sum",{"_index":1809,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["durations.sort((a",{"_index":1814,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["during",{"_index":891,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NodeExecution.html":{}}}],["e",{"_index":1556,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["e.finishedat",{"_index":1797,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["e.g",{"_index":2727,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["e.startedat",{"_index":1557,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["e.status",{"_index":1567,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["e.workflowid",{"_index":1559,"title":{},"body":{"injectables/DashboardService.html":{}}}],["each",{"_index":619,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["edge",{"_index":606,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["edge.animated",{"_index":681,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["edge.id",{"_index":675,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["edge.source",{"_index":676,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["edge.sourcehandle",{"_index":678,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["edge.target",{"_index":677,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["edge.targethandle",{"_index":679,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["edge.type",{"_index":680,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["edges",{"_index":320,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"classes/CreateWorkflowDto.html":{},"injectables/ExecutionRepository.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateWorkflowDto.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["edges'})@isarray()@validatenested({each",{"_index":2532,"title":{},"body":{"classes/RefineWorkflowDto.html":{}}}],["edges.map((edge",{"_index":674,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["efficiency",{"_index":635,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["email",{"_index":545,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateWalletDto.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/ProfileResponseDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserRepository.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["email_notifications",{"_index":1467,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["emailenabled",{"_index":2158,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["emailnotifications",{"_index":2646,"title":{},"body":{"injectables/UserRepository.html":{}}}],["empty",{"_index":2112,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"injectables/WorkflowsService.html":{}}}],["enable",{"_index":1466,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["enabled",{"_index":212,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"classes/CreateWalletDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["encoding",{"_index":1133,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":1807,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["endindex",{"_index":3113,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["endpoint",{"_index":1109,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":3193,"title":{},"body":{"index.html":{}}}],["ends_with",{"_index":3327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enforce",{"_index":2978,"title":{},"body":{"interfaces/Workflow.html":{}}}],["enforcement",{"_index":179,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/Workflow.html":{}}}],["enforcepolicy",{"_index":2910,"title":{},"body":{"interfaces/Workflow.html":{}}}],["enforcer",{"_index":3234,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["enforcing",{"_index":2336,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["enhance",{"_index":632,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["enhancededges",{"_index":504,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["enhancednodes",{"_index":502,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["enhanceedges",{"_index":350,"title":{},"body":{"injectables/AiService.html":{}}}],["enhanceedges(edges",{"_index":361,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["enhancement",{"_index":637,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["enhancenodes",{"_index":351,"title":{},"body":{"injectables/AiService.html":{}}}],["enhancenodes(nodes",{"_index":364,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["enqueue",{"_index":2493,"title":{},"body":{"injectables/QueueService.html":{}}}],["ensure",{"_index":620,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["ensures",{"_index":2722,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["entities",{"_index":196,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["entity",{"_index":178,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["entity.id",{"_index":214,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["entity.userid",{"_index":194,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["entitydata",{"_index":209,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["entitydata.userid",{"_index":210,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["entry",{"_index":1439,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["enum",{"_index":34,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"classes/CreateExecutionDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["enum([\"coingecko",{"_index":3265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum([\"ethereum",{"_index":3379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum([\"once",{"_index":3279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":3165,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":3188,"title":{},"body":{"index.html":{}}}],["env.example",{"_index":3189,"title":{},"body":{"index.html":{}}}],["environment",{"_index":2049,"title":{},"body":{"classes/MagicService.html":{}}}],["eq",{"_index":3311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["equals",{"_index":1121,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":1923,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["error",{"_index":91,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"classes/UpdateExecutionDto.html":{},"controllers/UserController.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["error(\"ai",{"_index":646,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["error(\"custom",{"_index":1251,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["error(\"failed",{"_index":492,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["error(\"internal",{"_index":1213,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["error(\"missing",{"_index":2731,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["error(`failed",{"_index":2889,"title":{},"body":{"injectables/WalletsService.html":{}}}],["error(`workflow",{"_index":2988,"title":{},"body":{"interfaces/Workflow.html":{}}}],["error.message",{"_index":877,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/WalletsService.html":{}}}],["errormessage",{"_index":875,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["errors",{"_index":464,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["established",{"_index":2983,"title":{},"body":{"interfaces/Workflow.html":{}}}],["etc",{"_index":1063,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["eth",{"_index":2905,"title":{},"body":{"injectables/WalletsService.html":{}}}],["ethereum",{"_index":1079,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/variables.html":{}}}],["even",{"_index":2073,"title":{},"body":{"classes/MagicService.html":{}}}],["event",{"_index":165,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["evm",{"_index":2544,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"injectables/WalletsService.html":{},"miscellaneous/enumerations.html":{}}}],["exact",{"_index":609,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["exact_uppercase_enum_value",{"_index":599,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["example",{"_index":1627,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"index.html":{}}}],["example.ts",{"_index":3238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exchange",{"_index":2461,"title":{},"body":{"injectables/QueueService.html":{}}}],["exchange.durable",{"_index":2482,"title":{},"body":{"injectables/QueueService.html":{}}}],["exchange.type",{"_index":2481,"title":{},"body":{"injectables/QueueService.html":{}}}],["exchangeoptions",{"_index":2468,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["exchanges",{"_index":2479,"title":{},"body":{"injectables/QueueService.html":{}}}],["exec",{"_index":1579,"title":{},"body":{"injectables/DashboardService.html":{}}}],["exec.finishedat",{"_index":1582,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["exec.startedat",{"_index":1581,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["exec.status",{"_index":1580,"title":{},"body":{"injectables/DashboardService.html":{}}}],["exec.workflowid",{"_index":1787,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["exec_1234567890_abcdef123",{"_index":1642,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["executable",{"_index":536,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["execute",{"_index":623,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["execute'})@isstring",{"_index":1402,"title":{},"body":{"classes/CreateExecutionDto.html":{}}}],["execute(id",{"_index":3100,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["execute(inputs",{"_index":448,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["execute(node",{"_index":1050,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["execute(req",{"_index":3037,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["executed",{"_index":1426,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["executedto",{"_index":3038,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["executedto.input",{"_index":3085,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["executedto.scheduledtime",{"_index":3082,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["executes",{"_index":1633,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["executewithtransaction",{"_index":235,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["executewithtransaction(operation",{"_index":965,"title":{},"body":{"classes/BaseRepository.html":{}}}],["executeworkflowdto",{"_index":1619,"title":{"classes/ExecuteWorkflowDto.html":{}},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{}}}],["executeworkflowresponsedto",{"_index":1641,"title":{"classes/ExecuteWorkflowResponseDto.html":{}},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{}}}],["executeworkflowresponsedto})@apiresponse({status",{"_index":3041,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["execution",{"_index":41,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["execution.finishedat",{"_index":1873,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["execution.id",{"_index":3133,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["execution.repository.ts",{"_index":3217,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["execution.startedat",{"_index":1847,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["execution.startedat.toisostring().split(\"t\")[0",{"_index":1849,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["execution.status",{"_index":1854,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["execution.ts",{"_index":3218,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["execution.userid",{"_index":1767,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["execution_delayed_queue",{"_index":2456,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["execution_dlq",{"_index":2450,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["execution_id",{"_index":1034,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["execution_queue",{"_index":2448,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["execution_retry_queue",{"_index":2454,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["execution_scheduled_exchange",{"_index":2459,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["executionactiondto",{"_index":1442,"title":{"classes/ExecutionActionDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["executionactionresponsedto",{"_index":1444,"title":{"classes/ExecutionActionResponseDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["executionchange",{"_index":1603,"title":{},"body":{"injectables/DashboardService.html":{}}}],["executioncontext",{"_index":1919,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["executioncount",{"_index":1888,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["executioncreateinput",{"_index":3216,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["executionid",{"_index":1024,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"injectables/NodeExecutionsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{}}}],["executionlog",{"_index":1033,"title":{"interfaces/ExecutionLog.html":{}},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["executionqueue",{"_index":2519,"title":{},"body":{"injectables/QueueService.html":{}}}],["executionqueue.messagecount",{"_index":2527,"title":{},"body":{"injectables/QueueService.html":{}}}],["executionrepository",{"_index":1532,"title":{"injectables/ExecutionRepository.html":{}},"body":{"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"injectables/ExecutionRepository.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"injectables/WorkflowsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["executionresult",{"_index":1040,"title":{"interfaces/ExecutionResult.html":{}},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["executions",{"_index":1430,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"injectables/DashboardService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/Workflow.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"index.html":{}}}],["executions.controller",{"_index":1726,"title":{},"body":{"modules/ExecutionsModule.html":{}}}],["executions.filter",{"_index":1796,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["executions.filter((e",{"_index":1789,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["executions.filter((exec",{"_index":1786,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["executions.foreach((exec",{"_index":1825,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["executions.foreach((execution",{"_index":1866,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["executions.length",{"_index":1788,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["executions.service",{"_index":1727,"title":{},"body":{"modules/ExecutionsModule.html":{}}}],["executions.service.ts",{"_index":2090,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["executions.service.ts:12",{"_index":2094,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["executions.service.ts:52",{"_index":2095,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["executions.service.ts:6",{"_index":2092,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["executions/executions.module",{"_index":730,"title":{},"body":{"modules/AppModule.html":{}}}],["executionscontroller",{"_index":1725,"title":{},"body":{"modules/ExecutionsModule.html":{}}}],["executionslastweek",{"_index":1554,"title":{},"body":{"injectables/DashboardService.html":{}}}],["executionslastweek.filter",{"_index":1566,"title":{},"body":{"injectables/DashboardService.html":{}}}],["executionslastweek.length",{"_index":1572,"title":{},"body":{"injectables/DashboardService.html":{}}}],["executionsmodule",{"_index":713,"title":{"modules/ExecutionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExecutionsModule.html":{},"modules.html":{},"overview.html":{}}}],["executionsprevweek",{"_index":1598,"title":{},"body":{"injectables/DashboardService.html":{}}}],["executionsprevweek.filter",{"_index":1591,"title":{},"body":{"injectables/DashboardService.html":{}}}],["executionsprevweek.length",{"_index":1593,"title":{},"body":{"injectables/DashboardService.html":{}}}],["executionsservice",{"_index":1721,"title":{"injectables/ExecutionsService.html":{}},"body":{"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"overview.html":{}}}],["executionstatus",{"_index":1029,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"miscellaneous/typealiases.html":{}}}],["executiontype",{"_index":43,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["executionupdateinput",{"_index":3219,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["executionwithnodes",{"_index":3220,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["exist",{"_index":190,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["existing",{"_index":287,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/JwtService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["existingblock",{"_index":1250,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["existingedges",{"_index":371,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["existingnodes",{"_index":370,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["existingnodes.length",{"_index":495,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["existingwallet",{"_index":2740,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{}}}],["existingwallet.id",{"_index":2746,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["existingwallet.userid",{"_index":2743,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{}}}],["existingworkflow",{"_index":3125,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["exists",{"_index":1772,"title":{},"body":{"injectables/ExecutionsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{}}}],["exp",{"_index":904,"title":{},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["expected",{"_index":1777,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["expert",{"_index":525,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["expired",{"_index":2016,"title":{},"body":{"classes/JwtService.html":{},"classes/MagicService.html":{},"interfaces/RefreshToken.html":{}}}],["expires",{"_index":2467,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["expires_at",{"_index":2008,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["expiresat",{"_index":815,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{}}}],["expiresat.setdate(expiresat.getdate",{"_index":2000,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["expiresin",{"_index":748,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{}}}],["expiry",{"_index":1481,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["export",{"_index":33,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{}}}],["exports",{"_index":335,"title":{},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["express",{"_index":1937,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["expression",{"_index":1625,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["extends",{"_index":109,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/Session.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["external",{"_index":565,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/NotificationsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["extract",{"_index":1941,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{}}}],["extractjwt",{"_index":1934,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1944,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":1940,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["failed",{"_index":652,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"controllers/BlocksController.html":{},"classes/CreateExecutionDto.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"controllers/UserController.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/typealiases.html":{}}}],["failed\").length",{"_index":1791,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["failedexecutions",{"_index":1569,"title":{},"body":{"injectables/DashboardService.html":{}}}],["fails",{"_index":2074,"title":{},"body":{"classes/MagicService.html":{}}}],["failurerate",{"_index":1885,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["fall",{"_index":139,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["fallback",{"_index":1160,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":450,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{}}}],["false})@isoptional",{"_index":1455,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/RefineWorkflowDto.html":{}}}],["false})@isoptional()@isarray",{"_index":2575,"title":{},"body":{"classes/UpdateWorkflowDto.html":{}}}],["false})@isoptional()@isarray()@validatenested({each",{"_index":1893,"title":{},"body":{"classes/GenerateWorkflowDto.html":{}}}],["false})@isoptional()@isboolean",{"_index":2568,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["false})@isoptional()@isdatestring",{"_index":1637,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{}}}],["false})@isoptional()@isobject",{"_index":1397,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/UpdateExecutionDto.html":{}}}],["false})@isoptional()@isstring",{"_index":1400,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{}}}],["false})@isoptional()@validatenested()@type(undefined",{"_index":1899,"title":{},"body":{"classes/GenerateWorkflowDto.html":{}}}],["fetch",{"_index":1229,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"controllers/UserController.html":{}}}],["fetching",{"_index":1228,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"controllers/UserController.html":{}}}],["field",{"_index":1044,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/UserRepository.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":68,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/TransactionParams.html":{},"injectables/UserRepository.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["file_read",{"_index":3171,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["file_read/write",{"_index":580,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["file_write",{"_index":3174,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["files",{"_index":1132,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["filled",{"_index":2367,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["filter",{"_index":248,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["filtering",{"_index":2973,"title":{},"body":{"interfaces/Workflow.html":{}}}],["finalcallbackurl",{"_index":852,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["finalworkflow",{"_index":506,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["find",{"_index":177,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{}}}],["findall",{"_index":951,"title":{},"body":{"classes/BaseRepository.html":{},"injectables/ExecutionsService.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["findall(req",{"_index":3043,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["findall(userid",{"_index":197,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/ExecutionsService.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{}}}],["findblockchaintransactionsbyexecutionid",{"_index":2775,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["findbyaddress(walletaddress",{"_index":2754,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["findbyemail",{"_index":2624,"title":{},"body":{"injectables/UserRepository.html":{}}}],["findbyemail(email",{"_index":2627,"title":{},"body":{"injectables/UserRepository.html":{}}}],["findbyexecutionid",{"_index":2091,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["findbyexecutionid(executionid",{"_index":2093,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["findbyid",{"_index":952,"title":{},"body":{"classes/BaseRepository.html":{},"injectables/NodeExecutionsService.html":{},"injectables/UserRepository.html":{},"injectables/WorkflowRepository.html":{}}}],["findbyid(id",{"_index":181,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/NodeExecutionsService.html":{},"injectables/UserRepository.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{}}}],["findbynodeexecutionid",{"_index":2133,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["findbynodeexecutionid(nodeexecutionid",{"_index":2135,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["findbyorganization(organizationid",{"_index":2975,"title":{},"body":{"interfaces/Workflow.html":{}}}],["findbyuserid",{"_index":1654,"title":{},"body":{"injectables/ExecutionRepository.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{}}}],["findbyuserid(userid",{"_index":1666,"title":{},"body":{"injectables/ExecutionRepository.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WorkflowRepository.html":{}}}],["findexecutionbyid",{"_index":1655,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findexecutionbyid(id",{"_index":1668,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findexecutions",{"_index":1656,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findexecutions(params",{"_index":1670,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findfirst",{"_index":2735,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["findmany",{"_index":953,"title":{},"body":{"classes/BaseRepository.html":{},"injectables/ExecutionRepository.html":{}}}],["findmany(filter",{"_index":252,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["findmany(params",{"_index":1673,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findnodeexecution",{"_index":1657,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findnodeexecution(id",{"_index":1675,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findnodeexecutions",{"_index":1658,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findnodeexecutions(executionid",{"_index":1677,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findnodelogs",{"_index":1659,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findnodelogs(nodeexecutionid",{"_index":1679,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findone",{"_index":1732,"title":{},"body":{"injectables/ExecutionsService.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["findone(id",{"_index":1745,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/WorkflowsService.html":{}}}],["findone(req",{"_index":3048,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["findpublic(limit",{"_index":2970,"title":{},"body":{"interfaces/Workflow.html":{}}}],["findtransactionsbyuserid",{"_index":2771,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["findtransactionsbywalletaddress",{"_index":2772,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["findtransactionsbywalletid",{"_index":2770,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["findunique",{"_index":2736,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["findunreadbyuserid(userid",{"_index":2173,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["findwithexecutions(id",{"_index":2954,"title":{},"body":{"interfaces/Workflow.html":{}}}],["findwithnodesandlogs",{"_index":1660,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findwithnodesandlogs(id",{"_index":1682,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["findwithtransactions",{"_index":2757,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["first",{"_index":1170,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"injectables/WorkflowsService.html":{}}}],["floor",{"_index":3303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["flow",{"_index":615,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["focusarea",{"_index":510,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["foreach",{"_index":3373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":596,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["formatblocktypename",{"_index":1378,"title":{},"body":{"injectables/BlocksService.html":{}}}],["formatblocktypename(blocktype",{"_index":1305,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["formatduration(avgdurationms",{"_index":1609,"title":{},"body":{"injectables/DashboardService.html":{}}}],["formatduration(ms",{"_index":1538,"title":{},"body":{"injectables/DashboardService.html":{}}}],["formatted",{"_index":2559,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["formula",{"_index":3309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":221,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/ExecutionsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["free",{"_index":2686,"title":{},"body":{"injectables/UserService.html":{}}}],["friendly",{"_index":600,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["frontend",{"_index":1837,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/UserRepository.html":{}}}],["full",{"_index":931,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/CreateWalletDto.html":{},"classes/LoginDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["full_name",{"_index":1465,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["fullname",{"_index":932,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["function",{"_index":44,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"classes/BaseRepository.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/DashboardService.html":{},"interfaces/GenerationOptions.html":{},"classes/MagicService.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":456,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["future",{"_index":2984,"title":{},"body":{"interfaces/Workflow.html":{}}}],["gaslimit",{"_index":3380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gasprice",{"_index":3381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["general",{"_index":1881,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["generate",{"_index":270,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generateblock",{"_index":262,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{}}}],["generateblock(@body",{"_index":308,"title":{},"body":{"controllers/AiController.html":{}}}],["generateblock(data",{"_index":265,"title":{},"body":{"controllers/AiController.html":{}}}],["generateblock(prompt",{"_index":367,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generated",{"_index":10,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["generateexistingcontext",{"_index":352,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generateexistingcontext(prompt",{"_index":369,"title":{},"body":{"injectables/AiService.html":{}}}],["generatenewcontext",{"_index":353,"title":{},"body":{"injectables/AiService.html":{}}}],["generatenewcontext(prompt",{"_index":373,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generaterefinementsystemprompt",{"_index":354,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generaterefreshtoken",{"_index":1965,"title":{},"body":{"classes/JwtService.html":{}}}],["generaterefreshtoken(userid",{"_index":1972,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["generates",{"_index":1989,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["generatesystemprompt",{"_index":355,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generatetext",{"_index":394,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generatetoken",{"_index":934,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtService.html":{}}}],["generatetoken(payload",{"_index":1974,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["generatetoken(user",{"_index":939,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["generateworkflow",{"_index":263,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generateworkflow(data",{"_index":277,"title":{},"body":{"controllers/AiController.html":{}}}],["generateworkflow(description",{"_index":377,"title":{},"body":{"injectables/AiService.html":{}}}],["generateworkflowdto",{"_index":278,"title":{"classes/GenerateWorkflowDto.html":{}},"body":{"controllers/AiController.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["generation",{"_index":491,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["generation'})@isboolean",{"_index":1905,"title":{},"body":{"classes/GenerationOptionsDto.html":{}}}],["generation.dto",{"_index":300,"title":{},"body":{"controllers/AiController.html":{}}}],["generation.dto.ts",{"_index":1890,"title":{},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["generation.dto.ts:102",{"_index":2536,"title":{},"body":{"classes/RefineWorkflowDto.html":{}}}],["generation.dto.ts:112",{"_index":2535,"title":{},"body":{"classes/RefineWorkflowDto.html":{}}}],["generation.dto.ts:118",{"_index":2533,"title":{},"body":{"classes/RefineWorkflowDto.html":{}}}],["generation.dto.ts:123",{"_index":3031,"title":{},"body":{"classes/WorkflowResponseDto.html":{}}}],["generation.dto.ts:126",{"_index":3030,"title":{},"body":{"classes/WorkflowResponseDto.html":{}}}],["generation.dto.ts:14",{"_index":1906,"title":{},"body":{"classes/GenerationOptionsDto.html":{}}}],["generation.dto.ts:18",{"_index":1909,"title":{},"body":{"classes/GenerationOptionsDto.html":{}}}],["generation.dto.ts:26",{"_index":1907,"title":{},"body":{"classes/GenerationOptionsDto.html":{}}}],["generation.dto.ts:32",{"_index":3011,"title":{},"body":{"classes/WorkflowNodeDto.html":{}}}],["generation.dto.ts:36",{"_index":3014,"title":{},"body":{"classes/WorkflowNodeDto.html":{}}}],["generation.dto.ts:39",{"_index":3012,"title":{},"body":{"classes/WorkflowNodeDto.html":{}}}],["generation.dto.ts:42",{"_index":3010,"title":{},"body":{"classes/WorkflowNodeDto.html":{}}}],["generation.dto.ts:48",{"_index":2997,"title":{},"body":{"classes/WorkflowEdgeDto.html":{}}}],["generation.dto.ts:52",{"_index":2998,"title":{},"body":{"classes/WorkflowEdgeDto.html":{}}}],["generation.dto.ts:56",{"_index":3000,"title":{},"body":{"classes/WorkflowEdgeDto.html":{}}}],["generation.dto.ts:61",{"_index":2999,"title":{},"body":{"classes/WorkflowEdgeDto.html":{}}}],["generation.dto.ts:66",{"_index":3001,"title":{},"body":{"classes/WorkflowEdgeDto.html":{}}}],["generation.dto.ts:72",{"_index":1891,"title":{},"body":{"classes/GenerateWorkflowDto.html":{}}}],["generation.dto.ts:78",{"_index":1900,"title":{},"body":{"classes/GenerateWorkflowDto.html":{}}}],["generation.dto.ts:85",{"_index":1897,"title":{},"body":{"classes/GenerateWorkflowDto.html":{}}}],["generation.dto.ts:92",{"_index":1895,"title":{},"body":{"classes/GenerateWorkflowDto.html":{}}}],["generation.dto.ts:98",{"_index":2538,"title":{},"body":{"classes/RefineWorkflowDto.html":{}}}],["generationoptions",{"_index":378,"title":{"interfaces/GenerationOptions.html":{}},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["generationoptionsdto",{"_index":1898,"title":{"classes/GenerationOptionsDto.html":{}},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["generic",{"_index":1107,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"miscellaneous/variables.html":{}}}],["get(\":id",{"_index":3070,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["get(\"custom",{"_index":1356,"title":{},"body":{"controllers/BlocksController.html":{}}}],["get(\"custom/:id",{"_index":1361,"title":{},"body":{"controllers/BlocksController.html":{}}}],["get(\"logs",{"_index":2256,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["get(\"metrics",{"_index":1522,"title":{},"body":{"controllers/DashboardController.html":{}}}],["get(\"profile",{"_index":2604,"title":{},"body":{"controllers/UserController.html":{}}}],["get(\"schema",{"_index":1353,"title":{},"body":{"controllers/BlocksController.html":{}}}],["get(\"transactions",{"_index":2844,"title":{},"body":{"controllers/WalletsController.html":{}}}],["get(\"types",{"_index":1350,"title":{},"body":{"controllers/BlocksController.html":{}}}],["get(\"unread",{"_index":2250,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["get(\"usage",{"_index":2609,"title":{},"body":{"controllers/UserController.html":{}}}],["get(':id')@apioperation({summary",{"_index":3049,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["get('custom')@apioperation({summary",{"_index":1339,"title":{},"body":{"controllers/BlocksController.html":{}}}],["get('custom/:id')@apioperation({summary",{"_index":1336,"title":{},"body":{"controllers/BlocksController.html":{}}}],["get('logs')@apioperation({summary",{"_index":2223,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["get('metrics')@apioperation({summary",{"_index":1513,"title":{},"body":{"controllers/DashboardController.html":{}}}],["get('profile')@apioperation({summary",{"_index":2588,"title":{},"body":{"controllers/UserController.html":{}}}],["get('transactions')@apioperation({summary",{"_index":2834,"title":{},"body":{"controllers/WalletsController.html":{}}}],["get('unread",{"_index":2229,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["get('usage')@apioperation({summary",{"_index":2592,"title":{},"body":{"controllers/UserController.html":{}}}],["get()@apioperation({summary",{"_index":2226,"title":{},"body":{"controllers/NotificationsController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["get_balance",{"_index":1126,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["get_block",{"_index":3343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_logs",{"_index":3344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_nft_balance",{"_index":3339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_token_balance",{"_index":3337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_token_info",{"_index":3338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_transaction",{"_index":3341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["get_transaction_receipt",{"_index":3342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getbalance",{"_index":2788,"title":{},"body":{"interfaces/WalletProvider.html":{}}}],["getbalance(address",{"_index":2562,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["getblockmetadata",{"_index":1163,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["getblockschema",{"_index":1323,"title":{},"body":{"controllers/BlocksController.html":{},"injectables/BlocksService.html":{}}}],["getblockschema(@query(\"type",{"_index":1354,"title":{},"body":{"controllers/BlocksController.html":{}}}],["getblockschema(type",{"_index":1215,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["getblocktype(data",{"_index":1169,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["getblocktypes",{"_index":1197,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["getcustomblock",{"_index":1230,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["getcustomblock(@param(\"id",{"_index":1362,"title":{},"body":{"controllers/BlocksController.html":{}}}],["getcustomblock(id",{"_index":1335,"title":{},"body":{"controllers/BlocksController.html":{},"injectables/BlocksService.html":{}}}],["getcustomblocks",{"_index":1324,"title":{},"body":{"controllers/BlocksController.html":{},"injectables/BlocksService.html":{}}}],["getcustomblocks(ispublic",{"_index":1338,"title":{},"body":{"controllers/BlocksController.html":{}}}],["getcustomblocks(userid",{"_index":1220,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["getdefaultconfig",{"_index":1052,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["getheatmap",{"_index":1733,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["getheatmap(userid",{"_index":1747,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["getmagicservice",{"_index":2078,"title":{},"body":{"classes/MagicService.html":{}}}],["getmetrics",{"_index":1511,"title":{},"body":{"controllers/DashboardController.html":{},"injectables/DashboardService.html":{}}}],["getmetrics(@request",{"_index":1523,"title":{},"body":{"controllers/DashboardController.html":{}}}],["getmetrics(req",{"_index":1512,"title":{},"body":{"controllers/DashboardController.html":{}}}],["getmetrics(userid",{"_index":1535,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getnotificationlogs",{"_index":2217,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["getnotificationlogs(@request",{"_index":2257,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getnotificationlogs(req",{"_index":2222,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getnotificationlogs(userid",{"_index":2272,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["getnotifications",{"_index":2218,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["getnotifications(req",{"_index":2225,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getnotifications(userid",{"_index":2274,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["getpreferences(userid",{"_index":2195,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["getprofile",{"_index":2584,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getprofile(@request",{"_index":2605,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(req",{"_index":2587,"title":{},"body":{"controllers/UserController.html":{}}}],["getprofile(userid",{"_index":2679,"title":{},"body":{"injectables/UserService.html":{}}}],["getqueuestats",{"_index":2427,"title":{},"body":{"injectables/QueueService.html":{}}}],["getstats",{"_index":1734,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["getstats(userid",{"_index":1749,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["gettime",{"_index":1584,"title":{},"body":{"injectables/DashboardService.html":{}}}],["getting",{"_index":3180,"title":{"index.html":{}},"body":{}}],["gettransactions",{"_index":2786,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["gettrends",{"_index":1735,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["gettrends(userid",{"_index":1751,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["getunreadcount",{"_index":2219,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["getunreadcount(@request",{"_index":2251,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getunreadcount(req",{"_index":2228,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["getunreadcount(userid",{"_index":2276,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["getusage",{"_index":2585,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["getusage(@request",{"_index":2611,"title":{},"body":{"controllers/UserController.html":{}}}],["getusage(req",{"_index":2591,"title":{},"body":{"controllers/UserController.html":{}}}],["getusage(userid",{"_index":2681,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserwallets",{"_index":2818,"title":{},"body":{"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["getuserwallets(req",{"_index":2830,"title":{},"body":{"controllers/WalletsController.html":{}}}],["getuserwallets(userid",{"_index":2855,"title":{},"body":{"injectables/WalletsService.html":{}}}],["getwalletbalance",{"_index":2784,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["getwallettransactions",{"_index":2819,"title":{},"body":{"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["getwallettransactions(req",{"_index":2833,"title":{},"body":{"controllers/WalletsController.html":{}}}],["getwallettransactions(userid",{"_index":2857,"title":{},"body":{"injectables/WalletsService.html":{}}}],["global",{"_index":743,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["global.prisma",{"_index":3394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["globe",{"_index":1110,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["goal",{"_index":644,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["gpt",{"_index":404,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["gracefully",{"_index":465,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["greater_than",{"_index":3314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["greater_than_or_equal",{"_index":3316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["group",{"_index":1842,"title":{},"body":{"injectables/ExecutionsService.html":{},"miscellaneous/variables.html":{}}}],["group_by",{"_index":3370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groupby",{"_index":3371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gt",{"_index":3315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gte",{"_index":3317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guards",{"_index":736,"title":{},"body":{"modules/AppModule.html":{}}}],["guards/jwt",{"_index":921,"title":{},"body":{"modules/AuthModule.html":{}}}],["handle",{"_index":463,"title":{},"body":{"injectables/AiService.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateWalletDto.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["handlerequest",{"_index":1914,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlerequest(err",{"_index":1921,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["handlers",{"_index":1023,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["handlewebhook",{"_index":978,"title":{},"body":{"controllers/BillingController.html":{},"injectables/BillingService.html":{}}}],["handlewebhook(@body",{"_index":1000,"title":{},"body":{"controllers/BillingController.html":{}}}],["handlewebhook(rawbody",{"_index":984,"title":{},"body":{"controllers/BillingController.html":{},"injectables/BillingService.html":{}}}],["handling",{"_index":633,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["hash",{"_index":1492,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{}}}],["hasmore",{"_index":2300,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["hasoauthuserinfo",{"_index":793,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["header",{"_index":1943,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["headers",{"_index":1111,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["heatmap",{"_index":1862,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["heatmapmap",{"_index":1865,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["heatmapmap.get(datekey",{"_index":1870,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["heatmapmap.has(datekey",{"_index":1867,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["heatmapmap.set(datekey",{"_index":1868,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["heavy",{"_index":514,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["help",{"_index":451,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["helper",{"_index":93,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["here",{"_index":2069,"title":{},"body":{"classes/MagicService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["hint",{"_index":1903,"title":{},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["hour",{"_index":948,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["hourly",{"_index":3281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hours",{"_index":3277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":563,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:3000",{"_index":856,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["http_call",{"_index":588,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["http_request",{"_index":561,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["httpexception",{"_index":768,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlocksController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/UserController.html":{}}}],["httpexception(\"unauthorized",{"_index":1359,"title":{},"body":{"controllers/BlocksController.html":{},"controllers/UserController.html":{}}}],["httpexception(errormessage",{"_index":878,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["httponly",{"_index":837,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["https://checkout.stripe.com/session",{"_index":1017,"title":{},"body":{"injectables/BillingService.html":{}}}],["https://openrouter.ai/api/v1",{"_index":436,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["httpstatus",{"_index":769,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlocksController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/UserController.html":{},"controllers/WorkflowsController.html":{}}}],["httpstatus.bad_request",{"_index":786,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["httpstatus.created",{"_index":3074,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["httpstatus.internal_server_error",{"_index":895,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlocksController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/UserController.html":{}}}],["httpstatus.no_content",{"_index":3079,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["httpstatus.not_found",{"_index":3071,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["httpstatus.ok",{"_index":3068,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["httpstatus.unauthorized",{"_index":805,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlocksController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/UserController.html":{}}}],["iat",{"_index":903,"title":{},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["icon",{"_index":604,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["iconname",{"_index":424,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":76,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["id'})@apiresponse({status",{"_index":3050,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["id'})@isnumber",{"_index":1452,"title":{},"body":{"classes/CreateWalletDto.html":{}}}],["id'})@isstring",{"_index":2996,"title":{},"body":{"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{}}}],["identifier",{"_index":1424,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["idle",{"_index":668,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["ids",{"_index":613,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/QueueService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["ignoreexpiration",{"_index":1950,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["immediate",{"_index":1644,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["immediately",{"_index":624,"title":{},"body":{"injectables/AiService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{}}}],["implement",{"_index":460,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"injectables/QueueService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["implementation",{"_index":56,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"injectables/QueueService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["implemented",{"_index":2206,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["implements",{"_index":2395,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/QueueService.html":{}}}],["import",{"_index":28,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{}}}],["import(\"amqplib",{"_index":2475,"title":{},"body":{"injectables/QueueService.html":{}}}],["imports",{"_index":718,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlocksModule.html":{},"modules/ExecutionsModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{}}}],["improve",{"_index":634,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["in_app",{"_index":1092,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["in_app\"]).default(\"in_app",{"_index":3274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["include",{"_index":860,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ExecutionRepository.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/UserRepository.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{}}}],["included",{"_index":872,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/Workflow.html":{}}}],["includes",{"_index":2942,"title":{},"body":{"interfaces/Workflow.html":{}}}],["includeshared",{"_index":2937,"title":{},"body":{"interfaces/Workflow.html":{}}}],["including",{"_index":2047,"title":{},"body":{"classes/MagicService.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index.ts",{"_index":3250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicating",{"_index":2334,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["infercategoryfromname",{"_index":1379,"title":{},"body":{"injectables/BlocksService.html":{}}}],["infercategoryfromname(blocktype",{"_index":1311,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{}}}],["information",{"_index":905,"title":{},"body":{"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"interfaces/BlockMetadata.html":{},"interfaces/JwtPayload-2.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"miscellaneous/variables.html":{}}}],["initialize",{"_index":1844,"title":{},"body":{"injectables/ExecutionsService.html":{},"classes/MagicService.html":{},"injectables/QueueService.html":{}}}],["initialized",{"_index":2057,"title":{},"body":{"classes/MagicService.html":{},"injectables/QueueService.html":{}}}],["initializes",{"_index":2397,"title":{},"body":{"injectables/PrismaService.html":{}}}],["initqueue",{"_index":2428,"title":{},"body":{"injectables/QueueService.html":{}}}],["inject",{"_index":2096,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["inject(\"node_executions_repository",{"_index":2098,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["injectable",{"_index":344,"title":{"injectables/AiService.html":{},"injectables/AuthService.html":{},"injectables/BillingService.html":{},"injectables/BlocksService.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"injectables/NotificationsService.html":{},"injectables/PrismaService.html":{},"injectables/QueueService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"injectables/WalletsService.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{}},"body":{"injectables/AiService.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"injectables/BillingService.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"injectables/NotificationsService.html":{},"injectables/PrismaService.html":{},"injectables/QueueService.html":{},"interfaces/TokenResponse.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{}}}],["injectables",{"_index":345,"title":{},"body":{"injectables/AiService.html":{},"injectables/AuthService.html":{},"injectables/BillingService.html":{},"injectables/BlocksService.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"injectables/NotificationsService.html":{},"injectables/PrismaService.html":{},"injectables/QueueService.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"injectables/WalletsService.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{},"overview.html":{}}}],["input",{"_index":62,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"classes/CreateExecutionDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["input.defaultvalue",{"_index":1292,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["input.description",{"_index":1290,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["input.name",{"_index":1288,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["input.required",{"_index":1291,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["input.type",{"_index":1289,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["input/output",{"_index":1129,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["input_data",{"_index":1428,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["inputcount",{"_index":666,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["inputs",{"_index":19,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["inputs/outputs",{"_index":32,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["insert",{"_index":1154,"title":{},"body":{"interfaces/BlockMetadata.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"miscellaneous/variables.html":{}}}],["install",{"_index":3184,"title":{},"body":{"index.html":{}}}],["instance",{"_index":2076,"title":{},"body":{"classes/MagicService.html":{}}}],["instanceof",{"_index":876,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/WalletsService.html":{}}}],["instead",{"_index":2113,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["integrate",{"_index":1015,"title":{},"body":{"injectables/BillingService.html":{}}}],["integration",{"_index":2207,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/enumerations.html":{}}}],["integrations",{"_index":560,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["intelligent",{"_index":605,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["intelligent_x",{"_index":597,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["intelligent_y",{"_index":598,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["intelligently",{"_index":625,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["intensity",{"_index":511,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AICustomBlockData.html":{},"interfaces/AuthResult.html":{},"interfaces/AuthUser.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NodeExecution.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NodeExecution.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/AuthResult.html":{},"interfaces/AuthUser.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NodeExecution.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"overview.html":{}}}],["internal",{"_index":1352,"title":{},"body":{"controllers/BlocksController.html":{}}}],["interval",{"_index":1096,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["invalid",{"_index":647,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["invalidate",{"_index":885,"title":{},"body":{"controllers/AuthController.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/RefreshToken.html":{}}}],["invalidatealltokens",{"_index":1966,"title":{},"body":{"classes/JwtService.html":{}}}],["invalidatealltokens(userid",{"_index":1977,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["is_empty",{"_index":3330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_not_empty",{"_index":3331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_not_null",{"_index":3329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_null",{"_index":3328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":1926,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isactive",{"_index":673,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["isadmin",{"_index":2332,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["isarray",{"_index":1504,"title":{},"body":{"classes/CreateWorkflowDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["isboolean",{"_index":1462,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["iscompleted",{"_index":670,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["isconnected",{"_index":2564,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["isdatestring",{"_index":1639,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["isemail",{"_index":1461,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["isenabled",{"_index":425,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["isexecuting",{"_index":672,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["isfailed",{"_index":671,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["isglobal",{"_index":741,"title":{},"body":{"modules/AppModule.html":{}}}],["isnumber",{"_index":1463,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["iso",{"_index":1631,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["isoauth",{"_index":778,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["isobject",{"_index":1406,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["isoptional",{"_index":1404,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["ispublic",{"_index":77,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":1405,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["issuer",{"_index":2043,"title":{},"body":{"classes/MagicService.html":{}}}],["isuseradmin",{"_index":2371,"title":{},"body":{"classes/PolicyService.html":{}}}],["isuseradmin(userid",{"_index":2355,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["it's",{"_index":1176,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["items",{"_index":1411,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"miscellaneous/variables.html":{}}}],["iteration",{"_index":587,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["iterations",{"_index":1147,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["javascript",{"_index":47,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["job",{"_index":2494,"title":{},"body":{"injectables/QueueService.html":{},"injectables/WorkflowsService.html":{}}}],["jobs",{"_index":2501,"title":{},"body":{"injectables/QueueService.html":{}}}],["join",{"_index":1310,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["json",{"_index":58,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["json.parse",{"_index":2060,"title":{},"body":{"classes/MagicService.html":{}}}],["json.parse(cleanedtext",{"_index":488,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["json.parse(dbblock.blockdata",{"_index":1278,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["json.parse(dbblock.tags",{"_index":1280,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["json.stringify(blockdata",{"_index":1243,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["json.stringify(data.tags",{"_index":1244,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["json.stringify(edges",{"_index":519,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["json.stringify(existingedges",{"_index":639,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["json.stringify(existingnodes",{"_index":638,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["json.stringify(nodes",{"_index":518,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["json.stringify(object.values(blocktype",{"_index":538,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["json.stringify(object.values(datatype",{"_index":443,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["json.stringify(options",{"_index":520,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["json_transform",{"_index":57,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["jsonwebtoken",{"_index":1986,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["jwt",{"_index":806,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"dependencies.html":{}}}],["jwt.sign",{"_index":1998,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["jwt.verify(token",{"_index":1999,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["jwt_expires_in",{"_index":1962,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["jwt_secret",{"_index":1963,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["jwtauthguard",{"_index":737,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"overview.html":{}}}],["jwtfromrequest",{"_index":1939,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":721,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":742,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":901,"title":{"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{}},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{}}}],["jwtservice",{"_index":770,"title":{"classes/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"miscellaneous/variables.html":{}}}],["jwtstrategy",{"_index":914,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["key",{"_index":746,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/RefreshToken.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/variables.html":{}}}],["label",{"_index":69,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["language",{"_index":534,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["last",{"_index":1487,"title":{},"body":{"classes/CreateWalletDto.html":{},"injectables/DashboardService.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["later",{"_index":2368,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"controllers/WorkflowsController.html":{}}}],["later'})@apiresponse({status",{"_index":3040,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["left",{"_index":1122,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["legacy",{"_index":1072,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":331,"title":{},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["length",{"_index":1568,"title":{},"body":{"injectables/DashboardService.html":{}}}],["less_than",{"_index":3318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["less_than_or_equal",{"_index":3320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["letter",{"_index":2453,"title":{},"body":{"injectables/QueueService.html":{}}}],["level",{"_index":862,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["library",{"_index":2506,"title":{},"body":{"injectables/QueueService.html":{}}}],["light",{"_index":512,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["limit",{"_index":1414,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWorkflowDto.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"classes/JwtService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateWorkflowDto.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{}}}],["limitnum",{"_index":2247,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["link",{"_index":762,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/BlockMetadata.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"miscellaneous/variables.html":{}}}],["linked",{"_index":2744,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["literal",{"_index":266,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"controllers/BillingController.html":{},"interfaces/BlockExecutionContext.html":{},"controllers/DashboardController.html":{},"injectables/ExecutionRepository.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/PaginatedResult.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/Session.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"controllers/WalletsController.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{}}}],["log",{"_index":163,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"miscellaneous/variables.html":{}}}],["log.createdat.toisostring",{"_index":2144,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["log.id",{"_index":2140,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["log.level",{"_index":2143,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["log.message",{"_index":2142,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["log.nodeexecutionid",{"_index":2141,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["logaudit",{"_index":172,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["logaudit(action",{"_index":971,"title":{},"body":{"classes/BaseRepository.html":{}}}],["logauditevent",{"_index":2372,"title":{},"body":{"classes/PolicyService.html":{}}}],["logauditevent(action",{"_index":2365,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["logged",{"_index":893,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{}}}],["logger",{"_index":1025,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["logging",{"_index":234,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"classes/MagicService.html":{},"interfaces/Workflow.html":{}}}],["logic",{"_index":40,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["logical",{"_index":573,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["logicaloperator",{"_index":3334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logictype",{"_index":46,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["login",{"_index":755,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["login(body",{"_index":757,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":928,"title":{"classes/LoginDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["logout",{"_index":756,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{}}}],["logout(@request",{"_index":880,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["logout(req",{"_index":764,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutuser",{"_index":2035,"title":{},"body":{"classes/MagicService.html":{}}}],["logoutuser(issuer",{"_index":2038,"title":{},"body":{"classes/MagicService.html":{}}}],["logs",{"_index":92,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"injectables/NodeLogsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"index.html":{}}}],["logs.service",{"_index":1728,"title":{},"body":{"modules/ExecutionsModule.html":{}}}],["logs.service.ts",{"_index":2132,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["logs.service.ts:12",{"_index":2136,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["logs.service.ts:6",{"_index":2134,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["longer",{"_index":2945,"title":{},"body":{"interfaces/Workflow.html":{}}}],["look",{"_index":1177,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["loop",{"_index":585,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["looptype",{"_index":1146,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["lowertype",{"_index":1312,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["lowertype.includes(\"condition",{"_index":1317,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["lowertype.includes(\"delay",{"_index":1318,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["lowertype.includes(\"loop",{"_index":1319,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["lowertype.includes(\"monitor",{"_index":1316,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["lowertype.includes(\"schedule",{"_index":1314,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["lowertype.includes(\"transform",{"_index":1320,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["lowertype.includes(\"webhook",{"_index":1315,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["lt",{"_index":3319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lte",{"_index":3321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["magic",{"_index":761,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/Session.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["magic.service.ts",{"_index":3247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["magic_secret_key",{"_index":2051,"title":{},"body":{"classes/MagicService.html":{},"miscellaneous/variables.html":{}}}],["magic_wallet",{"_index":3175,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["magicauthpayload",{"_index":776,"title":{"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["magicpayload",{"_index":796,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["magicservice",{"_index":2033,"title":{"classes/MagicService.html":{}},"body":{"classes/MagicService.html":{},"miscellaneous/variables.html":{}}}],["magicserviceinstance",{"_index":2077,"title":{},"body":{"classes/MagicService.html":{},"miscellaneous/variables.html":{}}}],["mail",{"_index":1086,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["main",{"_index":1945,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["maintaining",{"_index":523,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["make",{"_index":562,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["management",{"_index":2515,"title":{},"body":{"injectables/QueueService.html":{}}}],["manipulate",{"_index":582,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["manual",{"_index":3132,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["many",{"_index":245,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["map",{"_index":1139,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"injectables/UserRepository.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["map(([date",{"_index":1857,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["map((input",{"_index":1287,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["map((output",{"_index":1294,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["map((word",{"_index":1307,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["mapdatabasetocustomblockdefinition",{"_index":1274,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["mapdatabasetocustomblockdefinition(dbblock",{"_index":1391,"title":{},"body":{"injectables/BlocksService.html":{}}}],["maps",{"_index":2551,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["maptoworkflow(workflow",{"_index":2922,"title":{},"body":{"interfaces/Workflow.html":{}}}],["mark",{"_index":2175,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{}}}],["markallasread",{"_index":2220,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["markallasread(@request",{"_index":2254,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["markallasread(req",{"_index":2232,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["markallasread(userid",{"_index":2178,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/NotificationsService.html":{}}}],["markasread(id",{"_index":2176,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["marked_count",{"_index":2285,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["match",{"_index":54,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"controllers/AuthController.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NodeExecution.html":{},"interfaces/Workflow.html":{}}}],["matcher",{"_index":3252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matches",{"_index":1172,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/Workflow.html":{}}}],["matching",{"_index":102,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(ms",{"_index":1540,"title":{},"body":{"injectables/DashboardService.html":{}}}],["math.floor(seconds",{"_index":1541,"title":{},"body":{"injectables/DashboardService.html":{}}}],["math.floor(sorteddurations.length",{"_index":1816,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["math.max(...existingnodes.map((n",{"_index":687,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["math.max(params.page",{"_index":2307,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["math.max(peakconcurrency",{"_index":1836,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["math.min(params.limit",{"_index":2308,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["math.round",{"_index":1604,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["math.round((prevsuccessfulexecutions",{"_index":1595,"title":{},"body":{"injectables/DashboardService.html":{}}}],["math.round((successfulexecutions",{"_index":1574,"title":{},"body":{"injectables/DashboardService.html":{}}}],["math.round((successrate",{"_index":1607,"title":{},"body":{"injectables/DashboardService.html":{}}}],["math.round(data.totalduration",{"_index":1884,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["math.round(prevtotaldurationms",{"_index":1600,"title":{},"body":{"injectables/DashboardService.html":{}}}],["math.round(totaldurationms",{"_index":1588,"title":{},"body":{"injectables/DashboardService.html":{}}}],["max",{"_index":1821,"title":{},"body":{"injectables/ExecutionsService.html":{},"miscellaneous/variables.html":{}}}],["max_limit",{"_index":2304,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["maxage",{"_index":841,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["maximum",{"_index":2172,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["maxsize",{"_index":3362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["maxtokens",{"_index":482,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["maxx",{"_index":686,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["median",{"_index":1812,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["medianduration",{"_index":1799,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["medium",{"_index":513,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["member",{"_index":2347,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["members",{"_index":203,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["membership",{"_index":2977,"title":{},"body":{"interfaces/Workflow.html":{}}}],["mergeworkflows",{"_index":356,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["mergeworkflows(existingnodes",{"_index":381,"title":{},"body":{"injectables/AiService.html":{}}}],["message",{"_index":115,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"miscellaneous/variables.html":{}}}],["message_send",{"_index":591,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["messages",{"_index":476,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"injectables/QueueService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["meta",{"_index":1432,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["metadata",{"_index":243,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"classes/WorkflowExecutionDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata.category",{"_index":1181,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["metadata.defaultconfig",{"_index":1206,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["metadata.description",{"_index":1204,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["metadata.icon",{"_index":1205,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["metadata.label",{"_index":1203,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["metadata.ts",{"_index":3241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metamask",{"_index":2728,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["method",{"_index":1045,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"miscellaneous/variables.html":{}}}],["methodname",{"_index":3355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodparams",{"_index":3356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":261,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseRepository.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockHandler.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"injectables/QueueService.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletProvider.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["metrics",{"_index":1515,"title":{},"body":{"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["metrics'})@apiresponse({status",{"_index":1514,"title":{},"body":{"controllers/DashboardController.html":{}}}],["mid",{"_index":1815,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["middleware",{"_index":3255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["middleware.ts",{"_index":3239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["milliseconds",{"_index":1803,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["min",{"_index":3301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mini",{"_index":406,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["minutely",{"_index":3280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minutes",{"_index":1106,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/DashboardService.html":{},"miscellaneous/variables.html":{}}}],["minutes}m",{"_index":1543,"title":{},"body":{"injectables/DashboardService.html":{}}}],["miscellaneous",{"_index":3164,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":792,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["mission",{"_index":532,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["mock",{"_index":1218,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/MagicService.html":{}}}],["mode",{"_index":1473,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["model",{"_index":134,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["model_to_use",{"_index":403,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["modify",{"_index":630,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["module",{"_index":327,"title":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{}},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["modules",{"_index":329,"title":{"modules.html":{}},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"modules.html":{},"overview.html":{}}}],["monitor",{"_index":541,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["monthly",{"_index":1483,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"miscellaneous/variables.html":{}}}],["monthly_execution_quota",{"_index":1485,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["monthly_executions_used",{"_index":1486,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["monthlyexecutionquota",{"_index":2642,"title":{},"body":{"injectables/UserRepository.html":{}}}],["monthlyexecutionsused",{"_index":2643,"title":{},"body":{"injectables/UserRepository.html":{}}}],["more",{"_index":1840,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["move",{"_index":1420,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["multiple",{"_index":2187,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["multiply",{"_index":3297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mumbai",{"_index":2729,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["n.position.x",{"_index":688,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["name",{"_index":20,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"classes/RegisterDto.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["named",{"_index":474,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["names",{"_index":2447,"title":{},"body":{"injectables/QueueService.html":{},"injectables/UserRepository.html":{}}}],["natural",{"_index":533,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["need",{"_index":2148,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/QueueService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["needed",{"_index":2369,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/UserRepository.html":{},"interfaces/Workflow.html":{}}}],["needs",{"_index":2753,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["neq",{"_index":3313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs",{"_index":819,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"index.html":{},"properties.html":{}}}],["nestjs/common",{"_index":292,"title":{},"body":{"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"injectables/ExecutionRepository.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"injectables/PrismaService.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"interfaces/TokenResponse.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":720,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":724,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":722,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/TokenResponse.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":917,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3143,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":296,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"controllers/DashboardController.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"controllers/NotificationsController.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"controllers/WalletsController.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"dependencies.html":{}}}],["network",{"_index":1127,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["network_id",{"_index":2550,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["networks",{"_index":1125,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["new",{"_index":99,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateExecutionDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["newedges",{"_index":383,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["newname",{"_index":2986,"title":{},"body":{"interfaces/Workflow.html":{}}}],["newnodes",{"_index":382,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["newnodes.map((node",{"_index":690,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["newrefreshtoken",{"_index":2025,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["newtoken",{"_index":2023,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["next",{"_index":833,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{}}}],["next.js",{"_index":795,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{}}}],["nextcursor",{"_index":2301,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["node",{"_index":594,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["node.position.x",{"_index":691,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["node.position.y",{"_index":692,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["node/data",{"_index":1166,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["node_execution_id",{"_index":1440,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["node_executions_repository",{"_index":1729,"title":{},"body":{"modules/ExecutionsModule.html":{}}}],["node_id",{"_index":1035,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["nodecategory",{"_index":29,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["nodecategory.action",{"_index":1085,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"miscellaneous/variables.html":{}}}],["nodecategory.logic",{"_index":1101,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"miscellaneous/variables.html":{}}}],["nodecategory.trigger",{"_index":1075,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"miscellaneous/variables.html":{}}}],["nodedata.data",{"_index":659,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["nodedata.id",{"_index":657,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["nodedata.position",{"_index":658,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["nodeexec",{"_index":2102,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexec.completedat?.toisostring",{"_index":2108,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexec.error",{"_index":2109,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexec.executionid",{"_index":2104,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexec.id",{"_index":2103,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexec.nodeid",{"_index":2105,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexec.outputdata",{"_index":2111,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexec.startedat?.toisostring",{"_index":2107,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexec.status",{"_index":2106,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecution",{"_index":1037,"title":{"interfaces/NodeExecution.html":{}},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"injectables/NodeExecutionsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["nodeexecution.completedat?.toisostring",{"_index":2123,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecution.error",{"_index":2124,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecution.executionid",{"_index":2119,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecution.id",{"_index":2118,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecution.nodeid",{"_index":2120,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecution.outputdata",{"_index":2125,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecution.startedat?.toisostring",{"_index":2122,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecution.status",{"_index":2121,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecutiondto",{"_index":1436,"title":{"classes/NodeExecutionDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["nodeexecutionid",{"_index":1681,"title":{},"body":{"injectables/ExecutionRepository.html":{},"injectables/NodeLogsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"index.html":{}}}],["nodeexecutions",{"_index":1042,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"injectables/NodeExecutionsService.html":{}}}],["nodeexecutions.map",{"_index":2101,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["nodeexecutionsservice",{"_index":1722,"title":{"injectables/NodeExecutionsService.html":{}},"body":{"modules/ExecutionsModule.html":{},"injectables/NodeExecutionsService.html":{},"overview.html":{}}}],["nodeid",{"_index":656,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{}}}],["nodeinputs",{"_index":1704,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["nodelog",{"_index":1690,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["nodelogdto",{"_index":1438,"title":{"classes/NodeLogDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["nodelogs",{"_index":2137,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["nodelogs.map",{"_index":2139,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["nodelogsservice",{"_index":1723,"title":{"injectables/NodeLogsService.html":{}},"body":{"modules/ExecutionsModule.html":{},"injectables/NodeLogsService.html":{},"overview.html":{}}}],["nodeoutputs",{"_index":1705,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["nodes",{"_index":318,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/NodeExecution.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateWorkflowDto.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["nodes'})@isarray()@validatenested({each",{"_index":2534,"title":{},"body":{"classes/RefineWorkflowDto.html":{}}}],["nodes.map((nodedata",{"_index":655,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["nodestatus",{"_index":669,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["nodetype",{"_index":422,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["normally",{"_index":2976,"title":{},"body":{"interfaces/Workflow.html":{}}}],["not_between",{"_index":3322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_contains",{"_index":3325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_equals",{"_index":3312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_in",{"_index":3323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["note",{"_index":2040,"title":{},"body":{"classes/MagicService.html":{},"interfaces/Workflow.html":{}}}],["notfoundexception",{"_index":1760,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/UserService.html":{},"injectables/WalletsService.html":{},"injectables/WorkflowsService.html":{}}}],["notfoundexception(\"user",{"_index":2685,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception(\"wallet",{"_index":2892,"title":{},"body":{"injectables/WalletsService.html":{}}}],["notfoundexception(`execution",{"_index":1763,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["notfoundexception(`workflow",{"_index":3118,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["notification",{"_index":548,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notificationcreateinput",{"_index":2145,"title":{"interfaces/NotificationCreateInput.html":{}},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["notificationid",{"_index":2349,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["notificationpreference",{"_index":2147,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["notificationpreferencecreateinput",{"_index":2157,"title":{"interfaces/NotificationPreferenceCreateInput.html":{}},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["notificationpreferences",{"_index":2201,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["notificationpreferenceupdateinput",{"_index":2163,"title":{"interfaces/NotificationPreferenceUpdateInput.html":{}},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["notificationrepository",{"_index":1615,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/NotificationsService.html":{},"overview.html":{}}}],["notifications",{"_index":547,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateWalletDto.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["notifications.controller",{"_index":2265,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["notifications.service",{"_index":2240,"title":{},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{}}}],["notifications/notifications.module",{"_index":732,"title":{},"body":{"modules/AppModule.html":{}}}],["notificationscontroller",{"_index":2215,"title":{"controllers/NotificationsController.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{}}}],["notificationsmodule",{"_index":714,"title":{"modules/NotificationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NotificationsModule.html":{},"modules.html":{},"overview.html":{}}}],["notificationsservice",{"_index":2239,"title":{"injectables/NotificationsService.html":{}},"body":{"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"overview.html":{}}}],["notificationupdateinput",{"_index":2156,"title":{"interfaces/NotificationUpdateInput.html":{}},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["now",{"_index":1216,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"classes/JwtService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["now.gettime",{"_index":2500,"title":{},"body":{"injectables/QueueService.html":{}}}],["npm",{"_index":3187,"title":{},"body":{"index.html":{}}}],["null",{"_index":180,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateWalletDto.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"classes/ProfileResponseDto.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":2914,"title":{},"body":{"interfaces/Workflow.html":{}}}],["number",{"_index":36,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/BlockParameter.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserRepository.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["number})@apiquery({name",{"_index":3046,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["numeric",{"_index":2726,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["oauthprovider",{"_index":779,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["oauthuserinfo",{"_index":780,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["object",{"_index":38,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/RefreshToken.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["object\"]).default(\"json",{"_index":3368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.assign(this",{"_index":1419,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["object.entries(block_catalog).find",{"_index":1179,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["object.values(blocktype).includes(uppertype",{"_index":1190,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["object.values(nodecategory).includes(nodetype",{"_index":1175,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["object.values(zyrablocktype).map",{"_index":1200,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["offset",{"_index":3195,"title":{},"body":{"index.html":{}}}],["old",{"_index":2027,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["omit",{"_index":2185,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["once",{"_index":2981,"title":{},"body":{"interfaces/Workflow.html":{}}}],["oneweekago",{"_index":1545,"title":{},"body":{"injectables/DashboardService.html":{}}}],["oneweekago.setdate(oneweekago.getdate",{"_index":1547,"title":{},"body":{"injectables/DashboardService.html":{}}}],["onmoduledestroy",{"_index":2390,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/QueueService.html":{}}}],["onmoduleinit",{"_index":2391,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/QueueService.html":{}}}],["openrouter",{"_index":348,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["openrouter/ai",{"_index":391,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"dependencies.html":{}}}],["operation",{"_index":232,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"miscellaneous/variables.html":{}}}],["operation(tx",{"_index":239,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["operations",{"_index":469,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["operators",{"_index":1119,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["optimism",{"_index":3346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optimize",{"_index":631,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["optional",{"_index":114,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":70,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":616,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"index.html":{}}}],["orderby",{"_index":1225,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/ExecutionRepository.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{}}}],["orderdirection",{"_index":2299,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["organization",{"_index":2971,"title":{},"body":{"interfaces/Workflow.html":{}}}],["organizationid",{"_index":2974,"title":{},"body":{"interfaces/Workflow.html":{}}}],["otherwise",{"_index":200,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/Workflow.html":{}}}],["out",{"_index":341,"title":{},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["output",{"_index":66,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"classes/CreateExecutionDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{}}}],["output.description",{"_index":1297,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["output.name",{"_index":1295,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["output.required",{"_index":1298,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["output.type",{"_index":1296,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["output_data",{"_index":1429,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["outputcount",{"_index":667,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["outputformat",{"_index":1141,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["outputname",{"_index":449,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["outputs",{"_index":21,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["overlap",{"_index":685,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["overridden",{"_index":191,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["override",{"_index":2339,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["overview",{"_index":539,"title":{"overview.html":{}},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"overview.html":{}}}],["owned",{"_index":1272,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/WalletsService.html":{}}}],["ownership",{"_index":1766,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/WalletsService.html":{}}}],["owns",{"_index":2894,"title":{},"body":{"injectables/WalletsService.html":{},"injectables/WorkflowsService.html":{}}}],["package",{"_index":400,"title":{"dependencies.html":{},"properties.html":{}},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["page",{"_index":1412,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["pagenum",{"_index":2245,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["pages",{"_index":1416,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["paginate",{"_index":2315,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["paginated",{"_index":2165,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["paginateddata",{"_index":3114,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["paginatedexecutionsresponsedto",{"_index":1423,"title":{"classes/PaginatedExecutionsResponseDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["paginatedquery",{"_index":2168,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["paginatedresult",{"_index":2295,"title":{"interfaces/PaginatedResult.html":{}},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["paginatedworkflowsresponsedto",{"_index":1508,"title":{"classes/PaginatedWorkflowsResponseDto.html":{}},"body":{"classes/CreateWorkflowDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["paginatedworkflowsresponsedto})@apiquery({name",{"_index":3045,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["pagination",{"_index":1431,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["pagination.ts",{"_index":3245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginationmetadto",{"_index":1409,"title":{"classes/PaginationMetaDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["paginationmetadto(partial.meta",{"_index":1435,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["paginationparams",{"_index":2151,"title":{"interfaces/PaginationParams.html":{}},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["param",{"_index":148,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BlocksController.html":{},"classes/JwtService.html":{},"classes/MagicService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"interfaces/Workflow.html":{},"controllers/WorkflowsController.html":{}}}],["param(\"id",{"_index":1367,"title":{},"body":{"controllers/BlocksController.html":{},"controllers/WorkflowsController.html":{}}}],["param(\"walletid",{"_index":2842,"title":{},"body":{"controllers/WalletsController.html":{}}}],["parameter",{"_index":72,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["parameters",{"_index":63,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"injectables/AuthService.html":{},"classes/BaseRepository.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/TransactionParams.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["params",{"_index":1672,"title":{},"body":{"injectables/ExecutionRepository.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WalletProvider.html":{}}}],["params.cursor",{"_index":2310,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["params.orderby",{"_index":2312,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["params.orderdirection",{"_index":2314,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["params.take",{"_index":1715,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["parse",{"_index":2064,"title":{},"body":{"classes/MagicService.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["parseandvalidateresponse",{"_index":357,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["parseandvalidateresponse(text",{"_index":385,"title":{},"body":{"injectables/AiService.html":{}}}],["parsed",{"_index":2305,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["parsedlimit",{"_index":2846,"title":{},"body":{"controllers/WalletsController.html":{}}}],["parsedresponse",{"_index":487,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["parseerror",{"_index":645,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/MagicService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["parseint",{"_index":1996,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["parseint(limit",{"_index":2248,"title":{},"body":{"controllers/NotificationsController.html":{},"controllers/WalletsController.html":{}}}],["parseint(page",{"_index":2246,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["parseint(process.env.queue_prefetch_count",{"_index":2488,"title":{},"body":{"injectables/QueueService.html":{}}}],["parsepaginationparams(params",{"_index":2306,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["parser",{"_index":3154,"title":{},"body":{"dependencies.html":{}}}],["partial",{"_index":1249,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"injectables/UserRepository.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{}}}],["partial.meta",{"_index":1433,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["passport",{"_index":1936,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":916,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1933,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1938,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["password",{"_index":929,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["patch\"]).default(\"get",{"_index":3291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch\"]).default(\"post",{"_index":3374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":840,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlockMetadata.html":{},"interfaces/MagicAuthPayload.html":{},"miscellaneous/variables.html":{}}}],["patterns",{"_index":1863,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["pause",{"_index":1736,"title":{},"body":{"injectables/ExecutionsService.html":{},"index.html":{}}}],["pause(id",{"_index":1753,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["paused",{"_index":1427,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["payload",{"_index":794,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{}}}],["payload.accesstoken",{"_index":1958,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":1956,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{}}}],["payload.expiresat",{"_index":1960,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["payload.iss",{"_index":2063,"title":{},"body":{"classes/MagicService.html":{}}}],["payload.name",{"_index":1957,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["payload.refreshtoken",{"_index":1959,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1955,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{}}}],["peak",{"_index":1819,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["peakconcurrency",{"_index":1800,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["pending",{"_index":1030,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"miscellaneous/typealiases.html":{}}}],["pending\").length",{"_index":1793,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["per",{"_index":1413,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["percentage",{"_index":3299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["percentageof",{"_index":3300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["perform",{"_index":231,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["performance",{"_index":1794,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["performed",{"_index":167,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["permission",{"_index":222,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["permissions",{"_index":1764,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["persistent",{"_index":2497,"title":{},"body":{"injectables/QueueService.html":{}}}],["phonenumber",{"_index":2556,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["pie",{"_index":1143,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["placeholder",{"_index":71,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/QueueService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["platform",{"_index":441,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["plus",{"_index":1159,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["point.delta",{"_index":1835,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["policies/policy",{"_index":2911,"title":{},"body":{"interfaces/Workflow.html":{}}}],["policies/policy.service",{"_index":123,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/Workflow.html":{}}}],["policy",{"_index":145,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{},"miscellaneous/typealiases.html":{}}}],["policycontext",{"_index":120,"title":{"interfaces/PolicyContext.html":{}},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["policyenabled",{"_index":130,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["policyenforcer",{"_index":3221,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["policyresult",{"_index":121,"title":{"interfaces/PolicyResult.html":{}},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["policyservice",{"_index":122,"title":{"classes/PolicyService.html":{}},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"miscellaneous/variables.html":{}}}],["polygon",{"_index":3345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["populated",{"_index":2675,"title":{},"body":{"injectables/UserRepository.html":{}}}],["position",{"_index":407,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["positioning",{"_index":614,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["positions",{"_index":683,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["possibletypes",{"_index":1182,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["post",{"_index":290,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"interfaces/BlockMetadata.html":{},"controllers/BlocksController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/NotificationsController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post(\":id/execute",{"_index":3081,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["post(\"checkout",{"_index":993,"title":{},"body":{"controllers/BillingController.html":{}}}],["post(\"custom",{"_index":1364,"title":{},"body":{"controllers/BlocksController.html":{}}}],["post(\"generate",{"_index":305,"title":{},"body":{"controllers/AiController.html":{}}}],["post(\"login",{"_index":783,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["post(\"logout",{"_index":879,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["post(\"mark",{"_index":2253,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["post(\"refine",{"_index":322,"title":{},"body":{"controllers/AiController.html":{}}}],["post(\"test",{"_index":2259,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["post(\"webhook",{"_index":999,"title":{},"body":{"controllers/BillingController.html":{}}}],["post(':id/execute')@apioperation({summary",{"_index":3039,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["post('checkout')@apioperation({summary",{"_index":980,"title":{},"body":{"controllers/BillingController.html":{}}}],["post('custom')@apioperation({summary",{"_index":1326,"title":{},"body":{"controllers/BlocksController.html":{}}}],["post('generate",{"_index":268,"title":{},"body":{"controllers/AiController.html":{}}}],["post('mark",{"_index":2233,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["post('refine",{"_index":285,"title":{},"body":{"controllers/AiController.html":{}}}],["post('test')@apioperation({summary",{"_index":2237,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["post('webhook')@apioperation({summary",{"_index":986,"title":{},"body":{"controllers/BillingController.html":{}}}],["post()@apioperation({summary",{"_index":2822,"title":{},"body":{"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["power",{"_index":3307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["precision",{"_index":1116,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["preference",{"_index":1474,"title":{},"body":{"classes/CreateWalletDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["preferences",{"_index":2194,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["preferences.discordwebhookurl",{"_index":2209,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["preferences.emailenabled",{"_index":2212,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["preferences.telegramchatid",{"_index":2204,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["prefetch",{"_index":2486,"title":{},"body":{"injectables/QueueService.html":{}}}],["prefetchcount",{"_index":2487,"title":{},"body":{"injectables/QueueService.html":{}}}],["prefill",{"_index":1902,"title":{},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["prefillconfig",{"_index":315,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["prefix",{"_index":260,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["prepare_transaction",{"_index":3385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["present",{"_index":791,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["preserveconnections",{"_index":509,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["preserving",{"_index":627,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["prevavgdurationms",{"_index":1599,"title":{},"body":{"injectables/DashboardService.html":{}}}],["prevcompletedwithduration",{"_index":1597,"title":{},"body":{"injectables/DashboardService.html":{}}}],["prevent",{"_index":2115,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["previous",{"_index":1589,"title":{},"body":{"injectables/DashboardService.html":{}}}],["previously",{"_index":2943,"title":{},"body":{"interfaces/Workflow.html":{}}}],["previousoutputs",{"_index":1026,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["prevsuccessfulexecutions",{"_index":1590,"title":{},"body":{"injectables/DashboardService.html":{}}}],["prevsuccessrate",{"_index":1594,"title":{},"body":{"injectables/DashboardService.html":{}}}],["prevtotaldurationms",{"_index":1596,"title":{},"body":{"injectables/DashboardService.html":{}}}],["prevtotalexecutions",{"_index":1592,"title":{},"body":{"injectables/DashboardService.html":{}}}],["price",{"_index":1074,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["price_monitor",{"_index":540,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["priceid",{"_index":994,"title":{},"body":{"controllers/BillingController.html":{},"injectables/BillingService.html":{}}}],["prices",{"_index":543,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["prisma",{"_index":116,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/ExecutionRepository.html":{},"classes/JwtService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"interfaces/RefreshToken.html":{},"injectables/UserRepository.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["prisma's",{"_index":2913,"title":{},"body":{"interfaces/Workflow.html":{}}}],["prisma.$executeraw",{"_index":2007,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["prisma.$executeraw`delete",{"_index":2001,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["prisma.$queryraw",{"_index":2013,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["prisma.blockchaintransactioncreateinput",{"_index":2715,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/typealiases.html":{}}}],["prisma.blockchaintransactionupdateinput",{"_index":2780,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["prisma.jsonnull",{"_index":2928,"title":{},"body":{"interfaces/Workflow.html":{}}}],["prisma.service",{"_index":1618,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/ExecutionRepository.html":{},"injectables/UserRepository.html":{},"injectables/WorkflowRepository.html":{}}}],["prisma.transactionclient",{"_index":237,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["prisma.user.findunique",{"_index":2021,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["prisma.usercreateinput",{"_index":3236,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prisma.userupdateinput",{"_index":3237,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prisma.wallettransactioncreateinput",{"_index":2713,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/typealiases.html":{}}}],["prisma.workflowcreateinput",{"_index":2916,"title":{},"body":{"interfaces/Workflow.html":{},"miscellaneous/typealiases.html":{}}}],["prisma.workflowexecutioncreateinput",{"_index":3231,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prisma.workflowexecutionupdateinput",{"_index":3232,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["prisma.workflowupdateinput",{"_index":2918,"title":{},"body":{"interfaces/Workflow.html":{},"miscellaneous/typealiases.html":{}}}],["prisma/client",{"_index":118,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Session.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["prismaclient",{"_index":117,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"miscellaneous/variables.html":{}}}],["prismanamespace",{"_index":2908,"title":{},"body":{"interfaces/Workflow.html":{}}}],["prismanamespace.transactionclient",{"_index":2962,"title":{},"body":{"interfaces/Workflow.html":{}}}],["prismaservice",{"_index":1192,"title":{"injectables/PrismaService.html":{}},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"modules/DatabaseModule.html":{},"injectables/ExecutionRepository.html":{},"injectables/PrismaService.html":{},"injectables/UserRepository.html":{},"injectables/WorkflowRepository.html":{},"overview.html":{}}}],["private",{"_index":347,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/DashboardService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"injectables/NotificationsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["process",{"_index":2071,"title":{},"body":{"classes/MagicService.html":{}}}],["process.env.jwt_expires_in",{"_index":1993,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["process.env.jwt_secret",{"_index":745,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshToken.html":{}}}],["process.env.magic_secret_key",{"_index":2052,"title":{},"body":{"classes/MagicService.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":830,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"miscellaneous/variables.html":{}}}],["process.env.openrouter_api_key",{"_index":434,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["process.env.rabbitmq_url",{"_index":2444,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["process.env.refresh_token_expires_in",{"_index":1997,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["processing",{"_index":1135,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["processor",{"_index":2503,"title":{},"body":{"injectables/QueueService.html":{}}}],["production",{"_index":831,"title":{},"body":{"controllers/AuthController.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"interfaces/RefreshToken.html":{}}}],["profile",{"_index":899,"title":{},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Session.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["profile'})@apiresponse({status",{"_index":2589,"title":{},"body":{"controllers/UserController.html":{}}}],["profile.discordwebhookurl",{"_index":2210,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["profile.telegramchatid",{"_index":2205,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["profiledata",{"_index":2650,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.avatarurl",{"_index":2653,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.discordwebhookurl",{"_index":2671,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.fullname",{"_index":2651,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.monthlyexecutionquota",{"_index":2661,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.monthlyexecutionsused",{"_index":2663,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.stripecustomerid",{"_index":2665,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.stripesubscriptionid",{"_index":2667,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.subscriptionexpiresat",{"_index":2659,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.subscriptionstatus",{"_index":2657,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.subscriptiontier",{"_index":2655,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profiledata.telegramchatid",{"_index":2669,"title":{},"body":{"injectables/UserRepository.html":{}}}],["profileimage",{"_index":2555,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["profileresponsedto",{"_index":1476,"title":{"classes/ProfileResponseDto.html":{}},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["promise",{"_index":153,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["promise.all",{"_index":1697,"title":{},"body":{"injectables/ExecutionRepository.html":{},"injectables/WorkflowRepository.html":{}}}],["prompt",{"_index":309,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["prompt'})@isstring",{"_index":2537,"title":{},"body":{"classes/RefineWorkflowDto.html":{}}}],["proper",{"_index":617,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["properly",{"_index":2042,"title":{},"body":{"classes/MagicService.html":{}}}],["properties",{"_index":15,"title":{"properties.html":{}},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"properties.html":{}}}],["property",{"_index":2358,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["protected",{"_index":133,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"miscellaneous/variables.html":{}}}],["provide",{"_index":750,"title":{},"body":{"modules/AppModule.html":{},"modules/ExecutionsModule.html":{}}}],["provided",{"_index":138,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/NodeExecution.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["provider",{"_index":393,"title":{},"body":{"injectables/AiService.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"dependencies.html":{}}}],["providers",{"_index":334,"title":{},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"interfaces/TransactionParams.html":{},"modules/UserModule.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["public",{"_index":774,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlocksController.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/PrismaService.html":{},"interfaces/Workflow.html":{},"controllers/WorkflowsController.html":{},"miscellaneous/variables.html":{}}}],["public()@get('schema')@apioperation({summary",{"_index":1331,"title":{},"body":{"controllers/BlocksController.html":{}}}],["public()@get('types')@apioperation({summary",{"_index":1333,"title":{},"body":{"controllers/BlocksController.html":{}}}],["public()@post('login')@apioperation({summary",{"_index":760,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('logout')@apioperation({summary",{"_index":765,"title":{},"body":{"controllers/AuthController.html":{}}}],["push",{"_index":1089,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["pushenabled",{"_index":2159,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["put",{"_index":1344,"title":{},"body":{"controllers/BlocksController.html":{},"controllers/UserController.html":{},"controllers/WorkflowsController.html":{},"miscellaneous/variables.html":{}}}],["put(\":id",{"_index":3076,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["put(\"custom/:id",{"_index":1366,"title":{},"body":{"controllers/BlocksController.html":{}}}],["put(\"profile",{"_index":2607,"title":{},"body":{"controllers/UserController.html":{}}}],["put(':id')@apioperation({summary",{"_index":3058,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["put('custom/:id')@apioperation({summary",{"_index":1342,"title":{},"body":{"controllers/BlocksController.html":{}}}],["put('profile')@apioperation({summary",{"_index":2597,"title":{},"body":{"controllers/UserController.html":{}}}],["python",{"_index":49,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["query",{"_index":251,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"controllers/BlocksController.html":{},"classes/JwtService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["query(\"category",{"_index":1358,"title":{},"body":{"controllers/BlocksController.html":{}}}],["query(\"is_public",{"_index":1357,"title":{},"body":{"controllers/BlocksController.html":{}}}],["query(\"limit",{"_index":2244,"title":{},"body":{"controllers/NotificationsController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["query(\"page",{"_index":2243,"title":{},"body":{"controllers/NotificationsController.html":{},"controllers/WorkflowsController.html":{}}}],["query(\"walletaddress",{"_index":2845,"title":{},"body":{"controllers/WalletsController.html":{}}}],["query.cursor(cursor",{"_index":2319,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["query.orderby(orderby",{"_index":2320,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["query.skip(skip).take(take",{"_index":2318,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["queue",{"_index":2446,"title":{},"body":{"injectables/QueueService.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["queue.options",{"_index":2485,"title":{},"body":{"injectables/QueueService.html":{}}}],["queue.service",{"_index":2420,"title":{},"body":{"modules/QueueModule.html":{}}}],["queue/queue.module",{"_index":3094,"title":{},"body":{"modules/WorkflowsModule.html":{}}}],["queue/queue.service",{"_index":3107,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["queued",{"_index":3138,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["queuemodule",{"_index":2414,"title":{"modules/QueueModule.html":{}},"body":{"modules/QueueModule.html":{},"modules/WorkflowsModule.html":{},"modules.html":{},"overview.html":{}}}],["queueoptions",{"_index":2462,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["queues",{"_index":2483,"title":{},"body":{"injectables/QueueService.html":{}}}],["queueservice",{"_index":2418,"title":{"injectables/QueueService.html":{}},"body":{"modules/QueueModule.html":{},"injectables/QueueService.html":{},"injectables/WorkflowsService.html":{},"overview.html":{}}}],["quota",{"_index":1484,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["r",{"_index":967,"title":{},"body":{"classes/BaseRepository.html":{}}}],["rabbitmq",{"_index":2514,"title":{},"body":{"injectables/QueueService.html":{}}}],["rabbitmq_url",{"_index":2443,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["rate",{"_index":1562,"title":{},"body":{"injectables/DashboardService.html":{}}}],["rating",{"_index":85,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{}}}],["raw",{"_index":2004,"title":{},"body":{"classes/JwtService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["rawaveragedurationms",{"_index":1610,"title":{},"body":{"injectables/DashboardService.html":{}}}],["rawbody",{"_index":988,"title":{},"body":{"controllers/BillingController.html":{},"injectables/BillingService.html":{}}}],["read",{"_index":575,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["read')@apioperation({summary",{"_index":2234,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["readonly",{"_index":304,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"controllers/BillingController.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{}}}],["real",{"_index":1864,"title":{},"body":{"injectables/ExecutionsService.html":{},"classes/MagicService.html":{},"injectables/QueueService.html":{},"interfaces/Workflow.html":{}}}],["reasonable",{"_index":1551,"title":{},"body":{"injectables/DashboardService.html":{}}}],["received",{"_index":789,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["recent",{"_index":1783,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["recipient",{"_index":1151,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["record",{"_index":90,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/Session.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"injectables/WalletsService.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["records",{"_index":246,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"index.html":{}}}],["recurring",{"_index":558,"title":{},"body":{"injectables/AiService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["redacted",{"_index":818,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["redis",{"_index":2513,"title":{},"body":{"injectables/QueueService.html":{}}}],["reduce",{"_index":3365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refine",{"_index":286,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["refined",{"_index":288,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["refinement",{"_index":516,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["refineworkflow",{"_index":264,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["refineworkflow(data",{"_index":283,"title":{},"body":{"controllers/AiController.html":{}}}],["refineworkflow(prompt",{"_index":388,"title":{},"body":{"injectables/AiService.html":{}}}],["refineworkflowdto",{"_index":284,"title":{"classes/RefineWorkflowDto.html":{}},"body":{"controllers/AiController.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["reflect",{"_index":3158,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1916,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["refresh",{"_index":849,"title":{},"body":{"controllers/AuthController.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/RefreshToken.html":{}}}],["refresh_token_expires_in",{"_index":1964,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["refresh_tokens",{"_index":2002,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["refreshtoken",{"_index":813,"title":{"interfaces/RefreshToken.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{}}}],["refreshtoken(token",{"_index":1979,"title":{},"body":{"classes/JwtService.html":{}}}],["refreshtoken.expiresat",{"_index":2017,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["refreshtoken.id",{"_index":2018,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["regenerated",{"_index":2006,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["regex_match",{"_index":3332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registerdto",{"_index":930,"title":{"classes/RegisterDto.html":{}},"body":{"classes/AuthResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["related",{"_index":2952,"title":{},"body":{"interfaces/Workflow.html":{}}}],["relation",{"_index":2944,"title":{},"body":{"interfaces/Workflow.html":{}}}],["relationship",{"_index":2982,"title":{},"body":{"interfaces/Workflow.html":{}}}],["remainingseconds",{"_index":1542,"title":{},"body":{"injectables/DashboardService.html":{}}}],["remainingseconds}s",{"_index":1544,"title":{},"body":{"injectables/DashboardService.html":{}}}],["remove",{"_index":2509,"title":{},"body":{"injectables/QueueService.html":{},"interfaces/Workflow.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["remove(id",{"_index":3104,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["remove(req",{"_index":3053,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["removed",{"_index":2953,"title":{},"body":{"interfaces/Workflow.html":{}}}],["repeat",{"_index":586,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["replace",{"_index":2357,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["replaced",{"_index":2964,"title":{},"body":{"interfaces/Workflow.html":{}}}],["replaces",{"_index":2972,"title":{},"body":{"interfaces/Workflow.html":{}}}],["repositories",{"_index":193,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["repository",{"_index":127,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/WorkflowsService.html":{}}}],["req",{"_index":758,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["req.cookies?.token",{"_index":886,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["req.headers.origin",{"_index":855,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["req.headers[\"stripe",{"_index":1002,"title":{},"body":{"controllers/BillingController.html":{}}}],["req.user.id",{"_index":3073,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["req.user?.id",{"_index":995,"title":{},"body":{"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{}}}],["request",{"_index":454,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"interfaces/BlockMetadata.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{},"miscellaneous/variables.html":{}}}],["request.user",{"_index":1954,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["request?.cookies?.[\"__secure",{"_index":1947,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["request?.cookies?.[\"next",{"_index":1946,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["request?.cookies?.token",{"_index":1949,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["requested",{"_index":2939,"title":{},"body":{"interfaces/Workflow.html":{}}}],["requests",{"_index":626,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":64,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/MagicAuthPayload.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"index.html":{}}}],["requirements",{"_index":445,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["res",{"_index":759,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.clearcookie(\"__secure",{"_index":884,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.clearcookie(\"next",{"_index":883,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.clearcookie(\"refresh_token",{"_index":882,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.clearcookie(\"token",{"_index":881,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.cookie(\"refresh_token",{"_index":850,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.cookie(\"token",{"_index":847,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.cookie(cookiename",{"_index":836,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.json",{"_index":892,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["res.status(200).json(responsedata",{"_index":873,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["reset",{"_index":340,"title":{},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["resource",{"_index":241,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["resourceid",{"_index":242,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["response",{"_index":767,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/MagicAuthPayload.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["responsedata",{"_index":859,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["responsedata.callbackurl",{"_index":871,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["responsedata.session",{"_index":868,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["responsedata.session.token.substring(0",{"_index":869,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["responsedata.success",{"_index":870,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["responsedata.token.substring(0",{"_index":867,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["rest",{"_index":51,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["rest_api",{"_index":50,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["restrictions",{"_index":2950,"title":{},"body":{"interfaces/Workflow.html":{}}}],["result",{"_index":87,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NodeExecution.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{}}}],["result.allowed",{"_index":160,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["result.count",{"_index":2180,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["result.cursor",{"_index":2311,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["result.edges",{"_index":321,"title":{},"body":{"controllers/AiController.html":{}}}],["result.executionid",{"_index":3086,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["result.executions",{"_index":2956,"title":{},"body":{"interfaces/Workflow.html":{}}}],["result.nodes",{"_index":319,"title":{},"body":{"controllers/AiController.html":{}}}],["result.orderby",{"_index":2313,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["results",{"_index":101,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resume",{"_index":1737,"title":{},"body":{"injectables/ExecutionsService.html":{},"index.html":{}}}],["resume(id",{"_index":1755,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["retries",{"_index":1112,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":1738,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/QueueService.html":{},"index.html":{}}}],["retry(id",{"_index":1757,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["retryqueue",{"_index":2521,"title":{},"body":{"injectables/QueueService.html":{}}}],["retryqueue.messagecount",{"_index":2528,"title":{},"body":{"injectables/QueueService.html":{}}}],["return",{"_index":97,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{}}}],["returned",{"_index":804,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["returning",{"_index":2009,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["returns",{"_index":150,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockHandler.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"injectables/JwtAuthGuard.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["right",{"_index":1123,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["role",{"_index":477,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["round",{"_index":3302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["route",{"_index":788,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":3256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["row",{"_index":169,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["rowid",{"_index":168,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["rules",{"_index":1140,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":1645,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"index.html":{}}}],["running",{"_index":1031,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["running\").length",{"_index":1792,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["runningexecutions",{"_index":1570,"title":{},"body":{"injectables/DashboardService.html":{}}}],["rxjs",{"_index":3160,"title":{},"body":{"dependencies.html":{}}}],["safety",{"_index":2149,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["samesite",{"_index":839,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["save",{"_index":2890,"title":{},"body":{"injectables/WalletsService.html":{}}}],["saves",{"_index":2720,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["savewallet",{"_index":2730,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["saving",{"_index":2732,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["scalar",{"_index":2751,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["scale",{"_index":1120,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["schedule",{"_index":557,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["scheduled",{"_index":1643,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"injectables/QueueService.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["scheduledtime",{"_index":1623,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"injectables/QueueService.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["scheduledtime.gettime",{"_index":2499,"title":{},"body":{"injectables/QueueService.html":{}}}],["scheduledtime.toisostring",{"_index":2498,"title":{},"body":{"injectables/QueueService.html":{},"injectables/WorkflowsService.html":{}}}],["scheduledtime?.toisostring",{"_index":3087,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["scheduler",{"_index":2516,"title":{},"body":{"injectables/QueueService.html":{}}}],["schema",{"_index":1219,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["schema.prisma",{"_index":2739,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["schemas",{"_index":3290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scratch",{"_index":642,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["sdk",{"_index":392,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/MagicService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"dependencies.html":{}}}],["seconds",{"_index":1539,"title":{},"body":{"injectables/DashboardService.html":{}}}],["secret",{"_index":744,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/RefreshToken.html":{}}}],["secretorkey",{"_index":1951,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":838,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["select",{"_index":1702,"title":{},"body":{"injectables/ExecutionRepository.html":{},"classes/JwtService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/RefreshToken.html":{},"injectables/WorkflowRepository.html":{}}}],["send",{"_index":546,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["send_transaction",{"_index":1157,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["sendexternalnotification(userid",{"_index":2199,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["sending",{"_index":864,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["sendtransaction",{"_index":2789,"title":{},"body":{"interfaces/WalletProvider.html":{}}}],["sendtransaction(params",{"_index":2563,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["sensitive",{"_index":865,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["sent",{"_index":171,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["separate",{"_index":2502,"title":{},"body":{"injectables/QueueService.html":{}}}],["sepolia",{"_index":3349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":1214,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"index.html":{}}}],["serves",{"_index":1068,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":820,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{}}}],["serviceerror",{"_index":890,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["services",{"_index":590,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["session",{"_index":797,"title":{"interfaces/Session.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"controllers/BillingController.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["session'})@apiresponse({status",{"_index":982,"title":{},"body":{"controllers/BillingController.html":{}}}],["session.accesstoken",{"_index":800,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["session.expiresat",{"_index":816,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["session.refreshtoken",{"_index":814,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["sessionid",{"_index":1018,"title":{},"body":{"injectables/BillingService.html":{}}}],["sessiontoken",{"_index":821,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{}}}],["sessiontoken.substring(0",{"_index":826,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["set",{"_index":208,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/QueueService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["setmetadata(is_public_key",{"_index":3391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":3183,"title":{},"body":{"index.html":{}}}],["shared",{"_index":1065,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/Workflow.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["shuffle",{"_index":1137,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["signature",{"_index":1001,"title":{},"body":{"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["signed",{"_index":1976,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["signoptions",{"_index":747,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["simple",{"_index":1217,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/WorkflowsService.html":{}}}],["simplified",{"_index":1861,"title":{},"body":{"injectables/ExecutionsService.html":{},"classes/MagicService.html":{},"injectables/QueueService.html":{}}}],["simulation",{"_index":3111,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["simultaneous",{"_index":1822,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["single",{"_index":1069,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/NodeExecutionsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["singleton",{"_index":2075,"title":{},"body":{"classes/MagicService.html":{}}}],["skip",{"_index":183,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/ExecutionRepository.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WorkflowRepository.html":{},"index.html":{}}}],["slack",{"_index":3375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["smart_wallet_address",{"_index":2553,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["sms",{"_index":3273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solana",{"_index":2545,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"miscellaneous/enumerations.html":{}}}],["sophisticated",{"_index":535,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["sort",{"_index":1829,"title":{},"body":{"injectables/ExecutionsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sort((a",{"_index":1859,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["sorteddurations",{"_index":1813,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["sorteddurations.length",{"_index":1817,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["sorteddurations[mid",{"_index":1818,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["sortkey",{"_index":1691,"title":{},"body":{"injectables/ExecutionRepository.html":{},"index.html":{}}}],["sortorder",{"_index":1692,"title":{},"body":{"injectables/ExecutionRepository.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"modules/AiModule.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"modules/BillingModule.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"modules/BlocksModule.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"modules/DashboardModule.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"modules/NotificationsModule.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{},"classes/ProfileResponseDto.html":{},"modules/QueueModule.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["sourcehandle",{"_index":411,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["sources",{"_index":1165,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["specific",{"_index":192,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/QueueService.html":{}}}],["specification",{"_index":593,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["split(\"_",{"_index":1306,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["sql",{"_index":2005,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["sqrt",{"_index":3306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["square",{"_index":1150,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["src/.../ai.service.ts",{"_index":3248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":3246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../queue.service.ts",{"_index":3244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.env.example",{"_index":3191,"title":{},"body":{"index.html":{}}}],["src/ai/ai.controller.ts",{"_index":259,"title":{},"body":{"controllers/AiController.html":{}}}],["src/ai/ai.controller.ts:21",{"_index":275,"title":{},"body":{"controllers/AiController.html":{}}}],["src/ai/ai.controller.ts:32",{"_index":282,"title":{},"body":{"controllers/AiController.html":{}}}],["src/ai/ai.controller.ts:55",{"_index":289,"title":{},"body":{"controllers/AiController.html":{}}}],["src/ai/ai.module.ts",{"_index":342,"title":{},"body":{"modules/AiModule.html":{}}}],["src/ai/ai.service.ts",{"_index":346,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["src/ai/ai.service.ts:158",{"_index":379,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:204",{"_index":389,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:251",{"_index":376,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:324",{"_index":375,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:339",{"_index":372,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:355",{"_index":374,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:363",{"_index":386,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:385",{"_index":365,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:416",{"_index":362,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:428",{"_index":384,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:454",{"_index":360,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:67",{"_index":358,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/ai.service.ts:76",{"_index":368,"title":{},"body":{"injectables/AiService.html":{}}}],["src/ai/dto/workflow",{"_index":1889,"title":{},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["src/app.module.ts",{"_index":717,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":753,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["src/auth/auth.controller.ts:216",{"_index":766,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":763,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":915,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":933,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["src/auth/auth.service.ts:23",{"_index":938,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":942,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":940,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":3390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":923,"title":{},"body":{"classes/AuthResponseDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["src/auth/dto/auth.dto.ts:13",{"_index":2539,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/auth.dto.ts:16",{"_index":2541,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/auth.dto.ts:19",{"_index":2540,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/auth/dto/auth.dto.ts:24",{"_index":925,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["src/auth/dto/auth.dto.ts:27",{"_index":926,"title":{},"body":{"classes/AuthResponseDto.html":{}}}],["src/auth/dto/auth.dto.ts:5",{"_index":2031,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/auth.dto.ts:8",{"_index":2032,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/guards/jwt",{"_index":1910,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1932,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:18",{"_index":2029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:43",{"_index":2030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/billing/billing.controller.ts",{"_index":975,"title":{},"body":{"controllers/BillingController.html":{}}}],["src/billing/billing.controller.ts:16",{"_index":983,"title":{},"body":{"controllers/BillingController.html":{}}}],["src/billing/billing.controller.ts:26",{"_index":987,"title":{},"body":{"controllers/BillingController.html":{}}}],["src/billing/billing.module.ts",{"_index":1007,"title":{},"body":{"modules/BillingModule.html":{}}}],["src/billing/billing.service.ts",{"_index":1009,"title":{},"body":{"injectables/BillingService.html":{}}}],["src/billing/billing.service.ts:13",{"_index":1013,"title":{},"body":{"injectables/BillingService.html":{}}}],["src/billing/billing.service.ts:5",{"_index":1012,"title":{},"body":{"injectables/BillingService.html":{}}}],["src/blocks/blocks.controller.ts",{"_index":1322,"title":{},"body":{"controllers/BlocksController.html":{}}}],["src/blocks/blocks.controller.ts:107",{"_index":1327,"title":{},"body":{"controllers/BlocksController.html":{}}}],["src/blocks/blocks.controller.ts:129",{"_index":1343,"title":{},"body":{"controllers/BlocksController.html":{}}}],["src/blocks/blocks.controller.ts:152",{"_index":1330,"title":{},"body":{"controllers/BlocksController.html":{}}}],["src/blocks/blocks.controller.ts:36",{"_index":1334,"title":{},"body":{"controllers/BlocksController.html":{}}}],["src/blocks/blocks.controller.ts:51",{"_index":1332,"title":{},"body":{"controllers/BlocksController.html":{}}}],["src/blocks/blocks.controller.ts:65",{"_index":1340,"title":{},"body":{"controllers/BlocksController.html":{}}}],["src/blocks/blocks.controller.ts:88",{"_index":1337,"title":{},"body":{"controllers/BlocksController.html":{}}}],["src/blocks/blocks.module.ts",{"_index":1376,"title":{},"body":{"modules/BlocksModule.html":{}}}],["src/blocks/blocks.service.ts",{"_index":1191,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["src/blocks/blocks.service.ts:104",{"_index":1389,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:132",{"_index":1388,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:157",{"_index":1383,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:192",{"_index":1393,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:245",{"_index":1384,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:265",{"_index":1392,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:319",{"_index":1385,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:326",{"_index":1390,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:46",{"_index":1381,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:49",{"_index":1387,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/blocks/blocks.service.ts:86",{"_index":1386,"title":{},"body":{"injectables/BlocksService.html":{}}}],["src/dashboard/dashboard.controller.ts",{"_index":1510,"title":{},"body":{"controllers/DashboardController.html":{}}}],["src/dashboard/dashboard.controller.ts:22",{"_index":1516,"title":{},"body":{"controllers/DashboardController.html":{}}}],["src/dashboard/dashboard.module.ts",{"_index":1528,"title":{},"body":{"modules/DashboardModule.html":{}}}],["src/dashboard/dashboard.service.ts",{"_index":1530,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/dashboard/dashboard.service.ts:13",{"_index":1534,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/dashboard/dashboard.service.ts:19",{"_index":1536,"title":{},"body":{"injectables/DashboardService.html":{}}}],["src/database/database.module.ts",{"_index":1617,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/prisma.service.ts",{"_index":2389,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/database/prisma.service.ts:13",{"_index":2392,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/database/prisma.service.ts:6",{"_index":2394,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/database/prisma.service.ts:8",{"_index":2393,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/database/repositories/execution.repository.ts",{"_index":1652,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:11",{"_index":1663,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:119",{"_index":1665,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:134",{"_index":1667,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:14",{"_index":1671,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:142",{"_index":1674,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:149",{"_index":1683,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:171",{"_index":1684,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:178",{"_index":1689,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:55",{"_index":1669,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:70",{"_index":1678,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:81",{"_index":1676,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:91",{"_index":1680,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/execution.repository.ts:98",{"_index":1687,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["src/database/repositories/user.repository.ts",{"_index":2623,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/database/repositories/user.repository.ts:16",{"_index":2628,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/database/repositories/user.repository.ts:23",{"_index":2626,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/database/repositories/user.repository.ts:38",{"_index":2630,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/database/repositories/user.repository.ts:46",{"_index":2632,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/database/repositories/user.repository.ts:6",{"_index":2625,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/database/repositories/user.repository.ts:9",{"_index":2629,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/database/repositories/workflow.repository.ts",{"_index":3015,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["src/database/repositories/workflow.repository.ts:101",{"_index":3018,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["src/database/repositories/workflow.repository.ts:43",{"_index":3020,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["src/database/repositories/workflow.repository.ts:49",{"_index":3021,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["src/database/repositories/workflow.repository.ts:6",{"_index":3016,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["src/database/repositories/workflow.repository.ts:62",{"_index":3017,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["src/database/repositories/workflow.repository.ts:80",{"_index":3022,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["src/database/repositories/workflow.repository.ts:9",{"_index":3019,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["src/executions/dto/execution.dto.ts",{"_index":1395,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:102",{"_index":3002,"title":{},"body":{"classes/WorkflowExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:116",{"_index":2294,"title":{},"body":{"classes/PaginatedExecutionsResponseDto.html":{}}}],["src/executions/dto/execution.dto.ts:119",{"_index":2293,"title":{},"body":{"classes/PaginatedExecutionsResponseDto.html":{}}}],["src/executions/dto/execution.dto.ts:12",{"_index":1398,"title":{},"body":{"classes/CreateExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:133",{"_index":2084,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:138",{"_index":2083,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:141",{"_index":2086,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:147",{"_index":2088,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:150",{"_index":2087,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:156",{"_index":2081,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:162",{"_index":2082,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:168",{"_index":2085,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:174",{"_index":2080,"title":{},"body":{"classes/NodeExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:185",{"_index":2128,"title":{},"body":{"classes/NodeLogDto.html":{}}}],["src/executions/dto/execution.dto.ts:188",{"_index":2131,"title":{},"body":{"classes/NodeLogDto.html":{}}}],["src/executions/dto/execution.dto.ts:191",{"_index":2130,"title":{},"body":{"classes/NodeLogDto.html":{}}}],["src/executions/dto/execution.dto.ts:197",{"_index":2129,"title":{},"body":{"classes/NodeLogDto.html":{}}}],["src/executions/dto/execution.dto.ts:20",{"_index":1401,"title":{},"body":{"classes/CreateExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:200",{"_index":2127,"title":{},"body":{"classes/NodeLogDto.html":{}}}],["src/executions/dto/execution.dto.ts:214",{"_index":1649,"title":{},"body":{"classes/ExecutionActionDto.html":{}}}],["src/executions/dto/execution.dto.ts:225",{"_index":1651,"title":{},"body":{"classes/ExecutionActionResponseDto.html":{}}}],["src/executions/dto/execution.dto.ts:228",{"_index":1650,"title":{},"body":{"classes/ExecutionActionResponseDto.html":{}}}],["src/executions/dto/execution.dto.ts:27",{"_index":2567,"title":{},"body":{"classes/UpdateExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:35",{"_index":2565,"title":{},"body":{"classes/UpdateExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:43",{"_index":2566,"title":{},"body":{"classes/UpdateExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:48",{"_index":2329,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/executions/dto/execution.dto.ts:51",{"_index":2328,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/executions/dto/execution.dto.ts:54",{"_index":2327,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/executions/dto/execution.dto.ts:57",{"_index":2326,"title":{},"body":{"classes/PaginationMetaDto.html":{}}}],["src/executions/dto/execution.dto.ts:69",{"_index":3005,"title":{},"body":{"classes/WorkflowExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:7",{"_index":1403,"title":{},"body":{"classes/CreateExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:72",{"_index":3009,"title":{},"body":{"classes/WorkflowExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:78",{"_index":3008,"title":{},"body":{"classes/WorkflowExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:81",{"_index":3007,"title":{},"body":{"classes/WorkflowExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:84",{"_index":3003,"title":{},"body":{"classes/WorkflowExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:90",{"_index":3004,"title":{},"body":{"classes/WorkflowExecutionDto.html":{}}}],["src/executions/dto/execution.dto.ts:96",{"_index":3006,"title":{},"body":{"classes/WorkflowExecutionDto.html":{}}}],["src/executions/executions.module.ts",{"_index":1724,"title":{},"body":{"modules/ExecutionsModule.html":{}}}],["src/executions/executions.service.ts",{"_index":1730,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:13",{"_index":1746,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:175",{"_index":1752,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:221",{"_index":1748,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:28",{"_index":1743,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:40",{"_index":1759,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:6",{"_index":1739,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:64",{"_index":1741,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:69",{"_index":1754,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:74",{"_index":1756,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:79",{"_index":1758,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:84",{"_index":1750,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/executions.service.ts:9",{"_index":1744,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["src/executions/node",{"_index":2089,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["src/notifications/notifications.controller.ts",{"_index":2216,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.controller.ts:12",{"_index":2227,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.controller.ts:29",{"_index":2231,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.controller.ts:36",{"_index":2235,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.controller.ts:43",{"_index":2224,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.controller.ts:50",{"_index":2238,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["src/notifications/notifications.module.ts",{"_index":2264,"title":{},"body":{"modules/NotificationsModule.html":{}}}],["src/notifications/notifications.service.ts",{"_index":2266,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:10",{"_index":2275,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:14",{"_index":2277,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:19",{"_index":2278,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:24",{"_index":2271,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:42",{"_index":2273,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:47",{"_index":2280,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/notifications/notifications.service.ts:5",{"_index":2269,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["src/queue/queue.module.ts",{"_index":2419,"title":{},"body":{"modules/QueueModule.html":{}}}],["src/queue/queue.service.ts",{"_index":2421,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["src/queue/queue.service.ts:117",{"_index":2434,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:164",{"_index":2430,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:198",{"_index":2436,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:216",{"_index":2437,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:45",{"_index":2441,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:46",{"_index":2442,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:48",{"_index":2440,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:52",{"_index":2439,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:61",{"_index":2438,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/queue/queue.service.ts:93",{"_index":2432,"title":{},"body":{"injectables/QueueService.html":{}}}],["src/user/dto/user.dto.ts",{"_index":1447,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:103",{"_index":1454,"title":{},"body":{"classes/CreateWalletDto.html":{}}}],["src/user/dto/user.dto.ts:107",{"_index":1456,"title":{},"body":{"classes/CreateWalletDto.html":{}}}],["src/user/dto/user.dto.ts:112",{"_index":2798,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:115",{"_index":2801,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:118",{"_index":2802,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:121",{"_index":2795,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:124",{"_index":2803,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:127",{"_index":2796,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:130",{"_index":2799,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:133",{"_index":2797,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:136",{"_index":2800,"title":{},"body":{"classes/WalletResponseDto.html":{}}}],["src/user/dto/user.dto.ts:14",{"_index":2572,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["src/user/dto/user.dto.ts:141",{"_index":2807,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:144",{"_index":2812,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:147",{"_index":2813,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:150",{"_index":2810,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:153",{"_index":2805,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:156",{"_index":2811,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:159",{"_index":2804,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:162",{"_index":2809,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:165",{"_index":2808,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:168",{"_index":2806,"title":{},"body":{"classes/WalletTransactionResponseDto.html":{}}}],["src/user/dto/user.dto.ts:19",{"_index":2571,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["src/user/dto/user.dto.ts:24",{"_index":2573,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["src/user/dto/user.dto.ts:29",{"_index":2570,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["src/user/dto/user.dto.ts:34",{"_index":2569,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["src/user/dto/user.dto.ts:39",{"_index":2406,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:42",{"_index":2405,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:45",{"_index":2404,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:48",{"_index":2412,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:51",{"_index":2403,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:54",{"_index":2402,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:57",{"_index":2411,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:60",{"_index":2410,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:63",{"_index":2409,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:66",{"_index":2407,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:69",{"_index":2408,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:72",{"_index":2413,"title":{},"body":{"classes/ProfileResponseDto.html":{}}}],["src/user/dto/user.dto.ts:77",{"_index":2579,"title":{},"body":{"classes/UsageResponseDto.html":{}}}],["src/user/dto/user.dto.ts:80",{"_index":2580,"title":{},"body":{"classes/UsageResponseDto.html":{}}}],["src/user/dto/user.dto.ts:83",{"_index":2581,"title":{},"body":{"classes/UsageResponseDto.html":{}}}],["src/user/dto/user.dto.ts:89",{"_index":1459,"title":{},"body":{"classes/CreateWalletDto.html":{}}}],["src/user/dto/user.dto.ts:93",{"_index":1453,"title":{},"body":{"classes/CreateWalletDto.html":{}}}],["src/user/dto/user.dto.ts:98",{"_index":1460,"title":{},"body":{"classes/CreateWalletDto.html":{}}}],["src/user/user.controller.ts",{"_index":2583,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:36",{"_index":2590,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:61",{"_index":2598,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:96",{"_index":2595,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":2618,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":2676,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:10",{"_index":2678,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:13",{"_index":2680,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:56",{"_index":2683,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:69",{"_index":2682,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/wallets.controller.ts",{"_index":2814,"title":{},"body":{"controllers/WalletsController.html":{}}}],["src/user/wallets.controller.ts:38",{"_index":2832,"title":{},"body":{"controllers/WalletsController.html":{}}}],["src/user/wallets.controller.ts:52",{"_index":2826,"title":{},"body":{"controllers/WalletsController.html":{}}}],["src/user/wallets.controller.ts:66",{"_index":2829,"title":{},"body":{"controllers/WalletsController.html":{}}}],["src/user/wallets.controller.ts:81",{"_index":2836,"title":{},"body":{"controllers/WalletsController.html":{}}}],["src/user/wallets.service.ts",{"_index":2848,"title":{},"body":{"injectables/WalletsService.html":{}}}],["src/user/wallets.service.ts:100",{"_index":2854,"title":{},"body":{"injectables/WalletsService.html":{}}}],["src/user/wallets.service.ts:121",{"_index":2858,"title":{},"body":{"injectables/WalletsService.html":{}}}],["src/user/wallets.service.ts:14",{"_index":2850,"title":{},"body":{"injectables/WalletsService.html":{}}}],["src/user/wallets.service.ts:17",{"_index":2856,"title":{},"body":{"injectables/WalletsService.html":{}}}],["src/user/wallets.service.ts:33",{"_index":2852,"title":{},"body":{"injectables/WalletsService.html":{}}}],["src/workflows/dto/execute",{"_index":1620,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["src/workflows/dto/workflow.dto.ts",{"_index":1497,"title":{},"body":{"classes/CreateWorkflowDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:13",{"_index":1498,"title":{},"body":{"classes/CreateWorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:17",{"_index":1503,"title":{},"body":{"classes/CreateWorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:21",{"_index":1500,"title":{},"body":{"classes/CreateWorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:28",{"_index":2577,"title":{},"body":{"classes/UpdateWorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:33",{"_index":2574,"title":{},"body":{"classes/UpdateWorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:38",{"_index":2578,"title":{},"body":{"classes/UpdateWorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:43",{"_index":2576,"title":{},"body":{"classes/UpdateWorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:48",{"_index":2992,"title":{},"body":{"classes/WorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:51",{"_index":2993,"title":{},"body":{"classes/WorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:54",{"_index":2990,"title":{},"body":{"classes/WorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:57",{"_index":2994,"title":{},"body":{"classes/WorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:60",{"_index":2991,"title":{},"body":{"classes/WorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:63",{"_index":2995,"title":{},"body":{"classes/WorkflowDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:68",{"_index":2322,"title":{},"body":{"classes/PaginatedWorkflowsResponseDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:71",{"_index":2325,"title":{},"body":{"classes/PaginatedWorkflowsResponseDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:74",{"_index":2324,"title":{},"body":{"classes/PaginatedWorkflowsResponseDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:77",{"_index":2323,"title":{},"body":{"classes/PaginatedWorkflowsResponseDto.html":{}}}],["src/workflows/dto/workflow.dto.ts:8",{"_index":1502,"title":{},"body":{"classes/CreateWorkflowDto.html":{}}}],["src/workflows/workflows.controller.ts",{"_index":3033,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["src/workflows/workflows.controller.ts:100",{"_index":3059,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["src/workflows/workflows.controller.ts:118",{"_index":3056,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["src/workflows/workflows.controller.ts:138",{"_index":3042,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["src/workflows/workflows.controller.ts:49",{"_index":3047,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["src/workflows/workflows.controller.ts:68",{"_index":3052,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["src/workflows/workflows.controller.ts:82",{"_index":3036,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["src/workflows/workflows.module.ts",{"_index":3092,"title":{},"body":{"modules/WorkflowsModule.html":{}}}],["src/workflows/workflows.service.ts",{"_index":3095,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["src/workflows/workflows.service.ts:117",{"_index":3105,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["src/workflows/workflows.service.ts:12",{"_index":3097,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["src/workflows/workflows.service.ts:127",{"_index":3101,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["src/workflows/workflows.service.ts:19",{"_index":3102,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["src/workflows/workflows.service.ts:51",{"_index":3103,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["src/workflows/workflows.service.ts:67",{"_index":3099,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["src/workflows/workflows.service.ts:89",{"_index":3106,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["standard",{"_index":2548,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["start",{"_index":1805,"title":{},"body":{"injectables/ExecutionsService.html":{},"index.html":{}}}],["start:devapi",{"_index":3192,"title":{},"body":{"index.html":{}}}],["started",{"_index":1399,"title":{"index.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"controllers/WorkflowsController.html":{}}}],["started_at",{"_index":1038,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"index.html":{}}}],["startedat",{"_index":1694,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["startindex",{"_index":3112,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["starts_with",{"_index":3326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statistics",{"_index":2610,"title":{},"body":{"controllers/UserController.html":{}}}],["statistics'})@apiresponse({status",{"_index":2594,"title":{},"body":{"controllers/UserController.html":{}}}],["stats",{"_index":1784,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/QueueService.html":{}}}],["status",{"_index":307,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/BillingController.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"controllers/DashboardController.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"index.html":{}}}],["stored",{"_index":1168,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["storing",{"_index":2512,"title":{},"body":{"injectables/QueueService.html":{}}}],["strategies/jwt.strategy",{"_index":920,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1935,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["strict",{"_index":595,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["string",{"_index":22,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["stripe",{"_index":1016,"title":{},"body":{"injectables/BillingService.html":{}}}],["stripecustomerid",{"_index":2644,"title":{},"body":{"injectables/UserRepository.html":{}}}],["stripesubscriptionid",{"_index":2645,"title":{},"body":{"injectables/UserRepository.html":{}}}],["structure",{"_index":446,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["structured",{"_index":2010,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["stub",{"_index":1014,"title":{},"body":{"injectables/BillingService.html":{},"injectables/NotificationsService.html":{}}}],["sub",{"_index":808,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/TokenResponse.html":{}}}],["subject",{"_index":1087,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["subscription",{"_index":1477,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["subscription_expires_at",{"_index":1482,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["subscription_status",{"_index":1480,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["subscription_tier",{"_index":1479,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["subscriptionexpiresat",{"_index":2641,"title":{},"body":{"injectables/UserRepository.html":{}}}],["subscriptionstatus",{"_index":2640,"title":{},"body":{"injectables/UserRepository.html":{}}}],["subscriptiontier",{"_index":2639,"title":{},"body":{"injectables/UserRepository.html":{}}}],["subtract",{"_index":3296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["success",{"_index":89,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"injectables/BillingService.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/DashboardService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{}}}],["success_rate",{"_index":1839,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["successful",{"_index":802,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["successfulexecutions",{"_index":1565,"title":{},"body":{"injectables/DashboardService.html":{}}}],["successfully",{"_index":274,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/QueueService.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["successfully'})@apiresponse({status",{"_index":3055,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["successrate",{"_index":1573,"title":{},"body":{"injectables/DashboardService.html":{}}}],["successratechange",{"_index":1606,"title":{},"body":{"injectables/DashboardService.html":{}}}],["such",{"_index":1062,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["sum",{"_index":1810,"title":{},"body":{"injectables/ExecutionsService.html":{},"miscellaneous/variables.html":{}}}],["summary",{"_index":306,"title":{},"body":{"controllers/AiController.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"controllers/BlocksController.html":{},"controllers/DashboardController.html":{},"interfaces/MagicAuthPayload.html":{},"controllers/NotificationsController.html":{},"controllers/UserController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["super",{"_index":1927,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["super(message",{"_index":124,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["super.canactivate(context",{"_index":1931,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super.create(data",{"_index":2957,"title":{},"body":{"interfaces/Workflow.html":{}}}],["super.findbyid(id",{"_index":2948,"title":{},"body":{"interfaces/Workflow.html":{}}}],["support",{"_index":3205,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":207,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["svg",{"_index":3206,"title":{},"body":{"modules.html":{}}}],["symbol",{"_index":1495,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"injectables/WalletsService.html":{}}}],["system",{"_index":478,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"injectables/QueueService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}],["systemprompt",{"_index":438,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["t",{"_index":2297,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{}}}],["table",{"_index":1155,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"miscellaneous/variables.html":{}}}],["tablename",{"_index":135,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{}}}],["tags",{"_index":81,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/Workflow.html":{}}}],["take",{"_index":1699,"title":{},"body":{"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{}}}],["target",{"_index":410,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["targeted",{"_index":1443,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["targethandle",{"_index":412,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["targetprice",{"_index":1081,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["task",{"_index":521,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["tasks",{"_index":559,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["team",{"_index":202,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["team.teamid",{"_index":2364,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["teamid",{"_index":2345,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["teamids",{"_index":2333,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["teams",{"_index":2361,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["teams.map((team",{"_index":2363,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["telegram",{"_index":1468,"title":{},"body":{"classes/CreateWalletDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["telegram_handle",{"_index":1469,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["telegramchatid",{"_index":2161,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["telegramhandle",{"_index":2647,"title":{},"body":{"injectables/UserRepository.html":{}}}],["temperature",{"_index":480,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["template",{"_index":60,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["test",{"_index":2053,"title":{},"body":{"classes/MagicService.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"miscellaneous/variables.html":{}}}],["testnotification",{"_index":2221,"title":{},"body":{"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{}}}],["testnotification(req",{"_index":2236,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["testnotification(userid",{"_index":2279,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["text",{"_index":387,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["text.replace(/```json|```/g",{"_index":485,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.aiservice.generateblock(data.prompt",{"_index":310,"title":{},"body":{"controllers/AiController.html":{}}}],["this.aiservice.generateworkflow",{"_index":311,"title":{},"body":{"controllers/AiController.html":{}}}],["this.aiservice.refineworkflow",{"_index":323,"title":{},"body":{"controllers/AiController.html":{}}}],["this.authservice.authenticatewithmagic(magicpayload",{"_index":798,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["this.authservice.signout(userid",{"_index":888,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["this.authservice.verifysession(token",{"_index":887,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["this.billingservice.createcheckoutsession(userid",{"_index":997,"title":{},"body":{"controllers/BillingController.html":{}}}],["this.billingservice.handlewebhook(rawbody",{"_index":1003,"title":{},"body":{"controllers/BillingController.html":{}}}],["this.blocksservice.createcustomblock(userid",{"_index":1365,"title":{},"body":{"controllers/BlocksController.html":{}}}],["this.blocksservice.deletecustomblock(id",{"_index":1371,"title":{},"body":{"controllers/BlocksController.html":{}}}],["this.blocksservice.getblockschema(type",{"_index":1355,"title":{},"body":{"controllers/BlocksController.html":{}}}],["this.blocksservice.getblocktypes",{"_index":1351,"title":{},"body":{"controllers/BlocksController.html":{}}}],["this.blocksservice.getcustomblock(id",{"_index":1363,"title":{},"body":{"controllers/BlocksController.html":{}}}],["this.blocksservice.getcustomblocks(userid",{"_index":1360,"title":{},"body":{"controllers/BlocksController.html":{}}}],["this.blocksservice.updatecustomblock(id",{"_index":1368,"title":{},"body":{"controllers/BlocksController.html":{}}}],["this.channel",{"_index":2470,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.channel.assertexchange(exchange.name",{"_index":2480,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.channel.assertqueue(queue.name",{"_index":2484,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.channel.close",{"_index":2471,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.channel.prefetch(prefetchcount",{"_index":2489,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.client.$connect",{"_index":2398,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.client.$disconnect",{"_index":2401,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.code",{"_index":909,"title":{},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["this.connection",{"_index":2472,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.connection.close",{"_index":2473,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.connection.createchannel",{"_index":2477,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.createnotification(userid",{"_index":2291,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.createpolicycontext(userid",{"_index":187,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.dashboardservice.getmetrics(userid",{"_index":1524,"title":{},"body":{"controllers/DashboardController.html":{}}}],["this.deduplicateworkflow(finalworkflow",{"_index":508,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.enhanceedges(parsedresponse.edges",{"_index":505,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.enhancenodes(parsedresponse.nodes",{"_index":503,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.executewithtransaction",{"_index":2961,"title":{},"body":{"interfaces/Workflow.html":{}}}],["this.executionrepository.createexecution",{"_index":1768,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/WorkflowsService.html":{}}}],["this.executionrepository.findbyuserid(userid",{"_index":1553,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{}}}],["this.executionrepository.findmany",{"_index":1785,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["this.executionrepository.findnodeexecution(id",{"_index":2117,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["this.executionrepository.findnodeexecutions(executionid",{"_index":2099,"title":{},"body":{"injectables/NodeExecutionsService.html":{}}}],["this.executionrepository.findnodelogs(nodeexecutionid",{"_index":2138,"title":{},"body":{"injectables/NodeLogsService.html":{}}}],["this.executionrepository.findwithnodesandlogs(id",{"_index":1762,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["this.executionrepository.update(id",{"_index":1780,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["this.executionrepository.updatestatus",{"_index":1775,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/WorkflowsService.html":{}}}],["this.executionrepository.updatestatus(id",{"_index":1781,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["this.findbyaddress",{"_index":2764,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.findbyid(id",{"_index":220,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.findone(id",{"_index":1773,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["this.findtransactionsbyuserid(userid",{"_index":2787,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.formatblocktypename(blocktypekey",{"_index":1207,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.generateexistingcontext",{"_index":497,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.generatenewcontext(description",{"_index":498,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.generaterefinementsystemprompt",{"_index":515,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.generaterefreshtoken(user.id",{"_index":2026,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["this.generatesystemprompt",{"_index":493,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.generatetoken(payload",{"_index":2024,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["this.getprofile(userid",{"_index":2701,"title":{},"body":{"injectables/UserService.html":{}}}],["this.infercategoryfromname(blocktypekey",{"_index":1208,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.initqueue",{"_index":2469,"title":{},"body":{"injectables/QueueService.html":{}}}],["this.isuseradmin(userid",{"_index":2360,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.jwt_expires_in",{"_index":1992,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["this.jwt_secret",{"_index":1990,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["this.jwtservice.sign(payload",{"_index":946,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["this.jwtservice.sign(tokenpayload",{"_index":822,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["this.logaudit(\"create",{"_index":213,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.logaudit(\"delete",{"_index":230,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.logaudit(\"update",{"_index":224,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.magic.users.logoutbyissuer(issuer",{"_index":2068,"title":{},"body":{"classes/MagicService.html":{}}}],["this.mapdatabasetocustomblockdefinition(block",{"_index":1232,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.mapdatabasetocustomblockdefinition(customblock",{"_index":1246,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.mapdatabasetocustomblockdefinition(updatedblock",{"_index":1266,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.maptoworkflow(result",{"_index":2955,"title":{},"body":{"interfaces/Workflow.html":{}}}],["this.maptoworkflow(workflow",{"_index":2947,"title":{},"body":{"interfaces/Workflow.html":{}}}],["this.mergeworkflows",{"_index":507,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.meta",{"_index":1434,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["this.model.count",{"_index":255,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.model.create",{"_index":211,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.model.delete",{"_index":228,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.model.findmany",{"_index":198,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.model.findunique",{"_index":185,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.model.update",{"_index":219,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.name",{"_index":125,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["this.notificationrepository.countunreadbyuserid(userid",{"_index":2282,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.createforuser(userid",{"_index":2286,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.findbyuserid(userid",{"_index":2281,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.markallasread(userid",{"_index":2284,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationrepository.sendexternalnotification",{"_index":2292,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["this.notificationsservice.getnotificationlogs(userid",{"_index":2258,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.getnotifications",{"_index":2249,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.getunreadcount(userid",{"_index":2252,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.markallasread(userid",{"_index":2255,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.notificationsservice.testnotification(userid",{"_index":2260,"title":{},"body":{"controllers/NotificationsController.html":{}}}],["this.openrouter",{"_index":432,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.openrouter(model_to_use",{"_index":475,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.options",{"_index":144,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.options.auditenabled",{"_index":173,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.options.policyenabled",{"_index":184,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.parseandvalidateresponse(text",{"_index":501,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["this.policyservice",{"_index":143,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.policyservice.createcontext(userid",{"_index":154,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.policyservice.logauditevent(action",{"_index":175,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.prisma",{"_index":142,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.prisma.$transaction",{"_index":238,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.prisma.auditlog.create",{"_index":2366,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.prisma.blockchaintransaction.create",{"_index":2774,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.blockchaintransaction.findmany",{"_index":2776,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.blockchaintransaction.update",{"_index":2783,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.client.customblock.create",{"_index":1238,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.prisma.client.customblock.deletemany",{"_index":1270,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.prisma.client.customblock.findfirst",{"_index":1231,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.prisma.client.customblock.findmany",{"_index":1224,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.prisma.client.customblock.update",{"_index":1265,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["this.prisma.client.nodeexecution.findmany",{"_index":1703,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.prisma.client.nodeexecution.findunique",{"_index":1706,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.prisma.client.nodelog.findmany",{"_index":1707,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.prisma.client.user.create",{"_index":2634,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.prisma.client.user.findunique",{"_index":2633,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.prisma.client.user.update",{"_index":2637,"title":{},"body":{"injectables/UserRepository.html":{}}}],["this.prisma.client.workflow.count",{"_index":3025,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["this.prisma.client.workflow.create",{"_index":3027,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["this.prisma.client.workflow.delete",{"_index":3029,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["this.prisma.client.workflow.findmany",{"_index":3023,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["this.prisma.client.workflow.findunique",{"_index":3026,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["this.prisma.client.workflow.update",{"_index":3028,"title":{},"body":{"injectables/WorkflowRepository.html":{}}}],["this.prisma.client.workflowexecution.count",{"_index":1700,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.prisma.client.workflowexecution.create",{"_index":1711,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.prisma.client.workflowexecution.findmany",{"_index":1698,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.prisma.client.workflowexecution.findunique",{"_index":1701,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.prisma.client.workflowexecution.update",{"_index":1710,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.prisma.nodeexecution.findfirst",{"_index":2344,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.prisma.notification",{"_index":2164,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notification.count",{"_index":2166,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notification.create",{"_index":2186,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notification.createmany",{"_index":2193,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notification.delete",{"_index":2181,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notification.deletemany",{"_index":2183,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notification.findfirst",{"_index":2351,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.prisma.notification.findmany",{"_index":2167,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notification.update",{"_index":2177,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notification.updatemany",{"_index":2179,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notificationpreference.findunique",{"_index":2196,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.notificationpreference.upsert",{"_index":2198,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.prisma.team.findfirst",{"_index":2348,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.prisma.teammember.findmany",{"_index":2362,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.prisma.user.findunique",{"_index":2200,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.prisma.userwallet",{"_index":2719,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.userwallet.create",{"_index":2752,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.userwallet.findfirst",{"_index":2354,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.userwallet.findmany",{"_index":2756,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.userwallet.findunique",{"_index":2758,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.userwallet.update",{"_index":2745,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.wallettransaction.create",{"_index":2769,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.wallettransaction.findmany",{"_index":2759,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["this.prisma.workflow",{"_index":2920,"title":{},"body":{"interfaces/Workflow.html":{}}}],["this.prisma.workflow.create",{"_index":2966,"title":{},"body":{"interfaces/Workflow.html":{}}}],["this.prisma.workflow.findfirst",{"_index":2340,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/Workflow.html":{}}}],["this.prisma.workflow.findmany",{"_index":2941,"title":{},"body":{"interfaces/Workflow.html":{}}}],["this.prisma.workflow.findunique",{"_index":2951,"title":{},"body":{"interfaces/Workflow.html":{}}}],["this.prisma.workflow.update",{"_index":2969,"title":{},"body":{"interfaces/Workflow.html":{}}}],["this.prisma.workflowexecution.findfirst",{"_index":2342,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["this.queueservice.addexecutionjob(executionid",{"_index":3136,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["this.queueservice.addscheduledexecutionjob",{"_index":3135,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":1928,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refresh_token_expires_in",{"_index":1995,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["this.senddiscordnotification(profile.discordwebhookurl",{"_index":2211,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.sendemailnotification(user.email",{"_index":2213,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.sendtelegramnotification(profile.telegramchatid",{"_index":2208,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["this.tablename",{"_index":176,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["this.updateexecutionstatus(id",{"_index":1716,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["this.userrepository.findbyid(payload.sub",{"_index":944,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["this.userrepository.findwithprofileandwallets(userid",{"_index":2684,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.updateprofile(userid",{"_index":2697,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.getprofile(userid",{"_index":2606,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.getusage(userid",{"_index":2612,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateprofile(userid",{"_index":2608,"title":{},"body":{"controllers/UserController.html":{}}}],["this.verifyrefreshtoken(token",{"_index":2020,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["this.walletrepository.delete(walletid",{"_index":2893,"title":{},"body":{"injectables/WalletsService.html":{}}}],["this.walletrepository.findbyaddress",{"_index":2870,"title":{},"body":{"injectables/WalletsService.html":{}}}],["this.walletrepository.findbyaddress(walletaddress",{"_index":2895,"title":{},"body":{"injectables/WalletsService.html":{}}}],["this.walletrepository.findbyid(walletid",{"_index":2891,"title":{},"body":{"injectables/WalletsService.html":{}}}],["this.walletrepository.findbyuserid(userid",{"_index":2860,"title":{},"body":{"injectables/WalletsService.html":{}}}],["this.walletrepository.findtransactionsbyuserid",{"_index":2897,"title":{},"body":{"injectables/WalletsService.html":{}}}],["this.walletrepository.findtransactionsbywalletaddress",{"_index":2896,"title":{},"body":{"injectables/WalletsService.html":{}}}],["this.walletrepository.savewallet",{"_index":2876,"title":{},"body":{"injectables/WalletsService.html":{}}}],["this.walletsservice.createwallet(userid",{"_index":2840,"title":{},"body":{"controllers/WalletsController.html":{}}}],["this.walletsservice.deletewallet(userid",{"_index":2843,"title":{},"body":{"controllers/WalletsController.html":{}}}],["this.walletsservice.getuserwallets(userid",{"_index":2839,"title":{},"body":{"controllers/WalletsController.html":{}}}],["this.walletsservice.getwallettransactions",{"_index":2847,"title":{},"body":{"controllers/WalletsController.html":{}}}],["this.workflowrepository.create",{"_index":3119,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["this.workflowrepository.delete(id",{"_index":3131,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["this.workflowrepository.findbyid(id",{"_index":3117,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["this.workflowrepository.findbyuserid(userid",{"_index":3108,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["this.workflowrepository.update(id",{"_index":3126,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["this.workflowsservice.create(createworkflowdto",{"_index":3075,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["this.workflowsservice.execute",{"_index":3084,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["this.workflowsservice.findall(req.user.id",{"_index":3069,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["this.workflowsservice.findone(id",{"_index":3072,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["this.workflowsservice.remove(id",{"_index":3080,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["this.workflowsservice.update(id",{"_index":3077,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["throw",{"_index":161,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/QueueService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["throwing",{"_index":2114,"title":{},"body":{"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{}}}],["throws",{"_index":157,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["tier",{"_index":1478,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["time",{"_index":553,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["timeout",{"_index":1113,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["timepoints",{"_index":1823,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["timepoints.foreach((point",{"_index":1834,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["timepoints.push",{"_index":1826,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["timepoints.sort((a",{"_index":1830,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["timestamp",{"_index":1036,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateWalletDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/NodeExecution.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["timezone",{"_index":3284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":1093,"title":{},"body":{"interfaces/BlockMetadata.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":2356,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["token",{"_index":785,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDto.html":{},"classes/CreateWalletDto.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"classes/ProfileResponseDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["tokenaddress",{"_index":3353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tokenid",{"_index":3358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tokenpayload",{"_index":807,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["tokenresponse",{"_index":943,"title":{"interfaces/TokenResponse.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["tokens",{"_index":803,"title":{},"body":{"controllers/AuthController.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"interfaces/RefreshToken.html":{}}}],["tokens.length",{"_index":2014,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["tokens[0",{"_index":2015,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["top",{"_index":861,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["total",{"_index":1410,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{}}}],["totalduration",{"_index":1869,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["totaldurationms",{"_index":1577,"title":{},"body":{"injectables/DashboardService.html":{}}}],["totalexecutions",{"_index":1571,"title":{},"body":{"injectables/DashboardService.html":{}}}],["totalpages",{"_index":1417,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["totals",{"_index":1563,"title":{},"body":{"injectables/DashboardService.html":{}}}],["track",{"_index":2508,"title":{},"body":{"injectables/QueueService.html":{}}}],["traditional",{"_index":1838,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["transaction",{"_index":233,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{}}}],["transactionhash",{"_index":1493,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"injectables/WalletsService.html":{},"miscellaneous/variables.html":{}}}],["transactionparams",{"_index":2542,"title":{"interfaces/TransactionParams.html":{}},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["transactions",{"_index":577,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["transactions'})@apiresponse({status",{"_index":2835,"title":{},"body":{"controllers/WalletsController.html":{}}}],["transactions.map((tx",{"_index":2898,"title":{},"body":{"injectables/WalletsService.html":{}}}],["transform",{"_index":59,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["transformer",{"_index":581,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateWorkflowDto.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["transformtype",{"_index":1138,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["trending",{"_index":1076,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["trends",{"_index":1841,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["trendsmap",{"_index":1843,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["trendsmap.get(datekey",{"_index":1852,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["trendsmap.has(datekey",{"_index":1850,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["trigger",{"_index":621,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["triggertype",{"_index":1396,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["trigger|action|logic",{"_index":603,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["trim",{"_index":486,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["true",{"_index":96,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/BillingService.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"injectables/ExecutionRepository.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/NotificationsService.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["true})@type(undefined",{"_index":1894,"title":{},"body":{"classes/GenerateWorkflowDto.html":{},"classes/RefineWorkflowDto.html":{}}}],["truth",{"_index":1070,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":437,"title":{},"body":{"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/GenerationOptions.html":{},"interfaces/JwtPayload-1.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"controllers/UserController.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["ttl",{"_index":2466,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["twoweeksago",{"_index":1548,"title":{},"body":{"injectables/DashboardService.html":{}}}],["twoweeksago.setdate(twoweeksago.getdate",{"_index":1550,"title":{},"body":{"injectables/DashboardService.html":{}}}],["tx",{"_index":236,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/Workflow.html":{}}}],["tx.auditlog.create",{"_index":240,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["tx.chainid.tostring",{"_index":2903,"title":{},"body":{"injectables/WalletsService.html":{}}}],["tx.createdat.toisostring",{"_index":2906,"title":{},"body":{"injectables/WalletsService.html":{}}}],["tx.id",{"_index":2899,"title":{},"body":{"injectables/WalletsService.html":{}}}],["tx.txhash",{"_index":2902,"title":{},"body":{"injectables/WalletsService.html":{}}}],["tx.userid",{"_index":2900,"title":{},"body":{"injectables/WalletsService.html":{}}}],["tx.value",{"_index":2904,"title":{},"body":{"injectables/WalletsService.html":{}}}],["tx.walletaddress",{"_index":2901,"title":{},"body":{"injectables/WalletsService.html":{}}}],["tx.workflow.create",{"_index":2963,"title":{},"body":{"interfaces/Workflow.html":{}}}],["txhash",{"_index":2777,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":23,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"classes/AccessDeniedError.html":{},"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"injectables/NodeLogsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type'})@isstring",{"_index":3013,"title":{},"body":{"classes/WorkflowNodeDto.html":{}}}],["type.touppercase",{"_index":1189,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["typealiases",{"_index":3213,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1276,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/PrismaService.html":{}}}],["types",{"_index":31,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"classes/MagicService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/RefreshToken.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":3166,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":48,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["typically",{"_index":2505,"title":{},"body":{"injectables/QueueService.html":{}}}],["ui",{"_index":1061,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{},"injectables/NodeExecutionsService.html":{},"injectables/NodeLogsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":1924,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["undefined",{"_index":1254,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/JwtService.html":{},"classes/NodeExecutionDto.html":{},"injectables/NodeExecutionsService.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"interfaces/PaginatedResult.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"interfaces/PaginationParams.html":{},"interfaces/RefreshToken.html":{},"injectables/UserRepository.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"classes/WorkflowExecutionDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["understand",{"_index":455,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["understanding",{"_index":528,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["unique",{"_index":611,"title":{},"body":{"injectables/AiService.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/GenerationOptions.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateWorkflowDto.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{}}}],["unit",{"_index":1105,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":276,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockMetadata.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtStrategy.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PolicyService.html":{},"controllers/UserController.html":{},"injectables/WalletsService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["unread",{"_index":2171,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{}}}],["unread_count",{"_index":2283,"title":{},"body":{"injectables/NotificationsService.html":{}}}],["until",{"_index":1988,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["up",{"_index":1077,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["update",{"_index":215,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["update's",{"_index":2747,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["update(id",{"_index":217,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"injectables/UserRepository.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{}}}],["update(req",{"_index":3057,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["updateblockchaintransactionstatus",{"_index":2779,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["updatecustomblock",{"_index":1248,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatecustomblock(id",{"_index":1341,"title":{},"body":{"controllers/BlocksController.html":{},"injectables/BlocksService.html":{}}}],["updated",{"_index":216,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateWalletDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"controllers/WorkflowsController.html":{}}}],["updated_at",{"_index":1488,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/JwtService.html":{},"classes/ProfileResponseDto.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["updatedat",{"_index":80,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateWalletDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"classes/JwtService.html":{},"classes/ProfileResponseDto.html":{},"interfaces/RefreshToken.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"injectables/UserRepository.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{}}}],["updatedata",{"_index":1252,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"injectables/ExecutionsService.html":{},"injectables/UserService.html":{}}}],["updatedata.blockdata",{"_index":1263,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.category",{"_index":1256,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.code",{"_index":1257,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.description",{"_index":1255,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.discord_webhook",{"_index":2700,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedata.full_name",{"_index":2698,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedata.ispublic",{"_index":1260,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.logic",{"_index":1258,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.logictype",{"_index":1259,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.name",{"_index":1253,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.tags",{"_index":1262,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedata.telegram_handle",{"_index":2699,"title":{},"body":{"injectables/UserService.html":{}}}],["updatedblock",{"_index":1264,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["updatedefinition(id",{"_index":2968,"title":{},"body":{"interfaces/Workflow.html":{}}}],["updatedentity",{"_index":223,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["updatedwallet",{"_index":2875,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.chainid",{"_index":2883,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.chaintype",{"_index":2885,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.createdat.toisostring",{"_index":2887,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.id",{"_index":2880,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.metadata",{"_index":2886,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.updatedat.toisostring",{"_index":2888,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.userid",{"_index":2881,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.walletaddress",{"_index":2882,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updatedwallet.wallettype",{"_index":2884,"title":{},"body":{"injectables/WalletsService.html":{}}}],["updateexecutiondto",{"_index":1408,"title":{"classes/UpdateExecutionDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["updateexecutiondto.error",{"_index":1776,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["updateexecutiondto.status",{"_index":1774,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["updateexecutionstatus",{"_index":1661,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["updateexecutionstatus(id",{"_index":1685,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["updateinput",{"_index":218,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["updatepreferences(userid",{"_index":2197,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["updateprofile",{"_index":2586,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["updateprofile(data",{"_index":2596,"title":{},"body":{"controllers/UserController.html":{}}}],["updateprofile(userid",{"_index":2631,"title":{},"body":{"injectables/UserRepository.html":{},"injectables/UserService.html":{}}}],["updateprofiledto",{"_index":1464,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["updates",{"_index":2721,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["updatestatus",{"_index":1662,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["updatestatus(id",{"_index":1688,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["updateworkflowdto",{"_index":1506,"title":{"classes/UpdateWorkflowDto.html":{}},"body":{"classes/CreateWorkflowDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["updateworkflowdto.description",{"_index":3128,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["updateworkflowdto.edges",{"_index":3130,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["updateworkflowdto.name",{"_index":3127,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["updateworkflowdto.nodes",{"_index":3129,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["updating",{"_index":1267,"title":{},"body":{"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"controllers/UserController.html":{}}}],["uppercase",{"_index":610,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["uppertype",{"_index":1188,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["upsert",{"_index":2674,"title":{},"body":{"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["url",{"_index":854,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BillingService.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateWalletDto.html":{},"interfaces/MagicAuthPayload.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"miscellaneous/variables.html":{}}}],["url.pathname.startswith(\"/login",{"_index":857,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["url.tostring",{"_index":858,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["usage",{"_index":2593,"title":{},"body":{"controllers/UserController.html":{}}}],["usageresponsedto",{"_index":1489,"title":{"classes/UsageResponseDto.html":{}},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{}}}],["use",{"_index":137,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/GenerationOptions.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"interfaces/NodeExecution.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["useclass",{"_index":751,"title":{},"body":{"modules/AppModule.html":{},"modules/ExecutionsModule.html":{}}}],["used",{"_index":170,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateWalletDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/ProfileResponseDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/Workflow.html":{},"miscellaneous/enumerations.html":{}}}],["usedids",{"_index":694,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["usedids.add(edge.id",{"_index":703,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["usedids.add(node.id",{"_index":699,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["usedids.has(edge.id",{"_index":702,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["usedids.has(node.id",{"_index":698,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["useguards",{"_index":1517,"title":{},"body":{"controllers/DashboardController.html":{},"controllers/WalletsController.html":{},"controllers/WorkflowsController.html":{}}}],["user",{"_index":147,"title":{},"body":{"classes/AccessDeniedError.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"classes/AuthResponseDto.html":{},"interfaces/AuthResult.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"injectables/ExecutionsService.html":{},"interfaces/GenerationOptions.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"interfaces/JwtPayload-1.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/MagicService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"interfaces/RefreshToken.html":{},"classes/RegisterDto.html":{},"interfaces/Session.html":{},"interfaces/TokenResponse.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/typealiases.html":{}}}],["user's",{"_index":522,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/MagicService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["user.controller",{"_index":2620,"title":{},"body":{"modules/UserModule.html":{}}}],["user.email",{"_index":810,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{}}}],["user.email.split(\"@\")[0",{"_index":811,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/TokenResponse.html":{}}}],["user.id",{"_index":809,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/RefreshToken.html":{},"interfaces/TokenResponse.html":{},"injectables/UserService.html":{}}}],["user.name",{"_index":945,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["user.notificationpreferences",{"_index":2202,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["user.profile",{"_index":2203,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"injectables/UserService.html":{}}}],["user.profile.discordwebhookurl",{"_index":2690,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile.fullname",{"_index":2688,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile.monthlyexecutionquota",{"_index":2694,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile.monthlyexecutionsused",{"_index":2695,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile.subscriptionexpiresat?.toisostring",{"_index":2693,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile.subscriptionstatus",{"_index":2692,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile.subscriptiontier",{"_index":2691,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile.telegramchatid",{"_index":2689,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile.updatedat?.toisostring",{"_index":2696,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile?.monthlyexecutionquota",{"_index":2702,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile?.monthlyexecutionsused",{"_index":2703,"title":{},"body":{"injectables/UserService.html":{}}}],["user.profile?.subscriptiontier",{"_index":2704,"title":{},"body":{"injectables/UserService.html":{}}}],["user.repository.ts",{"_index":3224,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["user.service",{"_index":2600,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/user.module",{"_index":728,"title":{},"body":{"modules/AppModule.html":{}}}],["user/wallets",{"_index":2815,"title":{},"body":{"controllers/WalletsController.html":{}}}],["user1",{"_index":996,"title":{},"body":{"controllers/BillingController.html":{},"controllers/DashboardController.html":{},"controllers/NotificationsController.html":{},"controllers/WalletsController.html":{}}}],["user_id",{"_index":2003,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["user_wallets",{"_index":2718,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["usercontext",{"_index":494,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["usercontroller",{"_index":2582,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercreateinput",{"_index":3223,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["userid",{"_index":149,"title":{},"body":{"classes/AccessDeniedError.html":{},"controllers/AuthController.html":{},"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"controllers/BillingController.html":{},"injectables/BillingService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockType.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"controllers/DashboardController.html":{},"injectables/DashboardService.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/JwtPayload-2.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/NodeExecution.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"controllers/NotificationsController.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Session.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"controllers/UserController.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["userids",{"_index":2188,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["userinfo",{"_index":2554,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["usermodule",{"_index":715,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["userrepository",{"_index":937,"title":{"injectables/UserRepository.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"modules/DatabaseModule.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["users",{"_index":622,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/MagicService.html":{},"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/examples/ui",{"_index":3251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/examples/worker",{"_index":3389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts",{"_index":1961,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:103",{"_index":1982,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:131",{"_index":1980,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:168",{"_index":1978,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:25",{"_index":1971,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:26",{"_index":1970,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:27",{"_index":1969,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:44",{"_index":1975,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:59",{"_index":1984,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/jwt.service.ts:72",{"_index":1973,"title":{},"body":{"classes/JwtService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/magic.service.ts",{"_index":2034,"title":{},"body":{"classes/MagicService.html":{},"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/magic.service.ts:15",{"_index":2037,"title":{},"body":{"classes/MagicService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/magic.service.ts:34",{"_index":2045,"title":{},"body":{"classes/MagicService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/magic.service.ts:91",{"_index":2039,"title":{},"body":{"classes/MagicService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/middleware.ts",{"_index":3257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/types.ts",{"_index":897,"title":{},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"miscellaneous/typealiases.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/auth/types.ts:66",{"_index":898,"title":{},"body":{"classes/AuthError.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/client.ts",{"_index":3392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/client/index.ts",{"_index":3393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/middleware/auth.middleware.ts",{"_index":3258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy",{"_index":3233,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts",{"_index":2330,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:127",{"_index":2377,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:176",{"_index":2381,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:218",{"_index":2379,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:251",{"_index":2383,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:282",{"_index":2387,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:299",{"_index":2386,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:32",{"_index":2373,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:326",{"_index":2388,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:44",{"_index":2385,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/policies/policy.service.ts:82",{"_index":2375,"title":{},"body":{"classes/PolicyService.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts",{"_index":106,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:127",{"_index":968,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:167",{"_index":962,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:19",{"_index":113,"title":{},"body":{"classes/AccessDeniedError.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:194",{"_index":973,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:229",{"_index":964,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:264",{"_index":966,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:300",{"_index":970,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:312",{"_index":961,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:35",{"_index":958,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:36",{"_index":957,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:37",{"_index":956,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:38",{"_index":959,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:39",{"_index":954,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:57",{"_index":963,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:66",{"_index":960,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:78",{"_index":972,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/base.repository.ts:94",{"_index":969,"title":{},"body":{"classes/BaseRepository.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/execution.repository.ts",{"_index":3230,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/notification.repository.ts",{"_index":2146,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/user.repository.ts",{"_index":3235,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/wallet.repository.ts",{"_index":2706,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/typealiases.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/repositories/workflow.repository.ts",{"_index":2907,"title":{},"body":{"interfaces/Workflow.html":{},"miscellaneous/typealiases.html":{}}}],["users/argahv/projects/personal/zyra/packages/database/src/utils/pagination.ts",{"_index":2296,"title":{},"body":{"interfaces/PaginatedResult.html":{},"interfaces/PaginationParams.html":{},"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/schemas/blockschemas.ts",{"_index":3259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/wallet.ts",{"_index":2543,"title":{},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"miscellaneous/enumerations.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/wallet.ts:58",{"_index":2790,"title":{},"body":{"interfaces/WalletProvider.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/wallet.ts:59",{"_index":2792,"title":{},"body":{"interfaces/WalletProvider.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/wallet.ts:60",{"_index":2794,"title":{},"body":{"interfaces/WalletProvider.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/wallet.ts:61",{"_index":2791,"title":{},"body":{"interfaces/WalletProvider.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/wallet.ts:62",{"_index":2793,"title":{},"body":{"interfaces/WalletProvider.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/workflow/block",{"_index":3169,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/workflow/categories.ts",{"_index":3178,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/workflow/custom",{"_index":6,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"miscellaneous/enumerations.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/workflow/execution.ts",{"_index":1022,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"miscellaneous/typealiases.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/workflow/execution.ts:79",{"_index":1054,"title":{},"body":{"interfaces/BlockHandler.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/workflow/execution.ts:80",{"_index":1057,"title":{},"body":{"interfaces/BlockHandler.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/workflow/execution.ts:81",{"_index":1055,"title":{},"body":{"interfaces/BlockHandler.html":{}}}],["users/argahv/projects/personal/zyra/packages/types/src/workflow/metadata.ts",{"_index":1059,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":2599,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["userupdateinput",{"_index":3225,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["userwallet",{"_index":900,"title":{},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["userwallets",{"_index":907,"title":{},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"interfaces/Session.html":{}}}],["userwithprofile",{"_index":3226,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["userwithprofileandwallets",{"_index":3227,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["userwithwallets",{"_index":3228,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["uses",{"_index":1187,"title":{},"body":{"interfaces/BlockMetadata.html":{},"injectables/ExecutionsService.html":{}}}],["using",{"_index":271,"title":{},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"controllers/AuthController.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/MagicAuthPayload.html":{},"classes/MagicService.html":{},"injectables/QueueService.html":{},"interfaces/RefreshToken.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowsService.html":{}}}],["utf8",{"_index":1134,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["utility|integration|ai|data|analytics|communication",{"_index":447,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["utils",{"_index":2912,"title":{},"body":{"interfaces/Workflow.html":{}}}],["utils.ts",{"_index":3222,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["utils/pagination",{"_index":2154,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["utils/validation",{"_index":2710,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["uuid",{"_index":399,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"dependencies.html":{}}}],["uuids",{"_index":612,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["uuidv4",{"_index":398,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["v4",{"_index":397,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["valid",{"_index":608,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["validate",{"_index":1053,"title":{},"body":{"interfaces/BlockHandler.html":{},"injectables/JwtStrategy.html":{},"classes/MagicService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["validate(config",{"_index":1056,"title":{},"body":{"interfaces/BlockHandler.html":{}}}],["validate(payload",{"_index":1952,"title":{},"body":{"interfaces/JwtPayload-1.html":{},"injectables/JwtStrategy.html":{}}}],["validate?(config",{"_index":1051,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["validated",{"_index":2046,"title":{},"body":{"classes/MagicService.html":{}}}],["validatenested",{"_index":1505,"title":{},"body":{"classes/CreateWorkflowDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["validatetoken",{"_index":2036,"title":{},"body":{"classes/MagicService.html":{}}}],["validatetoken(didtoken",{"_index":2044,"title":{},"body":{"classes/MagicService.html":{}}}],["validateuser",{"_index":935,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(payload",{"_index":941,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"interfaces/JwtPayload.html":{},"interfaces/TokenResponse.html":{}}}],["validatewallet",{"_index":2709,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["validatewallet(data",{"_index":2762,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["validating",{"_index":2058,"title":{},"body":{"classes/MagicService.html":{}}}],["validation",{"_index":651,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"classes/MagicService.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["validationresult",{"_index":648,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["validationresult.data",{"_index":654,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["validationresult.error.message",{"_index":653,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["validationresult.success",{"_index":650,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["validator",{"_index":1407,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/CreateWalletDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/ProfileResponseDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"classes/WorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"dependencies.html":{}}}],["value",{"_index":380,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"injectables/NotificationsService.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"injectables/PrismaService.html":{},"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"injectables/WalletsService.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":572,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":2055,"title":{},"body":{"classes/MagicService.html":{}}}],["variables",{"_index":2050,"title":{"miscellaneous/variables.html":{}},"body":{"classes/MagicService.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":549,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["verifiedtoken",{"_index":2019,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["verifiedtoken.id",{"_index":2028,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["verifiedtoken.userid",{"_index":2022,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["verify",{"_index":1765,"title":{},"body":{"injectables/ExecutionsService.html":{},"classes/JwtService.html":{},"interfaces/RefreshToken.html":{},"injectables/WalletsService.html":{},"injectables/WorkflowsService.html":{}}}],["verifyrefreshtoken",{"_index":1967,"title":{},"body":{"classes/JwtService.html":{}}}],["verifyrefreshtoken(token",{"_index":1981,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["verifytoken",{"_index":1968,"title":{},"body":{"classes/JwtService.html":{}}}],["verifytoken(token",{"_index":1983,"title":{},"body":{"classes/JwtService.html":{},"interfaces/RefreshToken.html":{}}}],["version",{"_index":84,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/Workflow.html":{},"properties.html":{}}}],["via",{"_index":471,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":159,"title":{},"body":{"classes/AccessDeniedError.html":{},"classes/BaseRepository.html":{},"interfaces/BaseRepositoryOptions.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{}}}],["wallet",{"_index":1457,"title":{},"body":{"classes/CreateWalletDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/ProfileResponseDto.html":{},"interfaces/TransactionParams.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["wallet's",{"_index":2725,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["wallet'})@apiresponse({status",{"_index":2823,"title":{},"body":{"controllers/WalletsController.html":{}}}],["wallet.chainid",{"_index":2864,"title":{},"body":{"injectables/WalletsService.html":{}}}],["wallet.chaintype",{"_index":2866,"title":{},"body":{"injectables/WalletsService.html":{}}}],["wallet.createdat.toisostring",{"_index":2868,"title":{},"body":{"injectables/WalletsService.html":{}}}],["wallet.id",{"_index":2862,"title":{},"body":{"injectables/WalletsService.html":{}}}],["wallet.metadata",{"_index":2867,"title":{},"body":{"injectables/WalletsService.html":{}}}],["wallet.repository.ts",{"_index":3215,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["wallet.ts",{"_index":3167,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wallet.updatedat.toisostring",{"_index":2869,"title":{},"body":{"injectables/WalletsService.html":{}}}],["wallet.userid",{"_index":2863,"title":{},"body":{"injectables/WalletsService.html":{}}}],["wallet.walletaddress",{"_index":2760,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{}}}],["wallet.wallettype",{"_index":2865,"title":{},"body":{"injectables/WalletsService.html":{}}}],["walletaddress",{"_index":902,"title":{},"body":{"classes/AuthError.html":{},"interfaces/AuthResult.html":{},"classes/CreateWalletDto.html":{},"interfaces/JwtPayload-2.html":{},"interfaces/MagicAuthPayload-1.html":{},"classes/ProfileResponseDto.html":{},"interfaces/Session.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["walletbalance",{"_index":2558,"title":{"interfaces/WalletBalance.html":{}},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["walletcreateinput",{"_index":2705,"title":{"interfaces/WalletCreateInput.html":{}},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["walletdata",{"_index":2767,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["walletid",{"_index":2352,"title":{},"body":{"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["walletinfo",{"_index":2547,"title":{"interfaces/WalletInfo.html":{}},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["walletprovider",{"_index":2560,"title":{"interfaces/WalletProvider.html":{}},"body":{"interfaces/TransactionParams.html":{},"interfaces/WalletBalance.html":{},"interfaces/WalletInfo.html":{},"interfaces/WalletProvider.html":{}}}],["walletrepository",{"_index":1616,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{},"overview.html":{}}}],["walletresponsedto",{"_index":1490,"title":{"classes/WalletResponseDto.html":{}},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["wallets",{"_index":2755,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["wallets'})@apiresponse({status",{"_index":2831,"title":{},"body":{"controllers/WalletsController.html":{}}}],["wallets.controller",{"_index":2621,"title":{},"body":{"modules/UserModule.html":{}}}],["wallets.map((wallet",{"_index":2861,"title":{},"body":{"injectables/WalletsService.html":{}}}],["wallets.service",{"_index":2622,"title":{},"body":{"modules/UserModule.html":{},"controllers/WalletsController.html":{}}}],["walletscontroller",{"_index":2619,"title":{"controllers/WalletsController.html":{}},"body":{"modules/UserModule.html":{},"controllers/WalletsController.html":{}}}],["walletsservice",{"_index":2617,"title":{"injectables/WalletsService.html":{}},"body":{"modules/UserModule.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"overview.html":{}}}],["wallettransaction",{"_index":2707,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["wallettransactioncreateinput",{"_index":2712,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/typealiases.html":{}}}],["wallettransactionfindmanyinput",{"_index":2716,"title":{"interfaces/WalletTransactionFindManyInput.html":{}},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["wallettransactionresponsedto",{"_index":1491,"title":{"classes/WalletTransactionResponseDto.html":{}},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{}}}],["wallettype",{"_index":1450,"title":{},"body":{"classes/CreateWalletDto.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"interfaces/WalletCreateInput.html":{},"classes/WalletResponseDto.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WalletUpdateInput.html":{},"injectables/WalletsService.html":{}}}],["walletupdateinput",{"_index":2711,"title":{"interfaces/WalletUpdateInput.html":{}},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["walletwithtransactions",{"_index":2717,"title":{},"body":{"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{},"miscellaneous/typealiases.html":{}}}],["want",{"_index":2070,"title":{},"body":{"classes/MagicService.html":{},"interfaces/WalletCreateInput.html":{},"interfaces/WalletTransactionFindManyInput.html":{},"interfaces/WalletUpdateInput.html":{}}}],["warn",{"_index":1048,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"miscellaneous/variables.html":{}}}],["ways",{"_index":1167,"title":{},"body":{"interfaces/BlockMetadata.html":{}}}],["we'll",{"_index":1880,"title":{},"body":{"injectables/ExecutionsService.html":{},"injectables/QueueService.html":{},"interfaces/Workflow.html":{}}}],["we're",{"_index":863,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/MagicAuthPayload.html":{}}}],["webhook",{"_index":45,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"injectables/AiService.html":{},"controllers/BillingController.html":{},"interfaces/BlockMetadata.html":{},"interfaces/BlockParameter.html":{},"classes/CreateWalletDto.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/GenerationOptions.html":{},"classes/ProfileResponseDto.html":{},"classes/UpdateProfileDto.html":{},"classes/UsageResponseDto.html":{},"classes/WalletResponseDto.html":{},"classes/WalletTransactionResponseDto.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["webhookenabled",{"_index":2160,"title":{},"body":{"interfaces/NotificationCreateInput.html":{},"interfaces/NotificationPreferenceCreateInput.html":{},"interfaces/NotificationPreferenceUpdateInput.html":{},"interfaces/NotificationUpdateInput.html":{}}}],["webhooks",{"_index":1020,"title":{},"body":{"injectables/BillingService.html":{}}}],["week",{"_index":1564,"title":{},"body":{"injectables/DashboardService.html":{}}}],["weekday",{"_index":1640,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["weekly",{"_index":3282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["where.category",{"_index":1223,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["where.ispublic",{"_index":1221,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["where.or",{"_index":1222,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["where.userid",{"_index":1696,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["where.workflowid",{"_index":1695,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["whereclause",{"_index":2938,"title":{},"body":{"interfaces/Workflow.html":{}}}],["whether",{"_index":1445,"title":{},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/UpdateExecutionDto.html":{},"interfaces/Workflow.html":{},"classes/WorkflowExecutionDto.html":{}}}],["without",{"_index":2949,"title":{},"body":{"interfaces/Workflow.html":{}}}],["word.charat(0).touppercase",{"_index":1308,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["word.slice(1).tolowercase",{"_index":1309,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["worker",{"_index":55,"title":{},"body":{"interfaces/AICustomBlockData.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockParameter.html":{},"interfaces/CustomBlockConfigField.html":{},"interfaces/CustomBlockData.html":{},"interfaces/CustomBlockDefinition.html":{},"interfaces/CustomBlockExecutionResult.html":{},"interfaces/CustomBlockInput.html":{},"interfaces/CustomBlockOutput.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["workflow",{"_index":280,"title":{"interfaces/Workflow.html":{}},"body":{"controllers/AiController.html":{},"injectables/AiService.html":{},"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/BlockMetadata.html":{},"classes/CreateExecutionDto.html":{},"classes/CreateWorkflowDto.html":{},"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"classes/RefineWorkflowDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/UpdateWorkflowDto.html":{},"interfaces/Workflow.html":{},"classes/WorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowExecutionDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"injectables/WorkflowRepository.html":{},"classes/WorkflowResponseDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["workflow')@apioperation({summary",{"_index":279,"title":{},"body":{"controllers/AiController.html":{}}}],["workflow's",{"_index":2967,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflow'})@apiresponse({status",{"_index":3035,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["workflow'})@isstring",{"_index":1501,"title":{},"body":{"classes/CreateWorkflowDto.html":{},"classes/GenerateWorkflowDto.html":{}}}],["workflow.createdat",{"_index":2933,"title":{},"body":{"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["workflow.createdby",{"_index":2936,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflow.definition",{"_index":2935,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflow.description",{"_index":2926,"title":{},"body":{"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["workflow.dto",{"_index":3063,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["workflow.dto.ts",{"_index":1621,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{},"classes/ExecuteWorkflowResponseDto.html":{}}}],["workflow.dto.ts:13",{"_index":1638,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{}}}],["workflow.dto.ts:23",{"_index":1629,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{}}}],["workflow.dto.ts:31",{"_index":1630,"title":{},"body":{"classes/ExecuteWorkflowDto.html":{}}}],["workflow.dto.ts:39",{"_index":1646,"title":{},"body":{"classes/ExecuteWorkflowResponseDto.html":{}}}],["workflow.dto.ts:46",{"_index":1648,"title":{},"body":{"classes/ExecuteWorkflowResponseDto.html":{}}}],["workflow.dto.ts:53",{"_index":1647,"title":{},"body":{"classes/ExecuteWorkflowResponseDto.html":{}}}],["workflow.edges",{"_index":2929,"title":{},"body":{"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["workflow.edges.foreach((edge",{"_index":701,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["workflow.id",{"_index":2923,"title":{},"body":{"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["workflow.ispublic",{"_index":2930,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflow.name",{"_index":2925,"title":{},"body":{"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["workflow.nodes",{"_index":2927,"title":{},"body":{"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["workflow.nodes.foreach((node",{"_index":697,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["workflow.repository.ts",{"_index":3229,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["workflow.tags",{"_index":2931,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflow.updatedat",{"_index":2934,"title":{},"body":{"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["workflow.userid",{"_index":2924,"title":{},"body":{"interfaces/Workflow.html":{},"injectables/WorkflowsService.html":{}}}],["workflow.version",{"_index":2932,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflow_id",{"_index":1041,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["workflowcreateinput",{"_index":2915,"title":{},"body":{"interfaces/Workflow.html":{},"miscellaneous/typealiases.html":{}}}],["workflowdata",{"_index":1027,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"interfaces/ExecutionLog.html":{},"interfaces/ExecutionResult.html":{},"interfaces/NodeExecution.html":{},"interfaces/Workflow.html":{}}}],["workflowdata.user",{"_index":2958,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflowdata.userid",{"_index":2960,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflowdto",{"_index":1507,"title":{"classes/WorkflowDto.html":{}},"body":{"classes/CreateWorkflowDto.html":{},"classes/PaginatedWorkflowsResponseDto.html":{},"classes/UpdateWorkflowDto.html":{},"classes/WorkflowDto.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{}}}],["workflowdto})@apiresponse({status",{"_index":3051,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["workflowedge",{"_index":363,"title":{"interfaces/WorkflowEdge.html":{}},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["workflowedgedto",{"_index":1892,"title":{"classes/WorkflowEdgeDto.html":{}},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["workflowexecution",{"_index":1537,"title":{},"body":{"injectables/DashboardService.html":{},"injectables/ExecutionRepository.html":{},"interfaces/Workflow.html":{}}}],["workflowexecutiondto",{"_index":1421,"title":{"classes/WorkflowExecutionDto.html":{}},"body":{"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{}}}],["workflowid",{"_index":1028,"title":{},"body":{"interfaces/BlockExecutionContext.html":{},"interfaces/BlockHandler.html":{},"classes/CreateExecutionDto.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"interfaces/ExecutionLog.html":{},"injectables/ExecutionRepository.html":{},"interfaces/ExecutionResult.html":{},"injectables/ExecutionsService.html":{},"interfaces/NodeExecution.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"interfaces/PolicyContext.html":{},"interfaces/PolicyResult.html":{},"classes/PolicyService.html":{},"injectables/QueueService.html":{},"classes/UpdateExecutionDto.html":{},"classes/WorkflowExecutionDto.html":{},"index.html":{}}}],["workflowidswithexecutions.size",{"_index":1561,"title":{},"body":{"injectables/DashboardService.html":{}}}],["workflownode",{"_index":366,"title":{"interfaces/WorkflowNode.html":{}},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["workflownodedto",{"_index":1896,"title":{"classes/WorkflowNodeDto.html":{}},"body":{"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["workflowrepository",{"_index":1533,"title":{"injectables/WorkflowRepository.html":{}},"body":{"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"interfaces/Workflow.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["workflowresponsedto",{"_index":281,"title":{"classes/WorkflowResponseDto.html":{}},"body":{"controllers/AiController.html":{},"classes/GenerateWorkflowDto.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"classes/WorkflowEdgeDto.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{}}}],["workflowresponseschema",{"_index":414,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["workflowresponseschema.safeparse(parsedresponse",{"_index":649,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["workflows",{"_index":531,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockMetadata.html":{},"interfaces/GenerationOptions.html":{},"interfaces/Workflow.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"injectables/WorkflowRepository.html":{},"controllers/WorkflowsController.html":{},"injectables/WorkflowsService.html":{},"miscellaneous/variables.html":{}}}],["workflows'})@apiresponse({status",{"_index":3044,"title":{},"body":{"controllers/WorkflowsController.html":{}}}],["workflows.controller",{"_index":3093,"title":{},"body":{"modules/WorkflowsModule.html":{}}}],["workflows.map((workflow",{"_index":3110,"title":{},"body":{"injectables/WorkflowsService.html":{}}}],["workflows.map(workflow",{"_index":2946,"title":{},"body":{"interfaces/Workflow.html":{}}}],["workflows.service",{"_index":3065,"title":{},"body":{"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{}}}],["workflows/workflows.module",{"_index":729,"title":{},"body":{"modules/AppModule.html":{}}}],["workflowscontroller",{"_index":3032,"title":{"controllers/WorkflowsController.html":{}},"body":{"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{}}}],["workflowsmodule",{"_index":716,"title":{"modules/WorkflowsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WorkflowsModule.html":{},"modules.html":{},"overview.html":{}}}],["workflowsservice",{"_index":3064,"title":{"injectables/WorkflowsService.html":{}},"body":{"controllers/WorkflowsController.html":{},"modules/WorkflowsModule.html":{},"injectables/WorkflowsService.html":{},"overview.html":{}}}],["workflowstatus",{"_index":1686,"title":{},"body":{"injectables/ExecutionRepository.html":{}}}],["workflowupdateinput",{"_index":2917,"title":{},"body":{"interfaces/Workflow.html":{},"miscellaneous/typealiases.html":{}}}],["workflowwithexecutions",{"_index":2919,"title":{},"body":{"interfaces/Workflow.html":{},"miscellaneous/typealiases.html":{}}}],["working",{"_index":461,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{}}}],["workspace",{"_index":3146,"title":{},"body":{"dependencies.html":{}}}],["write",{"_index":1153,"title":{},"body":{"interfaces/BlockMetadata.html":{},"miscellaneous/variables.html":{}}}],["x",{"_index":408,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["y",{"_index":409,"title":{},"body":{"injectables/AiService.html":{},"classes/GenerateWorkflowDto.html":{},"interfaces/GenerationOptions.html":{},"classes/GenerationOptionsDto.html":{},"classes/RefineWorkflowDto.html":{},"interfaces/WorkflowEdge.html":{},"classes/WorkflowEdgeDto.html":{},"interfaces/WorkflowNode.html":{},"classes/WorkflowNodeDto.html":{},"classes/WorkflowResponseDto.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":955,"title":{},"body":{"classes/BaseRepository.html":{},"controllers/BlocksController.html":{},"injectables/BlocksService.html":{},"classes/ExecutionActionDto.html":{},"classes/ExecutionActionResponseDto.html":{},"injectables/ExecutionRepository.html":{},"injectables/ExecutionsService.html":{},"classes/NodeExecutionDto.html":{},"classes/NodeLogDto.html":{},"controllers/NotificationsController.html":{},"classes/PaginatedExecutionsResponseDto.html":{},"classes/PaginationMetaDto.html":{},"controllers/WalletsController.html":{},"injectables/WalletsService.html":{},"classes/WorkflowExecutionDto.html":{},"injectables/WorkflowsService.html":{}}}],["you'd",{"_index":2504,"title":{},"body":{"injectables/QueueService.html":{}}}],["z",{"_index":395,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.any",{"_index":3289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.any().optional",{"_index":3292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.array",{"_index":416,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.array(z.any",{"_index":3366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.array(z.any()).optional",{"_index":3357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.array(z.unknown()).default",{"_index":429,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.boolean().default(false",{"_index":431,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.boolean().default(true",{"_index":426,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.enum",{"_index":3336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"above",{"_index":3261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"and",{"_index":3335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"count",{"_index":3369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"email",{"_index":3272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"for",{"_index":3372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"get",{"_index":3286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"get_balance",{"_index":3384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"insert",{"_index":3376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"json",{"_index":3367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"map",{"_index":3364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"seconds",{"_index":3276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"send_transaction",{"_index":3377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum([\"trigger",{"_index":423,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.enum([\"utf8",{"_index":3359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.nativeenum(blocktype",{"_index":420,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.number",{"_index":419,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.number().default(10000",{"_index":3295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number().default(3",{"_index":3294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number().default(8",{"_index":3310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number().optional",{"_index":3363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number().positive",{"_index":3275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number()]).optional",{"_index":3387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":415,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.record(z.any",{"_index":3333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.any()).optional",{"_index":3308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.string()).optional",{"_index":3288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.unknown()).optional",{"_index":428,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.string",{"_index":417,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.string().default(\"custom",{"_index":418,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.string().email",{"_index":3269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().email().optional",{"_index":3271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().min(1",{"_index":3260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().optional",{"_index":421,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/variables.html":{}}}],["z.string().url",{"_index":3285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.union([z.string",{"_index":3386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zero",{"_index":1845,"title":{},"body":{"injectables/ExecutionsService.html":{}}}],["zod",{"_index":396,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":339,"title":{},"body":{"modules/AiModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BillingModule.html":{},"modules/BlocksModule.html":{},"modules/DashboardModule.html":{},"modules/DatabaseModule.html":{},"modules/ExecutionsModule.html":{},"modules/NotificationsModule.html":{},"modules/QueueModule.html":{},"modules/UserModule.html":{},"modules/WorkflowsModule.html":{},"overview.html":{}}}],["zyra",{"_index":1198,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"index.html":{},"properties.html":{}}}],["zyra.execution_queue",{"_index":2449,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["zyra.execution_queue.delayed",{"_index":2457,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["zyra.execution_queue.dlq",{"_index":2451,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["zyra.execution_queue.retry",{"_index":2455,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["zyra.execution_scheduled",{"_index":2460,"title":{},"body":{"injectables/QueueService.html":{},"miscellaneous/variables.html":{}}}],["zyra/database",{"_index":773,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/AuthUser.html":{},"injectables/DashboardService.html":{},"modules/DatabaseModule.html":{},"injectables/ExecutionRepository.html":{},"modules/ExecutionsModule.html":{},"injectables/ExecutionsService.html":{},"interfaces/JwtPayload.html":{},"interfaces/MagicAuthPayload.html":{},"injectables/NotificationsService.html":{},"injectables/PrismaService.html":{},"interfaces/TokenResponse.html":{},"injectables/UserRepository.html":{},"injectables/UserService.html":{},"injectables/WalletsService.html":{},"injectables/WorkflowRepository.html":{},"injectables/WorkflowsService.html":{},"dependencies.html":{}}}],["zyra/types",{"_index":402,"title":{},"body":{"injectables/AiService.html":{},"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"dependencies.html":{}}}],["zyrablocktype",{"_index":1194,"title":{},"body":{"interfaces/BlockType.html":{},"injectables/BlocksService.html":{},"interfaces/CreateCustomBlockRequest.html":{}}}],["zzyra",{"_index":440,"title":{},"body":{"injectables/AiService.html":{},"interfaces/GenerationOptions.html":{},"interfaces/WorkflowEdge.html":{},"interfaces/WorkflowNode.html":{},"miscellaneous/enumerations.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AICustomBlockData.html":{"url":"interfaces/AICustomBlockData.html","title":"interface - AICustomBlockData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AICustomBlockData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for AI-generated custom block data\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            configFields\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            inputs\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            outputs\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        configFields\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        configFields:         CustomBlockConfigField[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomBlockConfigField[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:         CustomBlockInput[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomBlockInput[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:         CustomBlockOutput[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomBlockOutput[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NodeCategory } from './categories';\n\n/**\n * Data types for inputs/outputs\n */\nexport enum DataType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  OBJECT = \"object\",\n  ARRAY = \"array\",\n  ANY = \"any\",\n}\n\n/**\n * Logic execution types for custom blocks\n */\nexport enum ExecutionType {\n  FUNCTION = \"function\",\n  CODE = \"code\",\n  WEBHOOK = \"webhook\",\n}\n\n/**\n * Logic types for custom block execution\n */\nexport enum LogicType {\n  JAVASCRIPT = \"javascript\",\n  TYPESCRIPT = \"typescript\",\n  PYTHON = \"python\",\n  REST_API = \"rest-api\",\n  // Add these to match worker implementation\n  JSON_TRANSFORM = \"json-transform\",\n  TEMPLATE = \"template\",\n  CONDITION = \"condition\",\n}\n\n/**\n * Interface for custom block input parameters\n */\nexport interface CustomBlockInput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Interface for custom block output parameters\n */\nexport interface CustomBlockOutput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n}\n\n/**\n * Interface for custom block configuration fields\n */\nexport interface CustomBlockConfigField {\n  name: string;\n  label: string;\n  type: string;\n  defaultValue?: any;\n  options?: string[];\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n}\n\n/**\n * Block parameter definition\n */\nexport interface BlockParameter {\n  name: string;\n  type: DataType;\n  description: string;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Custom block definition\n */\nexport interface CustomBlockDefinition {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  tags?: string[];\n}\n\n/**\n * Interface for AI-generated custom block data\n */\nexport interface AICustomBlockData {\n  name: string;\n  description: string;\n  category: string;\n  inputs: CustomBlockInput[];\n  outputs: CustomBlockOutput[];\n  configFields: CustomBlockConfigField[];\n  code: string;\n}\n\n/**\n * Complete custom block data with all properties\n */\nexport interface CustomBlockData {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  isPublic: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  version?: string;\n  rating?: number;\n  downloads?: number;\n}\n\n/**\n * Result of custom block execution\n */\nexport interface CustomBlockExecutionResult {\n  success: boolean;\n  outputs?: Record;\n  error?: string;\n  logs?: string[];\n}\n\n/**\n * Helper function to create a block parameter\n */\nexport function createParameter(name: string, type: DataType, description: string, required = true, defaultValue?: any): BlockParameter {\n  return {\n    name,\n    type,\n    description,\n    required,\n    defaultValue,\n  };\n}\n\n/**\n * Helper function to create a custom block definition\n */\nexport function createCustomBlockDefinition(options: {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n}): CustomBlockDefinition {\n  return {\n    ...options,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AccessDeniedError.html":{"url":"classes/AccessDeniedError.html","title":"class - AccessDeniedError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccessDeniedError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Access denied error class\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, PrismaClient } from \"@prisma/client\";\nimport prisma from \"../client\";\nimport {\n  PolicyContext,\n  PolicyResult,\n  PolicyService,\n} from \"../policies/policy.service\";\n\n/**\n * Access denied error class\n */\nexport class AccessDeniedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AccessDeniedError\";\n  }\n}\n\n/**\n * Base repository options\n */\nexport interface BaseRepositoryOptions {\n  auditEnabled?: boolean;\n  policyEnabled?: boolean;\n}\n\nexport abstract class BaseRepository {\n  protected prisma: PrismaClient;\n  protected policyService: PolicyService;\n  protected abstract model: any;\n  protected abstract tableName: string;\n  protected options: BaseRepositoryOptions;\n\n  constructor(prismaClient?: PrismaClient, options: BaseRepositoryOptions = {}) {\n    // Use the provided client or fall back to the default\n    this.prisma = prismaClient || prisma;\n    this.policyService = new PolicyService();\n    this.options = {\n      auditEnabled: true,\n      policyEnabled: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a policy context for a user\n   * @param userId The user ID\n   * @returns The policy context\n   */\n  protected async createPolicyContext(userId: string): Promise {\n    return this.policyService.createContext(userId);\n  }\n\n  /**\n   * Check if a policy result allows access\n   * @param result The policy result\n   * @throws AccessDeniedError if access is denied\n   */\n  protected checkPolicyResult(result: PolicyResult): void {\n    if (!result.allowed) {\n      throw new AccessDeniedError(result.message || \"Access denied\");\n    }\n  }\n\n  /**\n   * Log an audit event\n   * @param action The action performed\n   * @param rowId The row ID (used for context but not sent to audit log)\n   * @param userId The user ID\n   */\n  protected async logAudit(\n    action: string,\n    rowId: string,\n    userId: string\n  ): Promise {\n    if (this.options.auditEnabled) {\n      await this.policyService.logAuditEvent(action, this.tableName, userId);\n    }\n  }\n\n  /**\n   * Find an entity by ID with policy enforcement\n   * @param id The entity ID\n   * @param userId The user ID (for policy enforcement)\n   * @returns The entity or null\n   */\n  async findById(id: string, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.findUnique({\n        where: { id },\n      });\n    }\n\n    // Create policy context\n    const context = await this.createPolicyContext(userId);\n\n    // Get entity with basic check\n    const entity = await this.model.findUnique({\n      where: { id },\n    });\n\n    // If entity doesn't exist, return null\n    if (!entity) return null;\n\n    // Check if user has access to this entity\n    // This is a basic check that will be overridden by specific repositories\n    if (entity.userId && entity.userId !== userId && !context.isAdmin) {\n      return null;\n    }\n\n    return entity;\n  }\n\n  /**\n   * Find all entities with policy enforcement\n   * @param userId The user ID (for policy enforcement)\n   * @returns An array of entities\n   */\n  async findAll(userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.findMany();\n    }\n\n    // Create policy context\n    const context = await this.createPolicyContext(userId);\n\n    // If admin, return all entities\n    if (context.isAdmin) {\n      return this.model.findMany();\n    }\n\n    // Otherwise, return only entities the user has access to\n    return this.model.findMany({\n      where: {\n        OR: [\n          { userId: context.userId },\n          { isPublic: true },\n          {\n            team: {\n              members: {\n                some: {\n                  userId: context.userId,\n                },\n              },\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  /**\n   * Create a new entity with policy enforcement\n   * @param data The entity data\n   * @param userId The user ID (for policy enforcement)\n   * @returns The created entity\n   */\n  async create(data: CreateInput, userId?: string): Promise {\n    // If userId is provided and the entity supports it, set the userId\n    const entityData: any = { ...data };\n    if (userId) {\n      entityData.userId = userId;\n    }\n\n    // Create the entity\n    const entity = await this.model.create({\n      data: entityData,\n    });\n\n    // Log audit event if enabled and userId is provided\n    if (userId && this.options.auditEnabled) {\n      await this.logAudit(\"CREATE\", entity.id, userId);\n    }\n\n    return entity;\n  }\n\n  /**\n   * Update an entity with policy enforcement\n   * @param id The entity ID\n   * @param data The entity data\n   * @param userId The user ID (for policy enforcement)\n   * @returns The updated entity\n   */\n  async update(id: string, data: UpdateInput, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.update({\n        where: { id },\n        data,\n      });\n    }\n\n    // Check if user has access to this entity\n    const entity = await this.findById(id, userId);\n    if (!entity) {\n      throw new AccessDeniedError(\n        \"Entity not found or you do not have permission to update it\"\n      );\n    }\n\n    // Update the entity\n    const updatedEntity = await this.model.update({\n      where: { id },\n      data,\n    });\n\n    // Log audit event\n    await this.logAudit(\"UPDATE\", id, userId);\n\n    return updatedEntity;\n  }\n\n  /**\n   * Delete an entity with policy enforcement\n   * @param id The entity ID\n   * @param userId The user ID (for policy enforcement)\n   * @returns The deleted entity\n   */\n  async delete(id: string, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.delete({\n        where: { id },\n      });\n    }\n\n    // Check if user has access to this entity\n    const entity = await this.findById(id, userId);\n    if (!entity) {\n      throw new AccessDeniedError(\n        \"Entity not found or you do not have permission to delete it\"\n      );\n    }\n\n    // Delete the entity\n    const deletedEntity = await this.model.delete({\n      where: { id },\n    });\n\n    // Log audit event\n    await this.logAudit(\"DELETE\", id, userId);\n\n    return deletedEntity;\n  }\n\n  /**\n   * Perform an operation in a transaction with audit logging\n   * @param operation The operation to perform\n   * @param action The audit action\n   * @param rowId The row ID\n   * @param userId The user ID\n   * @returns The result of the operation\n   */\n  protected async executeWithTransaction(\n    operation: (tx: Prisma.TransactionClient) => Promise,\n    action: string,\n    rowId: string,\n    userId: string\n  ): Promise {\n    return await this.prisma.$transaction(\n      async (tx: Prisma.TransactionClient) => {\n        // Perform the operation\n        const result = await operation(tx);\n\n        // Log audit event if enabled\n        if (this.options.auditEnabled) {\n          await tx.auditLog.create({\n            data: {\n              action,\n              resource: this.tableName,\n              resourceId: rowId,\n              userId,\n              metadata: {},\n              createdAt: new Date(),\n            },\n          });\n        }\n\n        return result;\n      }\n    );\n  }\n\n  /**\n   * Find many records based on a filter\n   * @param filter The filter to apply\n   * @param options Additional options for the query\n   * @returns An array of records\n   */\n  async findMany(filter?: any, options?: any): Promise {\n    return this.model.findMany({\n      where: filter,\n      ...options,\n    });\n  }\n\n  /**\n   * Count records based on a filter\n   * @param filter The filter to apply\n   * @returns The count of records\n   */\n  async count(filter?: any): Promise {\n    return this.model.count({\n      where: filter,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AiController.html":{"url":"controllers/AiController.html","title":"controller - AiController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AiController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/ai.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                ai\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                generateBlock\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                generateWorkflow\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                refineWorkflow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        generateBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateBlock(data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate-block')@ApiOperation({summary: 'Generate block using AI'})@ApiResponse({status: 200, description: 'Block generated successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/ai/ai.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        generateWorkflow\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateWorkflow(data: GenerateWorkflowDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate-workflow')@ApiOperation({summary: 'Generate workflow using AI'})@ApiResponse({status: 200, description: 'Workflow generated successfully', type: WorkflowResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/ai/ai.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            GenerateWorkflowDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        refineWorkflow\n                        \n                    \n                \n            \n            \n                \n                        \n                    refineWorkflow(data: RefineWorkflowDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refine-workflow')@ApiOperation({summary: 'Refine existing workflow using AI'})@ApiResponse({status: 200, description: 'Workflow refined successfully', type: WorkflowResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/ai/ai.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            RefineWorkflowDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body } from \"@nestjs/common\";\nimport { ApiTags, ApiOperation, ApiResponse } from \"@nestjs/swagger\";\nimport { AiService } from \"./ai.service\";\nimport {\n  GenerateWorkflowDto,\n  RefineWorkflowDto,\n  WorkflowResponseDto,\n} from \"./dto/workflow-generation.dto\";\n\n@ApiTags(\"ai\")\n@Controller(\"ai\")\nexport class AiController {\n  constructor(private readonly aiService: AiService) {}\n\n  @Post(\"generate-block\")\n  @ApiOperation({ summary: \"Generate block using AI\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Block generated successfully\",\n  })\n  async generateBlock(@Body() data: { prompt: string }) {\n    return this.aiService.generateBlock(data.prompt);\n  }\n\n  @Post(\"generate-workflow\")\n  @ApiOperation({ summary: \"Generate workflow using AI\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Workflow generated successfully\",\n    type: WorkflowResponseDto,\n  })\n  async generateWorkflow(\n    @Body() data: GenerateWorkflowDto\n  ): Promise {\n    const result = await this.aiService.generateWorkflow(\n      data.description,\n      data.options || { detailedMode: true, prefillConfig: true },\n      data.existingNodes || [],\n      data.existingEdges || []\n    );\n\n    return {\n      nodes: result.nodes,\n      edges: result.edges,\n    };\n  }\n\n  @Post(\"refine-workflow\")\n  @ApiOperation({ summary: \"Refine existing workflow using AI\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Workflow refined successfully\",\n    type: WorkflowResponseDto,\n  })\n  async refineWorkflow(\n    @Body() data: RefineWorkflowDto\n  ): Promise {\n    const result = await this.aiService.refineWorkflow(\n      data.prompt,\n      data.options || {},\n      data.nodes,\n      data.edges\n    );\n\n    return {\n      nodes: result.nodes,\n      edges: result.edges,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AiModule.html":{"url":"modules/AiModule.html","title":"module - AiModule","body":"\n                   \n\n\n\n\n    Modules\n    AiModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AiModule\n\n\n\ncluster_AiModule_providers\n\n\n\ncluster_AiModule_exports\n\n\n\n\nAiService \n\nAiService \n\n\n\nAiModule\n\nAiModule\n\nAiService  -->\n\nAiModule->AiService \n\n\n\n\n\nAiService\n\nAiService\n\nAiModule -->\n\nAiService->AiModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/ai/ai.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AiController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AiService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { AiController } from \"./ai.controller\";\nimport { AiService } from \"./ai.service\";\n\n@Module({\n  controllers: [AiController],\n  providers: [AiService],\n  exports: [AiService],\n})\nexport class AiModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AiService.html":{"url":"injectables/AiService.html","title":"injectable - AiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/ai.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                openrouter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                deduplicateWorkflow\n                            \n                            \n                                    Private\n                                enhanceEdges\n                            \n                            \n                                    Private\n                                enhanceNodes\n                            \n                            \n                                    Async\n                                generateBlock\n                            \n                            \n                                    Private\n                                generateExistingContext\n                            \n                            \n                                    Private\n                                generateNewContext\n                            \n                            \n                                    Private\n                                generateRefinementSystemPrompt\n                            \n                            \n                                    Private\n                                generateSystemPrompt\n                            \n                            \n                                    Async\n                                generateWorkflow\n                            \n                            \n                                    Private\n                                mergeWorkflows\n                            \n                            \n                                    Private\n                                    Async\n                                parseAndValidateResponse\n                            \n                            \n                                    Async\n                                refineWorkflow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/ai/ai.service.ts:67\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        deduplicateWorkflow\n                        \n                    \n                \n            \n            \n                \n                        \n                    deduplicateWorkflow(workflow: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:454\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                workflow\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        enhanceEdges\n                        \n                    \n                \n            \n            \n                \n                        \n                    enhanceEdges(edges: Record[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:416\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                edges\n                                            \n                                                        Record[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WorkflowEdge[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        enhanceNodes\n                        \n                    \n                \n            \n            \n                \n                        \n                    enhanceNodes(nodes: Record[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:385\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nodes\n                                            \n                                                        Record[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     WorkflowNode[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateBlock(prompt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prompt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateExistingContext\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateExistingContext(prompt: string, existingNodes: WorkflowNode[], existingEdges: WorkflowEdge[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:339\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prompt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                existingNodes\n                                            \n                                                        WorkflowNode[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                existingEdges\n                                            \n                                                        WorkflowEdge[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateNewContext\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateNewContext(prompt: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:355\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                prompt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateRefinementSystemPrompt\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRefinementSystemPrompt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:324\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateSystemPrompt\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateSystemPrompt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:251\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateWorkflow\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateWorkflow(description: string, options: GenerationOptions, existingNodes: WorkflowNode[], existingEdges: WorkflowEdge[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                description\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerationOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    { detailedMode: true, prefillConfig: true }\n                                            \n\n                                        \n                                        \n                                                existingNodes\n                                            \n                                                        WorkflowNode[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                        \n                                        \n                                                existingEdges\n                                            \n                                                        WorkflowEdge[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mergeWorkflows\n                        \n                    \n                \n            \n            \n                \n                        \n                    mergeWorkflows(existingNodes: WorkflowNode[], existingEdges: WorkflowEdge[], newNodes: WorkflowNode[], newEdges: WorkflowEdge[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:428\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                existingNodes\n                                            \n                                                        WorkflowNode[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                existingEdges\n                                            \n                                                        WorkflowEdge[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newNodes\n                                            \n                                                        WorkflowNode[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newEdges\n                                            \n                                                        WorkflowEdge[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        parseAndValidateResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseAndValidateResponse(text: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:363\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                text\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refineWorkflow\n                        \n                    \n                \n            \n            \n                \n                        \n                    refineWorkflow(prompt: string, options: literal type, nodes: WorkflowNode[], edges: WorkflowEdge[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/ai/ai.service.ts:204\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                prompt\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                        \n                                                nodes\n                                            \n                                                        WorkflowNode[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                edges\n                                            \n                                                        WorkflowEdge[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        openrouter\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/ai/ai.service.ts:67\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { createOpenRouter } from \"@openrouter/ai-sdk-provider\";\nimport { generateText } from \"ai\";\nimport { z } from \"zod\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Import types from the types package\nimport { BlockType, DataType, NodeCategory } from \"@zyra/types\";\n\nconst MODEL_TO_USE = \"gpt-4o-mini\";\n\ninterface WorkflowNode {\n  id: string;\n  type: string;\n  position: { x: number; y: number };\n  data: Record;\n}\n\ninterface WorkflowEdge {\n  id: string;\n  source: string;\n  target: string;\n  sourceHandle?: string;\n  targetHandle?: string;\n}\n\ninterface GenerationOptions {\n  detailedMode: boolean;\n  prefillConfig: boolean;\n  domainHint?: string;\n}\n\nconst WorkflowResponseSchema = z.object({\n  nodes: z.array(\n    z.object({\n      id: z.string(),\n      type: z.string().default(\"custom\"),\n      position: z.object({ x: z.number(), y: z.number() }),\n      data: z.object({\n        blockType: z.nativeEnum(BlockType),\n        label: z.string(),\n        description: z.string().optional(),\n        nodeType: z.enum([\"TRIGGER\", \"ACTION\", \"LOGIC\"]),\n        iconName: z.string(),\n        isEnabled: z.boolean().default(true),\n        config: z.record(z.unknown()).optional(),\n        inputs: z.array(z.unknown()).default([]),\n        outputs: z.array(z.unknown()).default([]),\n      }),\n    })\n  ),\n  edges: z.array(\n    z.object({\n      id: z.string(),\n      source: z.string(),\n      target: z.string(),\n      sourceHandle: z.string().optional(),\n      targetHandle: z.string().optional(),\n      type: z.string().default(\"custom\"),\n      animated: z.boolean().default(false),\n    })\n  ),\n});\n\n@Injectable()\nexport class AiService {\n  private readonly openrouter;\n\n  constructor() {\n    this.openrouter = createOpenRouter({\n      apiKey: process.env.OPENROUTER_API_KEY ?? \"\",\n      baseURL: \"https://openrouter.ai/api/v1\",\n    });\n  }\n\n  async generateBlock(prompt: string): Promise;\n      outputs: Array;\n      configFields: Array;\n    };\n  }> {\n    try {\n      const systemPrompt = `You are an AI that creates custom workflow blocks for Zzyra platform.\n\nAvailable Data Types: ${JSON.stringify(Object.values(DataType), null, 2)}\n\nGenerate a complete custom block definition based on user requirements.\n\nREQUIRED OUTPUT STRUCTURE:\n{\n  \"name\": \"Block Name\",\n  \"description\": \"What this block does\",\n  \"category\": \"Utility|Integration|AI|Data|Analytics|Communication\",\n  \"code\": \"async function execute(inputs, context) { /* Complete implementation */ return { outputName: result }; }\",\n  \"inputs\": [{\"name\": \"input\", \"dataType\": \"string\", \"required\": true, \"description\": \"Input description\"}],\n  \"outputs\": [{\"name\": \"output\", \"dataType\": \"string\", \"required\": true, \"description\": \"Output description\"}],\n  \"configFields\": [{\"name\": \"config\", \"label\": \"Config Label\", \"type\": \"string\", \"required\": false, \"description\": \"Config help\"}]\n}\n\nRequirements:\n1. Analyze user request to understand functionality\n2. Design appropriate inputs, outputs, and config fields\n3. Implement complete, working JavaScript code\n4. Handle errors gracefully\n5. Use async/await for any asynchronous operations\n6. Access config via context.config.fieldName\n7. Return object with named outputs matching the outputs array\n\nReturn ONLY the JSON object.`;\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: prompt },\n        ],\n        temperature: 0.3,\n        maxTokens: 4000,\n      });\n\n      const cleanedText = text.replace(/```json|```/g, \"\").trim();\n      const parsedResponse = JSON.parse(cleanedText);\n\n      return {\n        success: true,\n        block: parsedResponse,\n      };\n    } catch (error) {\n      console.error(\"AI Custom Block Generation Error:\", error);\n      throw new Error(\"Failed to generate custom block\");\n    }\n  }\n\n  async generateWorkflow(\n    description: string,\n    options: GenerationOptions = { detailedMode: true, prefillConfig: true },\n    existingNodes: WorkflowNode[] = [],\n    existingEdges: WorkflowEdge[] = []\n  ): Promise {\n    try {\n      const systemPrompt = this.generateSystemPrompt();\n\n      const userContext =\n        existingNodes.length > 0\n          ? this.generateExistingContext(\n              description,\n              existingNodes,\n              existingEdges\n            )\n          : this.generateNewContext(description);\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userContext },\n        ],\n        temperature: 0.1,\n        maxTokens: 12000,\n      });\n\n      const parsedResponse = await this.parseAndValidateResponse(text);\n      const enhancedNodes = this.enhanceNodes(parsedResponse.nodes);\n      const enhancedEdges = this.enhanceEdges(parsedResponse.edges);\n\n      const finalWorkflow = this.mergeWorkflows(\n        existingNodes,\n        existingEdges,\n        enhancedNodes,\n        enhancedEdges\n      );\n\n      return this.deduplicateWorkflow(finalWorkflow);\n    } catch (error) {\n      console.error(\"AI Workflow Generation Error:\", error);\n      throw error;\n    }\n  }\n\n  async refineWorkflow(\n    prompt: string,\n    options: {\n      preserveConnections?: boolean;\n      focusArea?: string;\n      intensity?: \"light\" | \"medium\" | \"heavy\";\n    } = {},\n    nodes: WorkflowNode[],\n    edges: WorkflowEdge[]\n  ): Promise {\n    try {\n      const systemPrompt = this.generateRefinementSystemPrompt();\n\n      const userContext = `\nWORKFLOW REFINEMENT REQUEST:\n\n**CURRENT WORKFLOW**:\nNodes: ${JSON.stringify(nodes, null, 2)}\nEdges: ${JSON.stringify(edges, null, 2)}\n\n**REFINEMENT REQUEST**: \"${prompt}\"\n**OPTIONS**: ${JSON.stringify(options, null, 2)}\n\n**TASK**: Refine the existing workflow based on the user's request while maintaining the core functionality.\n`;\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userContext },\n        ],\n        temperature: 0.1,\n        maxTokens: 12000,\n      });\n\n      const parsedResponse = await this.parseAndValidateResponse(text);\n      return {\n        nodes: this.enhanceNodes(parsedResponse.nodes),\n        edges: this.enhanceEdges(parsedResponse.edges),\n      };\n    } catch (error) {\n      console.error(\"AI Workflow Refinement Error:\", error);\n      throw error;\n    }\n  }\n\n  private generateSystemPrompt(): string {\n    return `You are an EXPERT WORKFLOW AI for Zzyra automation platform with deep understanding of blockchain, crypto, and automation workflows.\n\n🎯 **CORE MISSION**: Transform ANY natural language into sophisticated, executable workflows using our comprehensive block system.\n\n🔥 **AVAILABLE BLOCK TYPES**:\n${JSON.stringify(Object.values(BlockType), null, 2)}\n\n📊 **AVAILABLE DATA TYPES**: \n${JSON.stringify(Object.values(DataType), null, 2)}\n\n🔥 **BLOCK SYSTEM OVERVIEW**:\n- **PRICE_MONITOR**: Monitor cryptocurrency prices with conditions\n- **EMAIL**: Send email notifications\n- **NOTIFICATION**: Send various types of notifications\n- **CONDITION**: Add conditional logic and branching\n- **DELAY**: Add time delays between actions\n- **SCHEDULE**: Schedule recurring tasks\n- **WEBHOOK**: Handle webhook integrations\n- **HTTP_REQUEST**: Make HTTP calls to external APIs\n- **CALCULATOR**: Perform arithmetic calculations\n- **COMPARATOR**: Compare values with logical conditions\n- **BLOCKCHAIN_READ**: Read blockchain data (balances, transactions)\n- **DATABASE_QUERY/WRITE**: Database operations\n- **FILE_READ/WRITE**: File system operations\n- **TRANSFORMER**: Transform and manipulate data\n- **AGGREGATOR**: Aggregate and analyze data\n- **LOOP**: Repeat operations with iteration logic\n- **HTTP_CALL**: Call external services\n- **MESSAGE_SEND**: Send messages via various channels\n\n🎯 **OUTPUT SPECIFICATION**:\n\n**Node Structure** (STRICT FORMAT):\n{\n  \"id\": \"node-{{uuid}}\",\n  \"type\": \"custom\",\n  \"position\": {\"x\": intelligent_x, \"y\": intelligent_y},\n  \"data\": {\n    \"blockType\": \"EXACT_UPPERCASE_ENUM_VALUE\",\n    \"label\": \"User-friendly descriptive name\",\n    \"description\": \"Clear description of functionality\",\n    \"nodeType\": \"TRIGGER|ACTION|LOGIC\",\n    \"iconName\": \"appropriate-icon-name\",\n    \"isEnabled\": true,\n    \"config\": {\n      /* Intelligent configuration based on user request */\n    },\n    \"inputs\": [],\n    \"outputs\": []\n  }\n}\n\n**Edge Structure**:\n{\n  \"id\": \"edge-{{uuid}}\",\n  \"source\": \"source-node-id\",\n  \"target\": \"target-node-id\",\n  \"type\": \"custom\",\n  \"animated\": false\n}\n\n**CRITICAL REQUIREMENTS**:\n- Return ONLY valid JSON: {\"nodes\": [...], \"edges\": [...]}\n- Use exact BlockType enum values (UPPERCASE format)\n- Generate unique UUIDs for all IDs\n- Create intelligent positioning based on flow order\n- Generate proper configurations for each block type\n- Ensure logical execution flow (TRIGGER → LOGIC → ACTION)\n\nGenerate workflows that users can execute immediately.`;\n  }\n\n  private generateRefinementSystemPrompt(): string {\n    return `You are an EXPERT WORKFLOW REFINEMENT AI for Zzyra automation platform.\n\nYour task is to intelligently refine existing workflows based on user requests while preserving core functionality.\n\n**REFINEMENT CAPABILITIES**:\n- Add new nodes and connections\n- Modify existing configurations\n- Optimize workflow structure\n- Enhance error handling\n- Improve efficiency\n\n**OUTPUT**: Return the complete refined workflow as JSON with \"nodes\" and \"edges\" arrays.`;\n  }\n\n  private generateExistingContext(\n    prompt: string,\n    existingNodes: WorkflowNode[],\n    existingEdges: WorkflowEdge[]\n  ): string {\n    return `WORKFLOW ENHANCEMENT REQUEST:\n\n**CURRENT WORKFLOW**:\nNodes: ${JSON.stringify(existingNodes, null, 2)}\nEdges: ${JSON.stringify(existingEdges, null, 2)}\n\n**USER ENHANCEMENT REQUEST**: \"${prompt}\"\n\n**TASK**: Enhance the existing workflow by adding new functionality while maintaining existing capabilities.`;\n  }\n\n  private generateNewContext(prompt: string): string {\n    return `NEW WORKFLOW CREATION REQUEST:\n\n**USER REQUEST**: \"${prompt}\"\n\n**TASK**: Create a complete workflow from scratch that accomplishes the user's automation goal.`;\n  }\n\n  private async parseAndValidateResponse(\n    text: string\n  ): Promise> {\n    const cleanedText = text.replace(/```json|```/g, \"\").trim();\n\n    let parsedResponse: unknown;\n    try {\n      parsedResponse = JSON.parse(cleanedText);\n    } catch (parseError) {\n      throw new Error(\"AI generated invalid JSON format\");\n    }\n\n    const validationResult = WorkflowResponseSchema.safeParse(parsedResponse);\n    if (!validationResult.success) {\n      throw new Error(\n        `AI workflow validation failed: ${validationResult.error.message}`\n      );\n    }\n\n    return validationResult.data;\n  }\n\n  private enhanceNodes(nodes: Record[]): WorkflowNode[] {\n    return nodes.map((nodeData) => {\n      const nodeId = (nodeData.id as string) || `node-${uuidv4()}`;\n\n      return {\n        id: nodeId,\n        type: \"custom\",\n        position: nodeData.position as { x: number; y: number },\n        data: {\n          blockType: (nodeData.data as any)?.blockType,\n          label: (nodeData.data as any)?.label,\n          description: (nodeData.data as any)?.description || \"\",\n          nodeType: (nodeData.data as any)?.nodeType || \"ACTION\",\n          iconName: (nodeData.data as any)?.iconName || \"block\",\n          isEnabled: true,\n          config: (nodeData.data as any)?.config || {},\n          inputs: [],\n          outputs: [],\n          inputCount: 1,\n          outputCount: 1,\n          status: \"idle\",\n          nodeStatus: \"idle\",\n          isCompleted: false,\n          isFailed: false,\n          isExecuting: false,\n          isActive: false,\n        },\n      };\n    });\n  }\n\n  private enhanceEdges(edges: Record[]): WorkflowEdge[] {\n    return edges.map((edge) => ({\n      id: (edge.id as string) || `edge-${uuidv4()}`,\n      source: edge.source as string,\n      target: edge.target as string,\n      sourceHandle: edge.sourceHandle as string,\n      targetHandle: edge.targetHandle as string,\n      type: (edge.type as string) || \"custom\",\n      animated: (edge.animated as boolean) || false,\n    }));\n  }\n\n  private mergeWorkflows(\n    existingNodes: WorkflowNode[],\n    existingEdges: WorkflowEdge[],\n    newNodes: WorkflowNode[],\n    newEdges: WorkflowEdge[]\n  ): { nodes: WorkflowNode[]; edges: WorkflowEdge[] } {\n    if (existingNodes.length === 0) {\n      return { nodes: newNodes, edges: newEdges };\n    }\n\n    // Adjust positions to avoid overlap\n    const maxX = Math.max(...existingNodes.map((n) => n.position.x), 0);\n    const adjustedNewNodes = newNodes.map((node, index) => ({\n      ...node,\n      position: {\n        x: node.position.x + maxX + 200,\n        y: node.position.y + index * 50,\n      },\n    }));\n\n    return {\n      nodes: [...existingNodes, ...adjustedNewNodes],\n      edges: [...existingEdges, ...newEdges],\n    };\n  }\n\n  private deduplicateWorkflow(workflow: {\n    nodes: WorkflowNode[];\n    edges: WorkflowEdge[];\n  }): {\n    nodes: WorkflowNode[];\n    edges: WorkflowEdge[];\n  } {\n    const usedIds = new Set();\n    const deduplicatedNodes: WorkflowNode[] = [];\n    const deduplicatedEdges: WorkflowEdge[] = [];\n\n    workflow.nodes.forEach((node) => {\n      if (!usedIds.has(node.id)) {\n        usedIds.add(node.id);\n        deduplicatedNodes.push(node);\n      }\n    });\n\n    workflow.edges.forEach((edge) => {\n      if (!usedIds.has(edge.id)) {\n        usedIds.add(edge.id);\n        deduplicatedEdges.push(edge);\n      }\n    });\n\n    return { nodes: deduplicatedNodes, edges: deduplicatedEdges };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAiModule\n\nAiModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAiModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBillingModule\n\nBillingModule\n\nAppModule -->\n\nBillingModule->AppModule\n\n\n\n\n\nBlocksModule\n\nBlocksModule\n\nAppModule -->\n\nBlocksModule->AppModule\n\n\n\n\n\nDashboardModule\n\nDashboardModule\n\nAppModule -->\n\nDashboardModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nExecutionsModule\n\nExecutionsModule\n\nAppModule -->\n\nExecutionsModule->AppModule\n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nWorkflowsModule\n\nWorkflowsModule\n\nAppModule -->\n\nWorkflowsModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AiModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            BillingModule\n                        \n                        \n                            BlocksModule\n                        \n                        \n                            DashboardModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ExecutionsModule\n                        \n                        \n                            NotificationsModule\n                        \n                        \n                            UserModule\n                        \n                        \n                            WorkflowsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { APP_GUARD } from \"@nestjs/core\";\n\n// Database and core modules\nimport { DatabaseModule } from \"./database/database.module\";\n\n// Domain modules\nimport { AuthModule } from \"./auth/auth.module\";\nimport { UserModule } from \"./user/user.module\";\nimport { WorkflowsModule } from \"./workflows/workflows.module\";\nimport { ExecutionsModule } from \"./executions/executions.module\";\nimport { BlocksModule } from \"./blocks/blocks.module\";\nimport { NotificationsModule } from \"./notifications/notifications.module\";\nimport { BillingModule } from \"./billing/billing.module\";\nimport { AiModule } from \"./ai/ai.module\";\nimport { DashboardModule } from \"./dashboard/dashboard.module\";\n\n// Guards\nimport { JwtAuthGuard } from \"./auth/guards/jwt-auth.guard\";\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    JwtModule.register({\n      global: true,\n      secret: process.env.JWT_SECRET || \"your-secret-key\",\n      signOptions: { expiresIn: \"24h\" },\n    }),\n    DatabaseModule,\n    AuthModule,\n    UserModule,\n    WorkflowsModule,\n    ExecutionsModule,\n    BlocksModule,\n    NotificationsModule,\n    BillingModule,\n    AiModule,\n    DashboardModule,\n  ],\n  providers: [\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(body: literal type, req: any, res: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('login')@ApiOperation({summary: 'User login with Magic Link'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(req: any, res: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('logout')@ApiOperation({summary: 'User logout'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:216\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Request,\n  Response,\n  HttpException,\n  HttpStatus,\n} from \"@nestjs/common\";\nimport { ApiTags, ApiOperation } from \"@nestjs/swagger\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { AuthService as DatabaseAuthService } from \"@zyra/database\";\nimport { Public } from \"./decorators/public.decorator\";\n\ninterface MagicAuthPayload {\n  email: string;\n  didToken: string;\n  isOAuth?: boolean;\n  oauthProvider?: string;\n  oauthUserInfo?: any;\n}\n\n@ApiTags(\"auth\")\n@Controller(\"auth\")\nexport class AuthController {\n  constructor(\n    private readonly authService: DatabaseAuthService,\n    private readonly jwtService: JwtService\n  ) {}\n\n  @Public()\n  @Post(\"login\")\n  @ApiOperation({ summary: \"User login with Magic Link\" })\n  async login(\n    @Body()\n    body: {\n      email: string;\n      didToken: string;\n      isOAuth?: boolean;\n      oauthProvider?: string;\n      oauthUserInfo?: any;\n      callbackUrl?: string;\n    },\n    @Request() req: any,\n    @Response() res: any\n  ) {\n    try {\n      const {\n        email,\n        didToken,\n        isOAuth,\n        oauthProvider,\n        oauthUserInfo,\n        callbackUrl,\n      } = body;\n\n      if (!email || !didToken) {\n        throw new HttpException(\n          \"Email and DID token are required\",\n          HttpStatus.BAD_REQUEST\n        );\n      }\n\n      console.log(\"Login route: Received authentication data\", {\n        email,\n        didToken: didToken ? \"[PRESENT]\" : \"[MISSING]\",\n        isOAuth,\n        oauthProvider,\n        hasOAuthUserInfo: !!oauthUserInfo,\n        callbackUrl,\n      });\n\n      // Create Magic Auth payload - match the exact structure from Next.js\n      const magicPayload: MagicAuthPayload = {\n        email,\n        didToken,\n        isOAuth,\n        oauthProvider,\n        oauthUserInfo,\n      };\n\n      const { session, user } =\n        await this.authService.authenticateWithMagic(magicPayload);\n\n      console.log(\"Auth Result:\", { user, session });\n\n      if (!session || !session.accessToken || !user) {\n        console.error(\n          \"Login route: Authentication successful but no session tokens or user returned\"\n        );\n        throw new HttpException(\n          \"Authentication failed: Invalid session\",\n          HttpStatus.UNAUTHORIZED\n        );\n      }\n\n      // Create JWT token structure matching Next.js implementation\n      const tokenPayload = {\n        sub: user.id,\n        email: user.email || \"\",\n        name: user.email ? user.email.split(\"@\")[0] : \"User\",\n        accessToken: session.accessToken,\n        refreshToken: session.refreshToken,\n        expiresAt: session.expiresAt,\n      };\n      \n      console.log(\"Creating JWT token with payload:\", {\n        ...tokenPayload,\n        accessToken: '[REDACTED]',\n        refreshToken: '[REDACTED]'\n      });\n\n      // Create session token using NestJS JWT service\n      const sessionToken = this.jwtService.sign(tokenPayload, {\n        expiresIn: \"30d\", // Match Next.js behavior\n      });\n\n      console.log(\"Created Session Token:\", sessionToken.substring(0, 20) + '...');\n\n      // Set cookies matching Next.js behavior\n      const cookieName =\n        process.env.NODE_ENV === \"production\"\n          ? \"__Secure-next-auth.session-token\"\n          : \"next-auth.session-token\";\n\n      // Set session cookie\n      res.cookie(cookieName, sessionToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        path: \"/\",\n        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      });\n\n      // Set access token cookie\n      res.cookie(\"token\", session.accessToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        path: \"/\",\n        maxAge: 60 * 60 * 24 * 1000, // 1 day\n      });\n\n      // Set refresh token cookie if available\n      if (session.refreshToken) {\n        res.cookie(\"refresh_token\", session.refreshToken, {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === \"production\",\n          sameSite: \"strict\",\n          path: \"/\",\n          maxAge: 60 * 60 * 24 * 7 * 1000, // 7 days\n        });\n      }\n\n      // Clean callbackUrl matching Next.js logic\n      let finalCallbackUrl = \"/dashboard\";\n      try {\n        if (callbackUrl) {\n          const url = new URL(\n            callbackUrl,\n            req.headers.origin || \"http://localhost:3000\"\n          );\n          if (!url.pathname.startsWith(\"/login\")) {\n            finalCallbackUrl = url.toString();\n          }\n        }\n      } catch {\n        // Use default if invalid\n      }\n\n      // Create response object\n      const responseData = {\n        token: sessionToken, // Include the JWT token at top level\n        session: {\n          expiresAt: session.expiresAt,\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.email ? user.email.split(\"@\")[0] : \"User\",\n          },\n          token: sessionToken, // Include token in session object\n          accessToken: session.accessToken,\n          refreshToken: session.refreshToken,\n        },\n        user,\n        success: true,\n        callbackUrl: finalCallbackUrl,\n      };\n      \n      // Log the response we're sending (with sensitive data redacted)\n      console.log(\"Sending login response:\", {\n        token: responseData.token.substring(0, 20) + '...',\n        session: {\n          ...responseData.session,\n          token: responseData.session.token.substring(0, 20) + '...',\n          accessToken: '[REDACTED]',\n          refreshToken: '[REDACTED]'\n        },\n        success: responseData.success,\n        callbackUrl: responseData.callbackUrl\n      });\n      \n      // Return response matching Next.js format with token included\n      return res.status(200).json(responseData);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Authentication failed\";\n      throw new HttpException(errorMessage, HttpStatus.UNAUTHORIZED);\n    }\n  }\n\n  @Public()\n  @Post(\"logout\")\n  @ApiOperation({ summary: \"User logout\" })\n  async logout(@Request() req: any, @Response() res: any) {\n    try {\n      // Clear all cookies matching Next.js logout behavior\n      res.clearCookie(\"token\");\n      res.clearCookie(\"refresh_token\");\n      res.clearCookie(\"next-auth.session-token\");\n      res.clearCookie(\"__Secure-next-auth.session-token\");\n\n      // Invalidate tokens in the auth service\n      try {\n        const token = req.cookies?.token;\n        if (token) {\n          const userId = this.authService.verifySession(token);\n          if (userId) {\n            await this.authService.signOut(userId);\n            console.log(`Logged out user with ID: ${userId}`);\n          }\n        }\n      } catch (serviceError) {\n        console.error(\n          \"Failed to invalidate tokens during logout:\",\n          serviceError\n        );\n      }\n\n      return res.json({\n        success: true,\n        message: \"Logged out successfully\",\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      throw new HttpException(\n        \"Failed to logout\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthError.html":{"url":"classes/AuthError.html","title":"class - AuthError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/auth/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication error\n\n            \n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string, code: string)\n                    \n                \n                        \n                            \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/types.ts:66\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/types.ts:66\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User, Profile, UserWallet } from \"@prisma/client\";\n\n/**\n * JWT Payload structure\n */\nexport interface JwtPayload {\n  userId: string;\n  email?: string;\n  walletAddress?: string;\n  iat?: number;\n  exp?: number;\n}\n\n/**\n * Session information\n */\nexport interface Session {\n  user: {\n    id: string;\n    email?: string;\n    walletAddress?: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: number;\n}\n\n/**\n * Auth user with profile\n */\nexport type AuthUser = User & {\n  profile?: Profile | null;\n  userWallets?: UserWallet[];\n};\n\n/**\n * Magic link authentication payload\n */\nexport interface MagicAuthPayload {\n  didToken: string;\n  provider?: string;\n  email?: string;\n  isOAuth?: boolean;\n  oauthProvider?: string;\n  oauthUserInfo?: Record;\n}\n\n/**\n * Authentication result\n */\nexport interface AuthResult {\n  user: AuthUser;\n  session: Session;\n}\n\n/**\n * Authentication error\n */\nexport class AuthError extends Error {\n  code: string;\n\n  constructor(message: string, code: string) {\n    super(message);\n    this.code = code;\n    this.name = \"AuthError\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDatabaseAuthService \n\nDatabaseAuthService \n\nDatabaseAuthService  -->\n\nAuthModule->DatabaseAuthService \n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            DatabaseAuthService\n                        \n                        \n                            JwtAuthGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { DatabaseModule } from \"../database/database.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { AuthService as DatabaseAuthService } from \"@zyra/database\";\nimport { JwtStrategy } from \"./strategies/jwt.strategy\";\nimport { JwtAuthGuard } from \"./guards/jwt-auth.guard\";\n\n@Module({\n  imports: [\n    DatabaseModule,\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.JWT_SECRET || \"your-secret-key\",\n      signOptions: { expiresIn: \"24h\" },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, DatabaseAuthService, JwtStrategy, JwtAuthGuard],\n  exports: [AuthService, DatabaseAuthService, JwtAuthGuard],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponseDto.html":{"url":"classes/AuthResponseDto.html","title":"class - AuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessToken\n                            \n                            \n                                    \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'JWT access token'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User information'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({ description: 'User email' })\n  email: string;\n\n  @ApiProperty({ description: 'User password' })\n  password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty({ description: 'User email' })\n  email: string;\n\n  @ApiProperty({ description: 'User password' })\n  password: string;\n\n  @ApiProperty({ description: 'User full name' })\n  fullName: string;\n}\n\nexport class AuthResponseDto {\n  @ApiProperty({ description: 'JWT access token' })\n  accessToken: string;\n\n  @ApiProperty({ description: 'User information' })\n  user: {\n    id: string;\n    email: string;\n    fullName: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResult.html":{"url":"interfaces/AuthResult.html","title":"interface - AuthResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/auth/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Authentication result\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            session\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         Session\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Session\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         AuthUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AuthUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User, Profile, UserWallet } from \"@prisma/client\";\n\n/**\n * JWT Payload structure\n */\nexport interface JwtPayload {\n  userId: string;\n  email?: string;\n  walletAddress?: string;\n  iat?: number;\n  exp?: number;\n}\n\n/**\n * Session information\n */\nexport interface Session {\n  user: {\n    id: string;\n    email?: string;\n    walletAddress?: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: number;\n}\n\n/**\n * Auth user with profile\n */\nexport type AuthUser = User & {\n  profile?: Profile | null;\n  userWallets?: UserWallet[];\n};\n\n/**\n * Magic link authentication payload\n */\nexport interface MagicAuthPayload {\n  didToken: string;\n  provider?: string;\n  email?: string;\n  isOAuth?: boolean;\n  oauthProvider?: string;\n  oauthUserInfo?: Record;\n}\n\n/**\n * Authentication result\n */\nexport interface AuthResult {\n  user: AuthUser;\n  session: Session;\n}\n\n/**\n * Authentication error\n */\nexport class AuthError extends Error {\n  code: string;\n\n  constructor(message: string, code: string) {\n    super(message);\n    this.code = code;\n    this.name = \"AuthError\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                        JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: AuthUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            AuthUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateUser(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { UserRepository } from \"@zyra/database\";\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n  name?: string;\n}\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  name?: string;\n}\n\ninterface TokenResponse {\n  accessToken: string;\n  expiresIn: number;\n}\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userRepository: UserRepository\n  ) {}\n\n  async validateUser(payload: JwtPayload): Promise {\n    const user = await this.userRepository.findById(payload.sub);\n    if (user) {\n      return {\n        id: user.id,\n        email: user.email || \"\",\n        name: user.email ? user.email.split(\"@\")[0] : \"User\",\n      };\n    }\n    return null;\n  }\n\n  async generateToken(user: AuthUser): Promise {\n    const payload: JwtPayload = {\n      sub: user.id,\n      email: user.email,\n      name: user.name,\n    };\n\n    const accessToken = this.jwtService.sign(payload);\n\n    return {\n      accessToken,\n      expiresIn: 3600, // 1 hour\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthUser.html":{"url":"interfaces/AuthUser.html","title":"interface - AuthUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { UserRepository } from \"@zyra/database\";\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n  name?: string;\n}\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  name?: string;\n}\n\ninterface TokenResponse {\n  accessToken: string;\n  expiresIn: number;\n}\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userRepository: UserRepository\n  ) {}\n\n  async validateUser(payload: JwtPayload): Promise {\n    const user = await this.userRepository.findById(payload.sub);\n    if (user) {\n      return {\n        id: user.id,\n        email: user.email || \"\",\n        name: user.email ? user.email.split(\"@\")[0] : \"User\",\n      };\n    }\n    return null;\n  }\n\n  async generateToken(user: AuthUser): Promise {\n    const payload: JwtPayload = {\n      sub: user.id,\n      email: user.email,\n      name: user.name,\n    };\n\n    const accessToken = this.jwtService.sign(payload);\n\n    return {\n      accessToken,\n      expiresIn: 3600, // 1 hour\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseRepository.html":{"url":"classes/BaseRepository.html","title":"class - BaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Abstract\n                                model\n                            \n                            \n                                    Protected\n                                options\n                            \n                            \n                                    Protected\n                                policyService\n                            \n                            \n                                    Protected\n                                prisma\n                            \n                            \n                                    Protected\n                                    Abstract\n                                tableName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                checkPolicyResult\n                            \n                            \n                                    Async\n                                count\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Protected\n                                    Async\n                                createPolicyContext\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Protected\n                                    Async\n                                executeWithTransaction\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findMany\n                            \n                            \n                                    Protected\n                                    Async\n                                logAudit\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaClient?: PrismaClient, options: BaseRepositoryOptions)\n                    \n                \n                        \n                            \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaClient\n                                                  \n                                                        \n                                                                    PrismaClient\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        BaseRepositoryOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BaseRepositoryOptions\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        policyService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyService\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PrismaClient\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Abstract\n                        tableName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:38\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        checkPolicyResult\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkPolicyResult(result: PolicyResult)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:66\n                        \n                    \n\n\n            \n                \n                        Check if a policy result allows access\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                result\n                                            \n                                                            PolicyResult\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The policy result\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        count\n                        \n                    \n                \n            \n            \n                \n                        \n                    count(filter?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:312\n                        \n                    \n\n\n            \n                \n                        Count records based on a filter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The filter to apply\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The count of records\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: CreateInput, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:167\n                        \n                    \n\n\n            \n                \n                        Create a new entity with policy enforcement\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        CreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The entity data\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The user ID (for policy enforcement)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The created entity\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        createPolicyContext\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPolicyContext(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:57\n                        \n                    \n\n\n            \n                \n                        Create a policy context for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The policy context\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:229\n                        \n                    \n\n\n            \n                \n                        Delete an entity with policy enforcement\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The entity ID\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The user ID (for policy enforcement)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The deleted entity\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        executeWithTransaction\n                        \n                    \n                \n            \n            \n                \n                        \n                    executeWithTransaction(operation: (tx: Prisma.TransactionClient) => void, action: string, rowId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:264\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    R\n                            \n                        \n                    \n\n            \n                \n                        Perform an operation in a transaction with audit logging\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                operation\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The operation to perform\n\n                                            \n                                        \n                                        \n                                                action\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The audit action\n\n                                            \n                                        \n                                        \n                                                rowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The row ID\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The result of the operation\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:127\n                        \n                    \n\n\n            \n                \n                        Find all entities with policy enforcement\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The user ID (for policy enforcement)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An array of entities\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:94\n                        \n                    \n\n\n            \n                \n                        Find an entity by ID with policy enforcement\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The entity ID\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The user ID (for policy enforcement)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The entity or null\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMany(filter?: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:300\n                        \n                    \n\n\n            \n                \n                        Find many records based on a filter\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The filter to apply\n\n                                            \n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Additional options for the query\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                An array of records\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Async\n                        logAudit\n                        \n                    \n                \n            \n            \n                \n                        \n                    logAudit(action: string, rowId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:78\n                        \n                    \n\n\n            \n                \n                        Log an audit event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The action performed\n\n                                            \n                                        \n                                        \n                                                rowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The row ID (used for context but not sent to audit log)\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: UpdateInput, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts:194\n                        \n                    \n\n\n            \n                \n                        Update an entity with policy enforcement\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The entity ID\n\n                                            \n                                        \n                                        \n                                                data\n                                            \n                                                        UpdateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The entity data\n\n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    The user ID (for policy enforcement)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The updated entity\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Prisma, PrismaClient } from \"@prisma/client\";\nimport prisma from \"../client\";\nimport {\n  PolicyContext,\n  PolicyResult,\n  PolicyService,\n} from \"../policies/policy.service\";\n\n/**\n * Access denied error class\n */\nexport class AccessDeniedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AccessDeniedError\";\n  }\n}\n\n/**\n * Base repository options\n */\nexport interface BaseRepositoryOptions {\n  auditEnabled?: boolean;\n  policyEnabled?: boolean;\n}\n\nexport abstract class BaseRepository {\n  protected prisma: PrismaClient;\n  protected policyService: PolicyService;\n  protected abstract model: any;\n  protected abstract tableName: string;\n  protected options: BaseRepositoryOptions;\n\n  constructor(prismaClient?: PrismaClient, options: BaseRepositoryOptions = {}) {\n    // Use the provided client or fall back to the default\n    this.prisma = prismaClient || prisma;\n    this.policyService = new PolicyService();\n    this.options = {\n      auditEnabled: true,\n      policyEnabled: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a policy context for a user\n   * @param userId The user ID\n   * @returns The policy context\n   */\n  protected async createPolicyContext(userId: string): Promise {\n    return this.policyService.createContext(userId);\n  }\n\n  /**\n   * Check if a policy result allows access\n   * @param result The policy result\n   * @throws AccessDeniedError if access is denied\n   */\n  protected checkPolicyResult(result: PolicyResult): void {\n    if (!result.allowed) {\n      throw new AccessDeniedError(result.message || \"Access denied\");\n    }\n  }\n\n  /**\n   * Log an audit event\n   * @param action The action performed\n   * @param rowId The row ID (used for context but not sent to audit log)\n   * @param userId The user ID\n   */\n  protected async logAudit(\n    action: string,\n    rowId: string,\n    userId: string\n  ): Promise {\n    if (this.options.auditEnabled) {\n      await this.policyService.logAuditEvent(action, this.tableName, userId);\n    }\n  }\n\n  /**\n   * Find an entity by ID with policy enforcement\n   * @param id The entity ID\n   * @param userId The user ID (for policy enforcement)\n   * @returns The entity or null\n   */\n  async findById(id: string, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.findUnique({\n        where: { id },\n      });\n    }\n\n    // Create policy context\n    const context = await this.createPolicyContext(userId);\n\n    // Get entity with basic check\n    const entity = await this.model.findUnique({\n      where: { id },\n    });\n\n    // If entity doesn't exist, return null\n    if (!entity) return null;\n\n    // Check if user has access to this entity\n    // This is a basic check that will be overridden by specific repositories\n    if (entity.userId && entity.userId !== userId && !context.isAdmin) {\n      return null;\n    }\n\n    return entity;\n  }\n\n  /**\n   * Find all entities with policy enforcement\n   * @param userId The user ID (for policy enforcement)\n   * @returns An array of entities\n   */\n  async findAll(userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.findMany();\n    }\n\n    // Create policy context\n    const context = await this.createPolicyContext(userId);\n\n    // If admin, return all entities\n    if (context.isAdmin) {\n      return this.model.findMany();\n    }\n\n    // Otherwise, return only entities the user has access to\n    return this.model.findMany({\n      where: {\n        OR: [\n          { userId: context.userId },\n          { isPublic: true },\n          {\n            team: {\n              members: {\n                some: {\n                  userId: context.userId,\n                },\n              },\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  /**\n   * Create a new entity with policy enforcement\n   * @param data The entity data\n   * @param userId The user ID (for policy enforcement)\n   * @returns The created entity\n   */\n  async create(data: CreateInput, userId?: string): Promise {\n    // If userId is provided and the entity supports it, set the userId\n    const entityData: any = { ...data };\n    if (userId) {\n      entityData.userId = userId;\n    }\n\n    // Create the entity\n    const entity = await this.model.create({\n      data: entityData,\n    });\n\n    // Log audit event if enabled and userId is provided\n    if (userId && this.options.auditEnabled) {\n      await this.logAudit(\"CREATE\", entity.id, userId);\n    }\n\n    return entity;\n  }\n\n  /**\n   * Update an entity with policy enforcement\n   * @param id The entity ID\n   * @param data The entity data\n   * @param userId The user ID (for policy enforcement)\n   * @returns The updated entity\n   */\n  async update(id: string, data: UpdateInput, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.update({\n        where: { id },\n        data,\n      });\n    }\n\n    // Check if user has access to this entity\n    const entity = await this.findById(id, userId);\n    if (!entity) {\n      throw new AccessDeniedError(\n        \"Entity not found or you do not have permission to update it\"\n      );\n    }\n\n    // Update the entity\n    const updatedEntity = await this.model.update({\n      where: { id },\n      data,\n    });\n\n    // Log audit event\n    await this.logAudit(\"UPDATE\", id, userId);\n\n    return updatedEntity;\n  }\n\n  /**\n   * Delete an entity with policy enforcement\n   * @param id The entity ID\n   * @param userId The user ID (for policy enforcement)\n   * @returns The deleted entity\n   */\n  async delete(id: string, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.delete({\n        where: { id },\n      });\n    }\n\n    // Check if user has access to this entity\n    const entity = await this.findById(id, userId);\n    if (!entity) {\n      throw new AccessDeniedError(\n        \"Entity not found or you do not have permission to delete it\"\n      );\n    }\n\n    // Delete the entity\n    const deletedEntity = await this.model.delete({\n      where: { id },\n    });\n\n    // Log audit event\n    await this.logAudit(\"DELETE\", id, userId);\n\n    return deletedEntity;\n  }\n\n  /**\n   * Perform an operation in a transaction with audit logging\n   * @param operation The operation to perform\n   * @param action The audit action\n   * @param rowId The row ID\n   * @param userId The user ID\n   * @returns The result of the operation\n   */\n  protected async executeWithTransaction(\n    operation: (tx: Prisma.TransactionClient) => Promise,\n    action: string,\n    rowId: string,\n    userId: string\n  ): Promise {\n    return await this.prisma.$transaction(\n      async (tx: Prisma.TransactionClient) => {\n        // Perform the operation\n        const result = await operation(tx);\n\n        // Log audit event if enabled\n        if (this.options.auditEnabled) {\n          await tx.auditLog.create({\n            data: {\n              action,\n              resource: this.tableName,\n              resourceId: rowId,\n              userId,\n              metadata: {},\n              createdAt: new Date(),\n            },\n          });\n        }\n\n        return result;\n      }\n    );\n  }\n\n  /**\n   * Find many records based on a filter\n   * @param filter The filter to apply\n   * @param options Additional options for the query\n   * @returns An array of records\n   */\n  async findMany(filter?: any, options?: any): Promise {\n    return this.model.findMany({\n      where: filter,\n      ...options,\n    });\n  }\n\n  /**\n   * Count records based on a filter\n   * @param filter The filter to apply\n   * @returns The count of records\n   */\n  async count(filter?: any): Promise {\n    return this.model.count({\n      where: filter,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BaseRepositoryOptions.html":{"url":"interfaces/BaseRepositoryOptions.html","title":"interface - BaseRepositoryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BaseRepositoryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/base.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Base repository options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            auditEnabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            policyEnabled\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        auditEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        auditEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        policyEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        policyEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prisma, PrismaClient } from \"@prisma/client\";\nimport prisma from \"../client\";\nimport {\n  PolicyContext,\n  PolicyResult,\n  PolicyService,\n} from \"../policies/policy.service\";\n\n/**\n * Access denied error class\n */\nexport class AccessDeniedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"AccessDeniedError\";\n  }\n}\n\n/**\n * Base repository options\n */\nexport interface BaseRepositoryOptions {\n  auditEnabled?: boolean;\n  policyEnabled?: boolean;\n}\n\nexport abstract class BaseRepository {\n  protected prisma: PrismaClient;\n  protected policyService: PolicyService;\n  protected abstract model: any;\n  protected abstract tableName: string;\n  protected options: BaseRepositoryOptions;\n\n  constructor(prismaClient?: PrismaClient, options: BaseRepositoryOptions = {}) {\n    // Use the provided client or fall back to the default\n    this.prisma = prismaClient || prisma;\n    this.policyService = new PolicyService();\n    this.options = {\n      auditEnabled: true,\n      policyEnabled: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a policy context for a user\n   * @param userId The user ID\n   * @returns The policy context\n   */\n  protected async createPolicyContext(userId: string): Promise {\n    return this.policyService.createContext(userId);\n  }\n\n  /**\n   * Check if a policy result allows access\n   * @param result The policy result\n   * @throws AccessDeniedError if access is denied\n   */\n  protected checkPolicyResult(result: PolicyResult): void {\n    if (!result.allowed) {\n      throw new AccessDeniedError(result.message || \"Access denied\");\n    }\n  }\n\n  /**\n   * Log an audit event\n   * @param action The action performed\n   * @param rowId The row ID (used for context but not sent to audit log)\n   * @param userId The user ID\n   */\n  protected async logAudit(\n    action: string,\n    rowId: string,\n    userId: string\n  ): Promise {\n    if (this.options.auditEnabled) {\n      await this.policyService.logAuditEvent(action, this.tableName, userId);\n    }\n  }\n\n  /**\n   * Find an entity by ID with policy enforcement\n   * @param id The entity ID\n   * @param userId The user ID (for policy enforcement)\n   * @returns The entity or null\n   */\n  async findById(id: string, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.findUnique({\n        where: { id },\n      });\n    }\n\n    // Create policy context\n    const context = await this.createPolicyContext(userId);\n\n    // Get entity with basic check\n    const entity = await this.model.findUnique({\n      where: { id },\n    });\n\n    // If entity doesn't exist, return null\n    if (!entity) return null;\n\n    // Check if user has access to this entity\n    // This is a basic check that will be overridden by specific repositories\n    if (entity.userId && entity.userId !== userId && !context.isAdmin) {\n      return null;\n    }\n\n    return entity;\n  }\n\n  /**\n   * Find all entities with policy enforcement\n   * @param userId The user ID (for policy enforcement)\n   * @returns An array of entities\n   */\n  async findAll(userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.findMany();\n    }\n\n    // Create policy context\n    const context = await this.createPolicyContext(userId);\n\n    // If admin, return all entities\n    if (context.isAdmin) {\n      return this.model.findMany();\n    }\n\n    // Otherwise, return only entities the user has access to\n    return this.model.findMany({\n      where: {\n        OR: [\n          { userId: context.userId },\n          { isPublic: true },\n          {\n            team: {\n              members: {\n                some: {\n                  userId: context.userId,\n                },\n              },\n            },\n          },\n        ],\n      },\n    });\n  }\n\n  /**\n   * Create a new entity with policy enforcement\n   * @param data The entity data\n   * @param userId The user ID (for policy enforcement)\n   * @returns The created entity\n   */\n  async create(data: CreateInput, userId?: string): Promise {\n    // If userId is provided and the entity supports it, set the userId\n    const entityData: any = { ...data };\n    if (userId) {\n      entityData.userId = userId;\n    }\n\n    // Create the entity\n    const entity = await this.model.create({\n      data: entityData,\n    });\n\n    // Log audit event if enabled and userId is provided\n    if (userId && this.options.auditEnabled) {\n      await this.logAudit(\"CREATE\", entity.id, userId);\n    }\n\n    return entity;\n  }\n\n  /**\n   * Update an entity with policy enforcement\n   * @param id The entity ID\n   * @param data The entity data\n   * @param userId The user ID (for policy enforcement)\n   * @returns The updated entity\n   */\n  async update(id: string, data: UpdateInput, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.update({\n        where: { id },\n        data,\n      });\n    }\n\n    // Check if user has access to this entity\n    const entity = await this.findById(id, userId);\n    if (!entity) {\n      throw new AccessDeniedError(\n        \"Entity not found or you do not have permission to update it\"\n      );\n    }\n\n    // Update the entity\n    const updatedEntity = await this.model.update({\n      where: { id },\n      data,\n    });\n\n    // Log audit event\n    await this.logAudit(\"UPDATE\", id, userId);\n\n    return updatedEntity;\n  }\n\n  /**\n   * Delete an entity with policy enforcement\n   * @param id The entity ID\n   * @param userId The user ID (for policy enforcement)\n   * @returns The deleted entity\n   */\n  async delete(id: string, userId?: string): Promise {\n    // If no userId provided or policy is disabled, skip policy enforcement\n    if (!userId || !this.options.policyEnabled) {\n      return this.model.delete({\n        where: { id },\n      });\n    }\n\n    // Check if user has access to this entity\n    const entity = await this.findById(id, userId);\n    if (!entity) {\n      throw new AccessDeniedError(\n        \"Entity not found or you do not have permission to delete it\"\n      );\n    }\n\n    // Delete the entity\n    const deletedEntity = await this.model.delete({\n      where: { id },\n    });\n\n    // Log audit event\n    await this.logAudit(\"DELETE\", id, userId);\n\n    return deletedEntity;\n  }\n\n  /**\n   * Perform an operation in a transaction with audit logging\n   * @param operation The operation to perform\n   * @param action The audit action\n   * @param rowId The row ID\n   * @param userId The user ID\n   * @returns The result of the operation\n   */\n  protected async executeWithTransaction(\n    operation: (tx: Prisma.TransactionClient) => Promise,\n    action: string,\n    rowId: string,\n    userId: string\n  ): Promise {\n    return await this.prisma.$transaction(\n      async (tx: Prisma.TransactionClient) => {\n        // Perform the operation\n        const result = await operation(tx);\n\n        // Log audit event if enabled\n        if (this.options.auditEnabled) {\n          await tx.auditLog.create({\n            data: {\n              action,\n              resource: this.tableName,\n              resourceId: rowId,\n              userId,\n              metadata: {},\n              createdAt: new Date(),\n            },\n          });\n        }\n\n        return result;\n      }\n    );\n  }\n\n  /**\n   * Find many records based on a filter\n   * @param filter The filter to apply\n   * @param options Additional options for the query\n   * @returns An array of records\n   */\n  async findMany(filter?: any, options?: any): Promise {\n    return this.model.findMany({\n      where: filter,\n      ...options,\n    });\n  }\n\n  /**\n   * Count records based on a filter\n   * @param filter The filter to apply\n   * @returns The count of records\n   */\n  async count(filter?: any): Promise {\n    return this.model.count({\n      where: filter,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BillingController.html":{"url":"controllers/BillingController.html","title":"controller - BillingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BillingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/billing/billing.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                billing\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createCheckout\n                            \n                            \n                                    \n                                    \n                                    Async\n                                handleWebhook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createCheckout\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckout(req: literal type, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('checkout')@ApiOperation({summary: 'Create checkout session'})@ApiResponse({status: 200, description: 'Checkout session created'})\n                \n            \n\n                    \n                        \n                            Defined in src/billing/billing.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        handleWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWebhook(rawBody: Buffer, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('webhook')@ApiOperation({summary: 'Handle billing webhook'})\n                \n            \n\n                    \n                        \n                            Defined in src/billing/billing.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawBody\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Request } from \"@nestjs/common\";\nimport { ApiTags, ApiOperation, ApiResponse } from \"@nestjs/swagger\";\nimport { BillingService } from \"./billing.service\";\n\n@ApiTags(\"billing\")\n@Controller(\"billing\")\nexport class BillingController {\n  constructor(private readonly billingService: BillingService) {}\n\n  @Post(\"checkout\")\n  @ApiOperation({ summary: \"Create checkout session\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Checkout session created\",\n  })\n  async createCheckout(\n    @Request() req: { user?: { id: string } },\n    @Body() data: { priceId: string }\n  ) {\n    const userId = req.user?.id || \"user1\";\n    return this.billingService.createCheckoutSession(userId, data.priceId);\n  }\n\n  @Post(\"webhook\")\n  @ApiOperation({ summary: \"Handle billing webhook\" })\n  async handleWebhook(@Body() rawBody: Buffer, @Request() req: any) {\n    const signature = req.headers[\"stripe-signature\"];\n    return this.billingService.handleWebhook(rawBody, signature);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BillingModule.html":{"url":"modules/BillingModule.html","title":"module - BillingModule","body":"\n                   \n\n\n\n\n    Modules\n    BillingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BillingModule\n\n\n\ncluster_BillingModule_exports\n\n\n\ncluster_BillingModule_providers\n\n\n\n\nBillingService \n\nBillingService \n\n\n\nBillingModule\n\nBillingModule\n\nBillingService  -->\n\nBillingModule->BillingService \n\n\n\n\n\nBillingService\n\nBillingService\n\nBillingModule -->\n\nBillingService->BillingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/billing/billing.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BillingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BillingController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BillingService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { BillingController } from \"./billing.controller\";\nimport { BillingService } from \"./billing.service\";\n\n@Module({\n  controllers: [BillingController],\n  providers: [BillingService],\n  exports: [BillingService],\n})\nexport class BillingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BillingService.html":{"url":"injectables/BillingService.html","title":"injectable - BillingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BillingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/billing/billing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCheckoutSession\n                            \n                            \n                                    Async\n                                handleWebhook\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCheckoutSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCheckoutSession(userId: string, priceId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/billing/billing.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                priceId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleWebhook\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleWebhook(rawBody: Buffer, signature: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/billing/billing.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rawBody\n                                            \n                                                        Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class BillingService {\n  async createCheckoutSession(userId: string, priceId: string) {\n    // Stub implementation - would integrate with Stripe\n    return {\n      url: \"https://checkout.stripe.com/session-id\",\n      sessionId: \"cs_test_123\",\n    };\n  }\n\n  async handleWebhook(rawBody: Buffer, signature: string) {\n    // Stub implementation - would handle Stripe webhooks\n    return { success: true };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlockExecutionContext.html":{"url":"interfaces/BlockExecutionContext.html","title":"interface - BlockExecutionContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BlockExecutionContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts\n        \n\n\n            \n                Description\n            \n            \n                Context provided to block handlers during execution\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            config\n                                        \n                                \n                                \n                                        \n                                            executionId\n                                        \n                                \n                                \n                                        \n                                            inputs\n                                        \n                                \n                                \n                                        \n                                            logger\n                                        \n                                \n                                \n                                        \n                                            nodeId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            previousOutputs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            services\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            workflowData\n                                        \n                                \n                                \n                                        \n                                            workflowId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        config:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        executionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        executionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logger:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousOutputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousOutputs:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        services\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        services:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workflowData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workflowData:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workflowId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workflowId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ExecutionStatus = \"pending\" | \"running\" | \"completed\" | \"failed\";\n\n/**\n * Execution log record\n */\nexport interface ExecutionLog {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  level: string;\n  message: string;\n  data?: any;\n  timestamp: string;\n}\n\n/**\n * Node execution record\n */\nexport interface NodeExecution {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n}\n\n/**\n * Complete workflow execution result\n */\nexport interface ExecutionResult {\n  id: string;\n  workflow_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n  result?: any;\n  logs: ExecutionLog[];\n  nodeExecutions: NodeExecution[];\n}\n\n/**\n * Context provided to block handlers during execution\n */\nexport interface BlockExecutionContext {\n  nodeId: string;\n  executionId: string;\n  workflowId: string;\n  userId: string;\n  inputs: Record;\n  previousOutputs?: Record;\n  config: Record;\n  // Added workflowData field that many handlers use\n  workflowData?: Record;\n  logger: {\n    // Added log method for compatibility with worker implementation\n    log: (message: string, data?: any) => void;\n    debug: (message: string, data?: any) => void;\n    info: (message: string, data?: any) => void;\n    warn: (message: string, data?: any) => void;\n    error: (message: string, data?: any) => void;\n  };\n  // Used by custom blocks to access additional services\n  services?: Record;\n}\n\n/**\n * Interface for block handlers that execute workflow nodes\n */\nexport interface BlockHandler {\n  // Updated signature to match worker implementation with 2 parameters\n  execute(node: any, context: BlockExecutionContext): Promise>;\n  validate?(config: Record): boolean;\n  getDefaultConfig?(): Record;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlockHandler.html":{"url":"interfaces/BlockHandler.html","title":"interface - BlockHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BlockHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for block handlers that execute workflow nodes\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        execute\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getDefaultConfig\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        validate\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        execute\n                        \n                    \n                \n            \n            \n                \nexecute(node: any, context: BlockExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            BlockExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getDefaultConfig\n                        \n                    \n                \n            \n            \n                \ngetDefaultConfig()\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts:81\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Record\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(config: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export type ExecutionStatus = \"pending\" | \"running\" | \"completed\" | \"failed\";\n\n/**\n * Execution log record\n */\nexport interface ExecutionLog {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  level: string;\n  message: string;\n  data?: any;\n  timestamp: string;\n}\n\n/**\n * Node execution record\n */\nexport interface NodeExecution {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n}\n\n/**\n * Complete workflow execution result\n */\nexport interface ExecutionResult {\n  id: string;\n  workflow_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n  result?: any;\n  logs: ExecutionLog[];\n  nodeExecutions: NodeExecution[];\n}\n\n/**\n * Context provided to block handlers during execution\n */\nexport interface BlockExecutionContext {\n  nodeId: string;\n  executionId: string;\n  workflowId: string;\n  userId: string;\n  inputs: Record;\n  previousOutputs?: Record;\n  config: Record;\n  // Added workflowData field that many handlers use\n  workflowData?: Record;\n  logger: {\n    // Added log method for compatibility with worker implementation\n    log: (message: string, data?: any) => void;\n    debug: (message: string, data?: any) => void;\n    info: (message: string, data?: any) => void;\n    warn: (message: string, data?: any) => void;\n    error: (message: string, data?: any) => void;\n  };\n  // Used by custom blocks to access additional services\n  services?: Record;\n}\n\n/**\n * Interface for block handlers that execute workflow nodes\n */\nexport interface BlockHandler {\n  // Updated signature to match worker implementation with 2 parameters\n  execute(node: any, context: BlockExecutionContext): Promise>;\n  validate?(config: Record): boolean;\n  getDefaultConfig?(): Record;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlockMetadata.html":{"url":"interfaces/BlockMetadata.html","title":"interface - BlockMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BlockMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/metadata.ts\n        \n\n\n            \n                Description\n            \n            \n                Block metadata interface - defines UI-specific properties\nfor each block type such as label, icon, description, etc.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            defaultConfig\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         NodeCategory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeCategory\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultConfig:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         BlockType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlockType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BlockType } from \"./block-types\";\nimport { NodeCategory } from \"./categories\";\n\n/**\n * Block metadata interface - defines UI-specific properties\n * for each block type such as label, icon, description, etc.\n */\nexport interface BlockMetadata {\n  type: BlockType;\n  label: string;\n  description: string;\n  category: NodeCategory;\n  icon: string;\n  defaultConfig: Record;\n}\n\n/**\n * Shared block catalog with common metadata for all block types\n * This serves as the single source of truth for block metadata\n */\nexport const BLOCK_CATALOG: Record = {\n  // Legacy blocks\n  [BlockType.PRICE_MONITOR]: {\n    type: BlockType.PRICE_MONITOR,\n    label: \"Price Monitor\",\n    description: \"Monitor cryptocurrency prices\",\n    category: NodeCategory.TRIGGER,\n    icon: \"trending-up\",\n    defaultConfig: {\n      asset: \"ETHEREUM\",\n      condition: \"above\",\n      targetPrice: \"2000\",\n      checkInterval: \"5\",\n    },\n  },\n\n  [BlockType.EMAIL]: {\n    type: BlockType.EMAIL,\n    label: \"Email\",\n    description: \"Send email notifications\",\n    category: NodeCategory.ACTION,\n    icon: \"mail\",\n    defaultConfig: {\n      to: \"\",\n      subject: \"\",\n      body: \"\",\n    },\n  },\n\n  [BlockType.NOTIFICATION]: {\n    type: BlockType.NOTIFICATION,\n    label: \"Notification\",\n    description: \"Send push notifications\",\n    category: NodeCategory.ACTION,\n    icon: \"bell\",\n    defaultConfig: {\n      channel: \"in_app\",\n      title: \"\",\n      message: \"\",\n    },\n  },\n\n  [BlockType.SCHEDULE]: {\n    type: BlockType.SCHEDULE,\n    label: \"Schedule\",\n    description: \"Trigger workflows on a schedule\",\n    category: NodeCategory.TRIGGER,\n    icon: \"calendar\",\n    defaultConfig: {\n      interval: \"daily\",\n      time: \"09:00\",\n    },\n  },\n\n  [BlockType.WEBHOOK]: {\n    type: BlockType.WEBHOOK,\n    label: \"Webhook\",\n    description: \"Trigger workflows via HTTP webhook\",\n    category: NodeCategory.TRIGGER,\n    icon: \"webhook\",\n    defaultConfig: {\n      url: \"\",\n      method: \"POST\",\n    },\n  },\n\n  [BlockType.CONDITION]: {\n    type: BlockType.CONDITION,\n    label: \"Condition\",\n    description: \"Add conditional logic to workflows\",\n    category: NodeCategory.LOGIC,\n    icon: \"filter\",\n    defaultConfig: {\n      condition: \"\",\n    },\n  },\n\n  [BlockType.DELAY]: {\n    type: BlockType.DELAY,\n    label: \"Delay\",\n    description: \"Add a delay to workflow execution\",\n    category: NodeCategory.LOGIC,\n    icon: \"clock\",\n    defaultConfig: {\n      duration: 5,\n      unit: \"minutes\",\n    },\n  },\n\n  // Generic blocks\n  [BlockType.HTTP_REQUEST]: {\n    type: BlockType.HTTP_REQUEST,\n    label: \"HTTP Request\",\n    description: \"Make HTTP requests to any API endpoint\",\n    category: NodeCategory.ACTION,\n    icon: \"globe\",\n    defaultConfig: {\n      url: \"\",\n      method: \"GET\",\n      headers: {},\n      retries: 3,\n      timeout: 10000,\n    },\n  },\n\n  [BlockType.CALCULATOR]: {\n    type: BlockType.CALCULATOR,\n    label: \"Calculator\",\n    description: \"Perform arithmetic operations and calculations\",\n    category: NodeCategory.LOGIC,\n    icon: \"calculator\",\n    defaultConfig: {\n      operation: \"add\",\n      inputs: {},\n      precision: 8,\n    },\n  },\n\n  [BlockType.COMPARATOR]: {\n    type: BlockType.COMPARATOR,\n    label: \"Comparator\",\n    description: \"Compare values with conditions and logical operators\",\n    category: NodeCategory.LOGIC,\n    icon: \"scale\",\n    defaultConfig: {\n      operation: \"equals\",\n      inputs: {\n        left: \"\",\n        right: \"\",\n      },\n    },\n  },\n\n  [BlockType.BLOCKCHAIN_READ]: {\n    type: BlockType.BLOCKCHAIN_READ,\n    label: \"Blockchain Read\",\n    description: \"Read data from blockchain networks\",\n    category: NodeCategory.ACTION,\n    icon: \"database\",\n    defaultConfig: {\n      operation: \"get_balance\",\n      network: \"ethereum\",\n      address: \"\",\n      retries: 3,\n    },\n  },\n\n  // Data Input/Output\n  [BlockType.DATABASE_QUERY]: {\n    type: BlockType.DATABASE_QUERY,\n    label: \"Database Query\",\n    description: \"Query database for information\",\n    category: NodeCategory.ACTION,\n    icon: \"database\",\n    defaultConfig: {\n      query: \"\",\n    },\n  },\n\n  [BlockType.FILE_READ]: {\n    type: BlockType.FILE_READ,\n    label: \"File Read\",\n    description: \"Read content from files\",\n    category: NodeCategory.ACTION,\n    icon: \"file-text\",\n    defaultConfig: {\n      path: \"\",\n      encoding: \"utf8\",\n    },\n  },\n\n  // Processing\n  [BlockType.TRANSFORMER]: {\n    type: BlockType.TRANSFORMER,\n    label: \"Transformer\",\n    description: \"Transform and manipulate data\",\n    category: NodeCategory.LOGIC,\n    icon: \"shuffle\",\n    defaultConfig: {\n      transformType: \"map\",\n      rules: [],\n      outputFormat: \"json\",\n    },\n  },\n\n  [BlockType.AGGREGATOR]: {\n    type: BlockType.AGGREGATOR,\n    label: \"Aggregator\",\n    description: \"Aggregate and analyze data\",\n    category: NodeCategory.LOGIC,\n    icon: \"pie-chart\",\n    defaultConfig: {\n      operation: \"count\",\n    },\n  },\n\n  // Logic\n  [BlockType.LOOP]: {\n    type: BlockType.LOOP,\n    label: \"Loop\",\n    description: \"Repeat actions with loop logic\",\n    category: NodeCategory.LOGIC,\n    icon: \"repeat\",\n    defaultConfig: {\n      loopType: \"for\",\n      iterations: 1,\n    },\n  },\n\n  // External Actions\n  [BlockType.HTTP_CALL]: {\n    type: BlockType.HTTP_CALL,\n    label: \"HTTP Call\",\n    description: \"Make HTTP calls to external services\",\n    category: NodeCategory.ACTION,\n    icon: \"send\",\n    defaultConfig: {\n      url: \"\",\n      method: \"POST\",\n      retries: 3,\n    },\n  },\n\n  [BlockType.MESSAGE_SEND]: {\n    type: BlockType.MESSAGE_SEND,\n    label: \"Message Send\",\n    description: \"Send messages via various channels\",\n    category: NodeCategory.ACTION,\n    icon: \"message-square\",\n    defaultConfig: {\n      channel: \"email\",\n      recipient: \"\",\n      message: \"\",\n    },\n  },\n\n  [BlockType.DATABASE_WRITE]: {\n    type: BlockType.DATABASE_WRITE,\n    label: \"Database Write\",\n    description: \"Write data to database\",\n    category: NodeCategory.ACTION,\n    icon: \"database\",\n    defaultConfig: {\n      operation: \"insert\",\n      table: \"\",\n      data: {},\n    },\n  },\n\n  [BlockType.BLOCKCHAIN_WRITE]: {\n    type: BlockType.BLOCKCHAIN_WRITE,\n    label: \"Blockchain Write\",\n    description: \"Write transactions to blockchain\",\n    category: NodeCategory.ACTION,\n    icon: \"link\",\n    defaultConfig: {\n      operation: \"send_transaction\",\n      network: \"ethereum\",\n    },\n  },\n\n  [BlockType.FILE_WRITE]: {\n    type: BlockType.FILE_WRITE,\n    label: \"File Write\",\n    description: \"Write content to files\",\n    category: NodeCategory.ACTION,\n    icon: \"file-plus\",\n    defaultConfig: {\n      path: \"\",\n      content: \"\",\n      encoding: \"utf8\",\n    },\n  },\n\n  // Unknown fallback\n  [BlockType.UNKNOWN]: {\n    type: BlockType.UNKNOWN,\n    label: \"Unknown\",\n    description: \"Unknown block type\",\n    category: NodeCategory.ACTION,\n    icon: \"help-circle\",\n    defaultConfig: {},\n  },\n};\n\n/**\n * Helper function to get block metadata by type\n */\nexport function getBlockMetadata(\n  blockType: BlockType | string\n): BlockMetadata | null {\n  return BLOCK_CATALOG[blockType as string] || null;\n}\n\n/**\n * Helper to get block type from various sources in a node/data object\n * Used to handle various ways block types might be stored in data\n */\nexport function getBlockType(data: any): BlockType {\n  // First check if we have a direct nodeType that matches a category\n  if (data?.nodeType) {\n    const nodeType = data.nodeType.toUpperCase();\n    if (Object.values(NodeCategory).includes(nodeType as NodeCategory)) {\n      // If it's a valid category, look up the corresponding block type\n      const blockType = Object.entries(BLOCK_CATALOG).find(\n        ([_, metadata]) => metadata.category === nodeType\n      )?.[0];\n      if (blockType) {\n        return blockType as BlockType;\n      }\n    }\n  }\n\n  // Then check blockType\n  const possibleTypes = [data?.blockType, data?.type, data?.id].filter(Boolean);\n\n  for (const type of possibleTypes) {\n    // Convert to uppercase for enum matching since BlockType uses uppercase\n    const upperType = type.toUpperCase();\n    // Check if it matches any BlockType enum value\n    if (Object.values(BlockType).includes(upperType as BlockType)) {\n      return upperType as BlockType;\n    }\n  }\n\n  return BlockType.UNKNOWN;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlockParameter.html":{"url":"interfaces/BlockParameter.html","title":"interface - BlockParameter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BlockParameter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n        \n\n\n            \n                Description\n            \n            \n                Block parameter definition\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            defaultValue\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            required\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        required\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        required:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NodeCategory } from './categories';\n\n/**\n * Data types for inputs/outputs\n */\nexport enum DataType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  OBJECT = \"object\",\n  ARRAY = \"array\",\n  ANY = \"any\",\n}\n\n/**\n * Logic execution types for custom blocks\n */\nexport enum ExecutionType {\n  FUNCTION = \"function\",\n  CODE = \"code\",\n  WEBHOOK = \"webhook\",\n}\n\n/**\n * Logic types for custom block execution\n */\nexport enum LogicType {\n  JAVASCRIPT = \"javascript\",\n  TYPESCRIPT = \"typescript\",\n  PYTHON = \"python\",\n  REST_API = \"rest-api\",\n  // Add these to match worker implementation\n  JSON_TRANSFORM = \"json-transform\",\n  TEMPLATE = \"template\",\n  CONDITION = \"condition\",\n}\n\n/**\n * Interface for custom block input parameters\n */\nexport interface CustomBlockInput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Interface for custom block output parameters\n */\nexport interface CustomBlockOutput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n}\n\n/**\n * Interface for custom block configuration fields\n */\nexport interface CustomBlockConfigField {\n  name: string;\n  label: string;\n  type: string;\n  defaultValue?: any;\n  options?: string[];\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n}\n\n/**\n * Block parameter definition\n */\nexport interface BlockParameter {\n  name: string;\n  type: DataType;\n  description: string;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Custom block definition\n */\nexport interface CustomBlockDefinition {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  tags?: string[];\n}\n\n/**\n * Interface for AI-generated custom block data\n */\nexport interface AICustomBlockData {\n  name: string;\n  description: string;\n  category: string;\n  inputs: CustomBlockInput[];\n  outputs: CustomBlockOutput[];\n  configFields: CustomBlockConfigField[];\n  code: string;\n}\n\n/**\n * Complete custom block data with all properties\n */\nexport interface CustomBlockData {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  isPublic: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  version?: string;\n  rating?: number;\n  downloads?: number;\n}\n\n/**\n * Result of custom block execution\n */\nexport interface CustomBlockExecutionResult {\n  success: boolean;\n  outputs?: Record;\n  error?: string;\n  logs?: string[];\n}\n\n/**\n * Helper function to create a block parameter\n */\nexport function createParameter(name: string, type: DataType, description: string, required = true, defaultValue?: any): BlockParameter {\n  return {\n    name,\n    type,\n    description,\n    required,\n    defaultValue,\n  };\n}\n\n/**\n * Helper function to create a custom block definition\n */\nexport function createCustomBlockDefinition(options: {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n}): CustomBlockDefinition {\n  return {\n    ...options,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlockType.html":{"url":"interfaces/BlockType.html","title":"interface - BlockType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BlockType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blocks/blocks.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultConfig\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            icon\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultConfig:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        icon\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        icon:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../database/prisma.service\";\nimport {\n  CustomBlockDefinition,\n  DataType,\n  LogicType,\n  NodeCategory,\n  BlockType as ZyraBlockType,\n  BlockMetadata,\n  BLOCK_CATALOG,\n} from \"@zyra/types\";\n\nexport interface BlockType {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  icon?: string;\n  defaultConfig?: Record;\n}\n\nexport interface CreateCustomBlockRequest {\n  name: string;\n  description?: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs?: Array;\n  outputs?: Array;\n  isPublic?: boolean;\n  tags?: string[];\n}\n\n@Injectable()\nexport class BlocksService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async getBlockTypes(): Promise {\n    try {\n      // Get all block types from the zyra types catalog\n      const blockTypes: BlockMetadata[] = Object.values(ZyraBlockType).map(\n        (blockTypeKey) => {\n          const metadata = BLOCK_CATALOG[blockTypeKey];\n\n          if (metadata) {\n            return {\n              type: blockTypeKey,\n              label: metadata.label,\n              description: metadata.description,\n              category: metadata.category,\n              icon: metadata.icon,\n              defaultConfig: metadata.defaultConfig,\n            };\n          }\n\n          // Fallback for block types not in catalog\n          return {\n            type: blockTypeKey,\n            label: this.formatBlockTypeName(blockTypeKey),\n            description: `${this.formatBlockTypeName(blockTypeKey)} block`,\n            category: this.inferCategoryFromName(blockTypeKey) as NodeCategory,\n            icon: \"help-circle\",\n            defaultConfig: {},\n          };\n        }\n      );\n\n      return blockTypes.sort((a, b) => a.label.localeCompare(b.label));\n    } catch (error) {\n      console.error(\"Error in block-types service:\", error);\n      throw new Error(\"Internal server error\");\n    }\n  }\n\n  async getBlockSchema(type?: string) {\n    try {\n      // For now, return a simple mock response\n      if (!type) {\n        return {\n          HTTP_REQUEST: { type: \"object\", properties: {} },\n          EMAIL: { type: \"object\", properties: {} },\n        };\n      }\n\n      // Return schema for specific block type\n      return { type: \"object\", properties: {} };\n    } catch (error) {\n      console.error(\"Error in block-schema service:\", error);\n      throw error;\n    }\n  }\n\n  async getCustomBlocks(userId: string, isPublic?: string, category?: string) {\n    try {\n      const where: any = {};\n\n      if (isPublic === \"true\") {\n        where.isPublic = true;\n      } else {\n        where.OR = [{ userId: userId }, { isPublic: true }];\n      }\n\n      if (category) {\n        where.category = category;\n      }\n\n      const blocks = await this.prisma.client.customBlock.findMany({\n        where,\n        orderBy: { createdAt: \"desc\" },\n      });\n\n      return {\n        blocks: blocks.map(this.mapDatabaseToCustomBlockDefinition),\n      };\n    } catch (error) {\n      console.error(\"Error fetching custom blocks:\", error);\n      throw new Error(\"Failed to fetch custom blocks\");\n    }\n  }\n\n  async getCustomBlock(\n    id: string,\n    userId: string\n  ): Promise {\n    try {\n      const block = await this.prisma.client.customBlock.findFirst({\n        where: {\n          id,\n          OR: [{ userId: userId }, { isPublic: true }],\n        },\n      });\n\n      if (!block) {\n        return { block: null };\n      }\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(block),\n      };\n    } catch (error) {\n      console.error(\"Error fetching custom block:\", error);\n      throw new Error(\"Failed to fetch custom block\");\n    }\n  }\n\n  async createCustomBlock(\n    userId: string,\n    data: CreateCustomBlockRequest\n  ): Promise {\n    try {\n      const blockData = {\n        inputs: data.inputs || [],\n        outputs: data.outputs || [],\n        configFields: [],\n      };\n\n      const customBlock = await this.prisma.client.customBlock.create({\n        data: {\n          userId,\n          name: data.name,\n          description: data.description || \"\",\n          category: data.category,\n          code: data.code,\n          logic: data.code,\n          logicType: data.logicType,\n          blockData: JSON.stringify(blockData),\n          tags: JSON.stringify(data.tags || []),\n          isPublic: data.isPublic || false,\n        },\n      });\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(customBlock),\n      };\n    } catch (error) {\n      console.error(\"Error creating custom block:\", error);\n      throw new Error(\"Failed to create custom block\");\n    }\n  }\n\n  async updateCustomBlock(\n    id: string,\n    userId: string,\n    data: Partial\n  ): Promise {\n    try {\n      const existingBlock = await this.prisma.client.customBlock.findFirst({\n        where: { id, userId },\n      });\n\n      if (!existingBlock) {\n        throw new Error(\"Custom block not found or access denied\");\n      }\n\n      const updateData: any = {\n        updatedAt: new Date(),\n      };\n\n      if (data.name) updateData.name = data.name;\n      if (data.description !== undefined)\n        updateData.description = data.description;\n      if (data.category) updateData.category = data.category;\n      if (data.code) {\n        updateData.code = data.code;\n        updateData.logic = data.code;\n      }\n      if (data.logicType) updateData.logicType = data.logicType;\n      if (data.isPublic !== undefined) updateData.isPublic = data.isPublic;\n      if (data.tags) updateData.tags = JSON.stringify(data.tags);\n\n      if (data.inputs || data.outputs) {\n        const blockData = {\n          inputs: data.inputs || [],\n          outputs: data.outputs || [],\n          configFields: [],\n        };\n        updateData.blockData = JSON.stringify(blockData);\n      }\n\n      const updatedBlock = await this.prisma.client.customBlock.update({\n        where: { id },\n        data: updateData,\n      });\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(updatedBlock),\n      };\n    } catch (error) {\n      console.error(\"Error updating custom block:\", error);\n      throw new Error(\"Failed to update custom block\");\n    }\n  }\n\n  async deleteCustomBlock(\n    id: string,\n    userId: string\n  ): Promise {\n    try {\n      const deleteResult = await this.prisma.client.customBlock.deleteMany({\n        where: { id, userId },\n      });\n\n      if (deleteResult.count === 0) {\n        throw new Error(\"Custom block not found or not owned by user\");\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"Error deleting custom block:\", error);\n      throw new Error(\"Failed to delete custom block\");\n    }\n  }\n\n  private mapDatabaseToCustomBlockDefinition(\n    dbBlock: any\n  ): CustomBlockDefinition {\n    let blockData: any = {};\n    let tags: string[] = [];\n\n    try {\n      blockData =\n        typeof dbBlock.blockData === \"string\"\n          ? JSON.parse(dbBlock.blockData)\n          : dbBlock.blockData || {};\n    } catch {\n      blockData = {};\n    }\n\n    try {\n      tags =\n        typeof dbBlock.tags === \"string\"\n          ? JSON.parse(dbBlock.tags)\n          : Array.isArray(dbBlock.tags)\n            ? dbBlock.tags\n            : [];\n    } catch {\n      tags = [];\n    }\n\n    return {\n      id: dbBlock.id,\n      name: dbBlock.name,\n      description: dbBlock.description || \"\",\n      category: dbBlock.category as NodeCategory,\n      inputs: (blockData.inputs || []).map((input: any) => ({\n        name: input.name,\n        type: input.type,\n        description: input.description || \"\",\n        required: input.required || false,\n        defaultValue: input.defaultValue,\n      })),\n      outputs: (blockData.outputs || []).map((output: any) => ({\n        name: output.name,\n        type: output.type,\n        description: output.description || \"\",\n        required: output.required || false,\n      })),\n      code: dbBlock.code,\n      logicType: dbBlock.logicType as LogicType,\n      isPublic: dbBlock.isPublic || false,\n      createdAt: dbBlock.createdAt?.toISOString(),\n      updatedAt: dbBlock.updatedAt?.toISOString(),\n      createdBy: dbBlock.userId,\n      tags,\n    };\n  }\n\n  private formatBlockTypeName(blockType: string): string {\n    return blockType\n      .split(\"_\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(\" \");\n  }\n\n  private inferCategoryFromName(blockType: string): string {\n    const lowerType = blockType.toLowerCase();\n\n    if (\n      lowerType.includes(\"schedule\") ||\n      lowerType.includes(\"webhook\") ||\n      lowerType.includes(\"monitor\")\n    ) {\n      return NodeCategory.TRIGGER;\n    }\n\n    if (\n      lowerType.includes(\"condition\") ||\n      lowerType.includes(\"delay\") ||\n      lowerType.includes(\"loop\") ||\n      lowerType.includes(\"transform\")\n    ) {\n      return NodeCategory.LOGIC;\n    }\n\n    // Default to action\n    return NodeCategory.ACTION;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlocksController.html":{"url":"controllers/BlocksController.html","title":"controller - BlocksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlocksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blocks/blocks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                blocks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                createCustomBlock\n                            \n                            \n                                    \n                                    \n                                    Async\n                                deleteCustomBlock\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getBlockSchema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getBlockTypes\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getCustomBlock\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getCustomBlocks\n                            \n                            \n                                    \n                                    \n                                    Async\n                                updateCustomBlock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        createCustomBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCustomBlock(data: CreateCustomBlockRequest, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('custom')@ApiOperation({summary: 'Create custom block'})\n                \n            \n\n                    \n                        \n                            Defined in src/blocks/blocks.controller.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CreateCustomBlockRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        deleteCustomBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCustomBlock(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('custom/:id')@ApiOperation({summary: 'Delete custom block'})\n                \n            \n\n                    \n                        \n                            Defined in src/blocks/blocks.controller.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getBlockSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBlockSchema(type?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('schema')@ApiOperation({summary: 'Get block schema for a specific type'})\n                \n            \n\n                    \n                        \n                            Defined in src/blocks/blocks.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getBlockTypes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBlockTypes()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('types')@ApiOperation({summary: 'Get all available block types'})\n                \n            \n\n                    \n                        \n                            Defined in src/blocks/blocks.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getCustomBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomBlock(id: string, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('custom/:id')@ApiOperation({summary: 'Get custom block by ID'})\n                \n            \n\n                    \n                        \n                            Defined in src/blocks/blocks.controller.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getCustomBlocks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomBlocks(isPublic?: string, category?: string, req?: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('custom')@ApiOperation({summary: 'Get custom blocks'})\n                \n            \n\n                    \n                        \n                            Defined in src/blocks/blocks.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isPublic\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        updateCustomBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCustomBlock(id: string, data: Partial, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('custom/:id')@ApiOperation({summary: 'Update custom block'})\n                \n            \n\n                    \n                        \n                            Defined in src/blocks/blocks.controller.ts:129\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  Query,\n  Request,\n  HttpException,\n  HttpStatus,\n} from \"@nestjs/common\";\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from \"@nestjs/swagger\";\nimport {\n  BlocksService,\n  BlockType,\n  CreateCustomBlockRequest,\n} from \"./blocks.service\";\nimport { Public } from \"../auth/decorators/public.decorator\";\n\n@ApiTags(\"blocks\")\n@Controller(\"blocks\")\n@ApiBearerAuth()\nexport class BlocksController {\n  constructor(private readonly blocksService: BlocksService) {}\n\n  @Public()\n  @Get(\"types\")\n  @ApiOperation({ summary: \"Get all available block types\" })\n  async getBlockTypes() {\n    try {\n      return this.blocksService.getBlockTypes();\n    } catch (error) {\n      console.error(\"Error in block-types API:\", error);\n      throw new HttpException(\n        \"Internal server error\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Public()\n  @Get(\"schema\")\n  @ApiOperation({ summary: \"Get block schema for a specific type\" })\n  async getBlockSchema(@Query(\"type\") type?: string) {\n    try {\n      return this.blocksService.getBlockSchema(type);\n    } catch (error) {\n      console.error(\"Error in block-schema API:\", error);\n      throw new HttpException(\n        \"Internal server error\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get(\"custom\")\n  @ApiOperation({ summary: \"Get custom blocks\" })\n  async getCustomBlocks(\n    @Query(\"is_public\") isPublic?: string,\n    @Query(\"category\") category?: string,\n    @Request() req?: any\n  ) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        throw new HttpException(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n      }\n\n      return this.blocksService.getCustomBlocks(userId, isPublic, category);\n    } catch (error) {\n      console.error(\"Error fetching custom blocks:\", error);\n      throw new HttpException(\n        \"Failed to fetch custom blocks\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get(\"custom/:id\")\n  @ApiOperation({ summary: \"Get custom block by ID\" })\n  async getCustomBlock(@Param(\"id\") id: string, @Request() req: any) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        throw new HttpException(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n      }\n\n      return this.blocksService.getCustomBlock(id, userId);\n    } catch (error) {\n      console.error(\"Error fetching custom block:\", error);\n      throw new HttpException(\n        \"Failed to fetch custom block\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Post(\"custom\")\n  @ApiOperation({ summary: \"Create custom block\" })\n  async createCustomBlock(\n    @Body() data: CreateCustomBlockRequest,\n    @Request() req: any\n  ) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        throw new HttpException(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n      }\n\n      return this.blocksService.createCustomBlock(userId, data);\n    } catch (error) {\n      console.error(\"Error creating custom block:\", error);\n      throw new HttpException(\n        \"Failed to create custom block\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Put(\"custom/:id\")\n  @ApiOperation({ summary: \"Update custom block\" })\n  async updateCustomBlock(\n    @Param(\"id\") id: string,\n    @Body() data: Partial,\n    @Request() req: any\n  ) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        throw new HttpException(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n      }\n\n      return this.blocksService.updateCustomBlock(id, userId, data);\n    } catch (error) {\n      console.error(\"Error updating custom block:\", error);\n      throw new HttpException(\n        \"Failed to update custom block\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Delete(\"custom/:id\")\n  @ApiOperation({ summary: \"Delete custom block\" })\n  async deleteCustomBlock(@Param(\"id\") id: string, @Request() req: any) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        throw new HttpException(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n      }\n\n      return this.blocksService.deleteCustomBlock(id, userId);\n    } catch (error) {\n      console.error(\"Error deleting custom block:\", error);\n      throw new HttpException(\n        \"Failed to delete custom block\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlocksModule.html":{"url":"modules/BlocksModule.html","title":"module - BlocksModule","body":"\n                   \n\n\n\n\n    Modules\n    BlocksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BlocksModule\n\n\n\ncluster_BlocksModule_imports\n\n\n\ncluster_BlocksModule_exports\n\n\n\ncluster_BlocksModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nBlocksModule\n\nBlocksModule\n\nBlocksModule -->\n\nDatabaseModule->BlocksModule\n\n\n\n\n\nBlocksService \n\nBlocksService \n\nBlocksService  -->\n\nBlocksModule->BlocksService \n\n\n\n\n\nBlocksService\n\nBlocksService\n\nBlocksModule -->\n\nBlocksService->BlocksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/blocks/blocks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlocksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlocksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BlocksService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { DatabaseModule } from \"../database/database.module\";\nimport { BlocksController } from \"./blocks.controller\";\nimport { BlocksService } from \"./blocks.service\";\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [BlocksController],\n  providers: [BlocksService],\n  exports: [BlocksService],\n})\nexport class BlocksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlocksService.html":{"url":"injectables/BlocksService.html","title":"injectable - BlocksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlocksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blocks/blocks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCustomBlock\n                            \n                            \n                                    Async\n                                deleteCustomBlock\n                            \n                            \n                                    Private\n                                formatBlockTypeName\n                            \n                            \n                                    Async\n                                getBlockSchema\n                            \n                            \n                                    Async\n                                getBlockTypes\n                            \n                            \n                                    Async\n                                getCustomBlock\n                            \n                            \n                                    Async\n                                getCustomBlocks\n                            \n                            \n                                    Private\n                                inferCategoryFromName\n                            \n                            \n                                    Private\n                                mapDatabaseToCustomBlockDefinition\n                            \n                            \n                                    Async\n                                updateCustomBlock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/blocks/blocks.service.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createCustomBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCustomBlock(userId: string, data: CreateCustomBlockRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            CreateCustomBlockRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteCustomBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteCustomBlock(id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:245\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        formatBlockTypeName\n                        \n                    \n                \n            \n            \n                \n                        \n                    formatBlockTypeName(blockType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:319\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                blockType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBlockSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBlockSchema(type?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getBlockTypes\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBlockTypes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomBlock(id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCustomBlocks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCustomBlocks(userId: string, isPublic?: string, category?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isPublic\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        inferCategoryFromName\n                        \n                    \n                \n            \n            \n                \n                        \n                    inferCategoryFromName(blockType: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:326\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                blockType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mapDatabaseToCustomBlockDefinition\n                        \n                    \n                \n            \n            \n                \n                        \n                    mapDatabaseToCustomBlockDefinition(dbBlock: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:265\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dbBlock\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CustomBlockDefinition\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateCustomBlock\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCustomBlock(id: string, userId: string, data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blocks/blocks.service.ts:192\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../database/prisma.service\";\nimport {\n  CustomBlockDefinition,\n  DataType,\n  LogicType,\n  NodeCategory,\n  BlockType as ZyraBlockType,\n  BlockMetadata,\n  BLOCK_CATALOG,\n} from \"@zyra/types\";\n\nexport interface BlockType {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  icon?: string;\n  defaultConfig?: Record;\n}\n\nexport interface CreateCustomBlockRequest {\n  name: string;\n  description?: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs?: Array;\n  outputs?: Array;\n  isPublic?: boolean;\n  tags?: string[];\n}\n\n@Injectable()\nexport class BlocksService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async getBlockTypes(): Promise {\n    try {\n      // Get all block types from the zyra types catalog\n      const blockTypes: BlockMetadata[] = Object.values(ZyraBlockType).map(\n        (blockTypeKey) => {\n          const metadata = BLOCK_CATALOG[blockTypeKey];\n\n          if (metadata) {\n            return {\n              type: blockTypeKey,\n              label: metadata.label,\n              description: metadata.description,\n              category: metadata.category,\n              icon: metadata.icon,\n              defaultConfig: metadata.defaultConfig,\n            };\n          }\n\n          // Fallback for block types not in catalog\n          return {\n            type: blockTypeKey,\n            label: this.formatBlockTypeName(blockTypeKey),\n            description: `${this.formatBlockTypeName(blockTypeKey)} block`,\n            category: this.inferCategoryFromName(blockTypeKey) as NodeCategory,\n            icon: \"help-circle\",\n            defaultConfig: {},\n          };\n        }\n      );\n\n      return blockTypes.sort((a, b) => a.label.localeCompare(b.label));\n    } catch (error) {\n      console.error(\"Error in block-types service:\", error);\n      throw new Error(\"Internal server error\");\n    }\n  }\n\n  async getBlockSchema(type?: string) {\n    try {\n      // For now, return a simple mock response\n      if (!type) {\n        return {\n          HTTP_REQUEST: { type: \"object\", properties: {} },\n          EMAIL: { type: \"object\", properties: {} },\n        };\n      }\n\n      // Return schema for specific block type\n      return { type: \"object\", properties: {} };\n    } catch (error) {\n      console.error(\"Error in block-schema service:\", error);\n      throw error;\n    }\n  }\n\n  async getCustomBlocks(userId: string, isPublic?: string, category?: string) {\n    try {\n      const where: any = {};\n\n      if (isPublic === \"true\") {\n        where.isPublic = true;\n      } else {\n        where.OR = [{ userId: userId }, { isPublic: true }];\n      }\n\n      if (category) {\n        where.category = category;\n      }\n\n      const blocks = await this.prisma.client.customBlock.findMany({\n        where,\n        orderBy: { createdAt: \"desc\" },\n      });\n\n      return {\n        blocks: blocks.map(this.mapDatabaseToCustomBlockDefinition),\n      };\n    } catch (error) {\n      console.error(\"Error fetching custom blocks:\", error);\n      throw new Error(\"Failed to fetch custom blocks\");\n    }\n  }\n\n  async getCustomBlock(\n    id: string,\n    userId: string\n  ): Promise {\n    try {\n      const block = await this.prisma.client.customBlock.findFirst({\n        where: {\n          id,\n          OR: [{ userId: userId }, { isPublic: true }],\n        },\n      });\n\n      if (!block) {\n        return { block: null };\n      }\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(block),\n      };\n    } catch (error) {\n      console.error(\"Error fetching custom block:\", error);\n      throw new Error(\"Failed to fetch custom block\");\n    }\n  }\n\n  async createCustomBlock(\n    userId: string,\n    data: CreateCustomBlockRequest\n  ): Promise {\n    try {\n      const blockData = {\n        inputs: data.inputs || [],\n        outputs: data.outputs || [],\n        configFields: [],\n      };\n\n      const customBlock = await this.prisma.client.customBlock.create({\n        data: {\n          userId,\n          name: data.name,\n          description: data.description || \"\",\n          category: data.category,\n          code: data.code,\n          logic: data.code,\n          logicType: data.logicType,\n          blockData: JSON.stringify(blockData),\n          tags: JSON.stringify(data.tags || []),\n          isPublic: data.isPublic || false,\n        },\n      });\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(customBlock),\n      };\n    } catch (error) {\n      console.error(\"Error creating custom block:\", error);\n      throw new Error(\"Failed to create custom block\");\n    }\n  }\n\n  async updateCustomBlock(\n    id: string,\n    userId: string,\n    data: Partial\n  ): Promise {\n    try {\n      const existingBlock = await this.prisma.client.customBlock.findFirst({\n        where: { id, userId },\n      });\n\n      if (!existingBlock) {\n        throw new Error(\"Custom block not found or access denied\");\n      }\n\n      const updateData: any = {\n        updatedAt: new Date(),\n      };\n\n      if (data.name) updateData.name = data.name;\n      if (data.description !== undefined)\n        updateData.description = data.description;\n      if (data.category) updateData.category = data.category;\n      if (data.code) {\n        updateData.code = data.code;\n        updateData.logic = data.code;\n      }\n      if (data.logicType) updateData.logicType = data.logicType;\n      if (data.isPublic !== undefined) updateData.isPublic = data.isPublic;\n      if (data.tags) updateData.tags = JSON.stringify(data.tags);\n\n      if (data.inputs || data.outputs) {\n        const blockData = {\n          inputs: data.inputs || [],\n          outputs: data.outputs || [],\n          configFields: [],\n        };\n        updateData.blockData = JSON.stringify(blockData);\n      }\n\n      const updatedBlock = await this.prisma.client.customBlock.update({\n        where: { id },\n        data: updateData,\n      });\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(updatedBlock),\n      };\n    } catch (error) {\n      console.error(\"Error updating custom block:\", error);\n      throw new Error(\"Failed to update custom block\");\n    }\n  }\n\n  async deleteCustomBlock(\n    id: string,\n    userId: string\n  ): Promise {\n    try {\n      const deleteResult = await this.prisma.client.customBlock.deleteMany({\n        where: { id, userId },\n      });\n\n      if (deleteResult.count === 0) {\n        throw new Error(\"Custom block not found or not owned by user\");\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"Error deleting custom block:\", error);\n      throw new Error(\"Failed to delete custom block\");\n    }\n  }\n\n  private mapDatabaseToCustomBlockDefinition(\n    dbBlock: any\n  ): CustomBlockDefinition {\n    let blockData: any = {};\n    let tags: string[] = [];\n\n    try {\n      blockData =\n        typeof dbBlock.blockData === \"string\"\n          ? JSON.parse(dbBlock.blockData)\n          : dbBlock.blockData || {};\n    } catch {\n      blockData = {};\n    }\n\n    try {\n      tags =\n        typeof dbBlock.tags === \"string\"\n          ? JSON.parse(dbBlock.tags)\n          : Array.isArray(dbBlock.tags)\n            ? dbBlock.tags\n            : [];\n    } catch {\n      tags = [];\n    }\n\n    return {\n      id: dbBlock.id,\n      name: dbBlock.name,\n      description: dbBlock.description || \"\",\n      category: dbBlock.category as NodeCategory,\n      inputs: (blockData.inputs || []).map((input: any) => ({\n        name: input.name,\n        type: input.type,\n        description: input.description || \"\",\n        required: input.required || false,\n        defaultValue: input.defaultValue,\n      })),\n      outputs: (blockData.outputs || []).map((output: any) => ({\n        name: output.name,\n        type: output.type,\n        description: output.description || \"\",\n        required: output.required || false,\n      })),\n      code: dbBlock.code,\n      logicType: dbBlock.logicType as LogicType,\n      isPublic: dbBlock.isPublic || false,\n      createdAt: dbBlock.createdAt?.toISOString(),\n      updatedAt: dbBlock.updatedAt?.toISOString(),\n      createdBy: dbBlock.userId,\n      tags,\n    };\n  }\n\n  private formatBlockTypeName(blockType: string): string {\n    return blockType\n      .split(\"_\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(\" \");\n  }\n\n  private inferCategoryFromName(blockType: string): string {\n    const lowerType = blockType.toLowerCase();\n\n    if (\n      lowerType.includes(\"schedule\") ||\n      lowerType.includes(\"webhook\") ||\n      lowerType.includes(\"monitor\")\n    ) {\n      return NodeCategory.TRIGGER;\n    }\n\n    if (\n      lowerType.includes(\"condition\") ||\n      lowerType.includes(\"delay\") ||\n      lowerType.includes(\"loop\") ||\n      lowerType.includes(\"transform\")\n    ) {\n      return NodeCategory.LOGIC;\n    }\n\n    // Default to action\n    return NodeCategory.ACTION;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateCustomBlockRequest.html":{"url":"interfaces/CreateCustomBlockRequest.html","title":"interface - CreateCustomBlockRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateCustomBlockRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blocks/blocks.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            inputs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isPublic\n                                        \n                                \n                                \n                                        \n                                            logicType\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            outputs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tags\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         NodeCategory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeCategory\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isPublic\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPublic:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logicType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logicType:         LogicType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LogicType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../database/prisma.service\";\nimport {\n  CustomBlockDefinition,\n  DataType,\n  LogicType,\n  NodeCategory,\n  BlockType as ZyraBlockType,\n  BlockMetadata,\n  BLOCK_CATALOG,\n} from \"@zyra/types\";\n\nexport interface BlockType {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  icon?: string;\n  defaultConfig?: Record;\n}\n\nexport interface CreateCustomBlockRequest {\n  name: string;\n  description?: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs?: Array;\n  outputs?: Array;\n  isPublic?: boolean;\n  tags?: string[];\n}\n\n@Injectable()\nexport class BlocksService {\n  constructor(private readonly prisma: PrismaService) {}\n\n  async getBlockTypes(): Promise {\n    try {\n      // Get all block types from the zyra types catalog\n      const blockTypes: BlockMetadata[] = Object.values(ZyraBlockType).map(\n        (blockTypeKey) => {\n          const metadata = BLOCK_CATALOG[blockTypeKey];\n\n          if (metadata) {\n            return {\n              type: blockTypeKey,\n              label: metadata.label,\n              description: metadata.description,\n              category: metadata.category,\n              icon: metadata.icon,\n              defaultConfig: metadata.defaultConfig,\n            };\n          }\n\n          // Fallback for block types not in catalog\n          return {\n            type: blockTypeKey,\n            label: this.formatBlockTypeName(blockTypeKey),\n            description: `${this.formatBlockTypeName(blockTypeKey)} block`,\n            category: this.inferCategoryFromName(blockTypeKey) as NodeCategory,\n            icon: \"help-circle\",\n            defaultConfig: {},\n          };\n        }\n      );\n\n      return blockTypes.sort((a, b) => a.label.localeCompare(b.label));\n    } catch (error) {\n      console.error(\"Error in block-types service:\", error);\n      throw new Error(\"Internal server error\");\n    }\n  }\n\n  async getBlockSchema(type?: string) {\n    try {\n      // For now, return a simple mock response\n      if (!type) {\n        return {\n          HTTP_REQUEST: { type: \"object\", properties: {} },\n          EMAIL: { type: \"object\", properties: {} },\n        };\n      }\n\n      // Return schema for specific block type\n      return { type: \"object\", properties: {} };\n    } catch (error) {\n      console.error(\"Error in block-schema service:\", error);\n      throw error;\n    }\n  }\n\n  async getCustomBlocks(userId: string, isPublic?: string, category?: string) {\n    try {\n      const where: any = {};\n\n      if (isPublic === \"true\") {\n        where.isPublic = true;\n      } else {\n        where.OR = [{ userId: userId }, { isPublic: true }];\n      }\n\n      if (category) {\n        where.category = category;\n      }\n\n      const blocks = await this.prisma.client.customBlock.findMany({\n        where,\n        orderBy: { createdAt: \"desc\" },\n      });\n\n      return {\n        blocks: blocks.map(this.mapDatabaseToCustomBlockDefinition),\n      };\n    } catch (error) {\n      console.error(\"Error fetching custom blocks:\", error);\n      throw new Error(\"Failed to fetch custom blocks\");\n    }\n  }\n\n  async getCustomBlock(\n    id: string,\n    userId: string\n  ): Promise {\n    try {\n      const block = await this.prisma.client.customBlock.findFirst({\n        where: {\n          id,\n          OR: [{ userId: userId }, { isPublic: true }],\n        },\n      });\n\n      if (!block) {\n        return { block: null };\n      }\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(block),\n      };\n    } catch (error) {\n      console.error(\"Error fetching custom block:\", error);\n      throw new Error(\"Failed to fetch custom block\");\n    }\n  }\n\n  async createCustomBlock(\n    userId: string,\n    data: CreateCustomBlockRequest\n  ): Promise {\n    try {\n      const blockData = {\n        inputs: data.inputs || [],\n        outputs: data.outputs || [],\n        configFields: [],\n      };\n\n      const customBlock = await this.prisma.client.customBlock.create({\n        data: {\n          userId,\n          name: data.name,\n          description: data.description || \"\",\n          category: data.category,\n          code: data.code,\n          logic: data.code,\n          logicType: data.logicType,\n          blockData: JSON.stringify(blockData),\n          tags: JSON.stringify(data.tags || []),\n          isPublic: data.isPublic || false,\n        },\n      });\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(customBlock),\n      };\n    } catch (error) {\n      console.error(\"Error creating custom block:\", error);\n      throw new Error(\"Failed to create custom block\");\n    }\n  }\n\n  async updateCustomBlock(\n    id: string,\n    userId: string,\n    data: Partial\n  ): Promise {\n    try {\n      const existingBlock = await this.prisma.client.customBlock.findFirst({\n        where: { id, userId },\n      });\n\n      if (!existingBlock) {\n        throw new Error(\"Custom block not found or access denied\");\n      }\n\n      const updateData: any = {\n        updatedAt: new Date(),\n      };\n\n      if (data.name) updateData.name = data.name;\n      if (data.description !== undefined)\n        updateData.description = data.description;\n      if (data.category) updateData.category = data.category;\n      if (data.code) {\n        updateData.code = data.code;\n        updateData.logic = data.code;\n      }\n      if (data.logicType) updateData.logicType = data.logicType;\n      if (data.isPublic !== undefined) updateData.isPublic = data.isPublic;\n      if (data.tags) updateData.tags = JSON.stringify(data.tags);\n\n      if (data.inputs || data.outputs) {\n        const blockData = {\n          inputs: data.inputs || [],\n          outputs: data.outputs || [],\n          configFields: [],\n        };\n        updateData.blockData = JSON.stringify(blockData);\n      }\n\n      const updatedBlock = await this.prisma.client.customBlock.update({\n        where: { id },\n        data: updateData,\n      });\n\n      return {\n        block: this.mapDatabaseToCustomBlockDefinition(updatedBlock),\n      };\n    } catch (error) {\n      console.error(\"Error updating custom block:\", error);\n      throw new Error(\"Failed to update custom block\");\n    }\n  }\n\n  async deleteCustomBlock(\n    id: string,\n    userId: string\n  ): Promise {\n    try {\n      const deleteResult = await this.prisma.client.customBlock.deleteMany({\n        where: { id, userId },\n      });\n\n      if (deleteResult.count === 0) {\n        throw new Error(\"Custom block not found or not owned by user\");\n      }\n\n      return { success: true };\n    } catch (error) {\n      console.error(\"Error deleting custom block:\", error);\n      throw new Error(\"Failed to delete custom block\");\n    }\n  }\n\n  private mapDatabaseToCustomBlockDefinition(\n    dbBlock: any\n  ): CustomBlockDefinition {\n    let blockData: any = {};\n    let tags: string[] = [];\n\n    try {\n      blockData =\n        typeof dbBlock.blockData === \"string\"\n          ? JSON.parse(dbBlock.blockData)\n          : dbBlock.blockData || {};\n    } catch {\n      blockData = {};\n    }\n\n    try {\n      tags =\n        typeof dbBlock.tags === \"string\"\n          ? JSON.parse(dbBlock.tags)\n          : Array.isArray(dbBlock.tags)\n            ? dbBlock.tags\n            : [];\n    } catch {\n      tags = [];\n    }\n\n    return {\n      id: dbBlock.id,\n      name: dbBlock.name,\n      description: dbBlock.description || \"\",\n      category: dbBlock.category as NodeCategory,\n      inputs: (blockData.inputs || []).map((input: any) => ({\n        name: input.name,\n        type: input.type,\n        description: input.description || \"\",\n        required: input.required || false,\n        defaultValue: input.defaultValue,\n      })),\n      outputs: (blockData.outputs || []).map((output: any) => ({\n        name: output.name,\n        type: output.type,\n        description: output.description || \"\",\n        required: output.required || false,\n      })),\n      code: dbBlock.code,\n      logicType: dbBlock.logicType as LogicType,\n      isPublic: dbBlock.isPublic || false,\n      createdAt: dbBlock.createdAt?.toISOString(),\n      updatedAt: dbBlock.updatedAt?.toISOString(),\n      createdBy: dbBlock.userId,\n      tags,\n    };\n  }\n\n  private formatBlockTypeName(blockType: string): string {\n    return blockType\n      .split(\"_\")\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(\" \");\n  }\n\n  private inferCategoryFromName(blockType: string): string {\n    const lowerType = blockType.toLowerCase();\n\n    if (\n      lowerType.includes(\"schedule\") ||\n      lowerType.includes(\"webhook\") ||\n      lowerType.includes(\"monitor\")\n    ) {\n      return NodeCategory.TRIGGER;\n    }\n\n    if (\n      lowerType.includes(\"condition\") ||\n      lowerType.includes(\"delay\") ||\n      lowerType.includes(\"loop\") ||\n      lowerType.includes(\"transform\")\n    ) {\n      return NodeCategory.LOGIC;\n    }\n\n    // Default to action\n    return NodeCategory.ACTION;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateExecutionDto.html":{"url":"classes/CreateExecutionDto.html","title":"class - CreateExecutionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateExecutionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                input\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                triggerType\n                            \n                            \n                                    \n                                    \n                                workflowId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Input data for the execution', required: false})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        triggerType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Type of trigger that started this execution', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        workflowId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the workflow to execute'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateWalletDto.html":{"url":"classes/CreateWalletDto.html","title":"class - CreateWalletDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateWalletDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                chainId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                chainType\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                metadata\n                            \n                            \n                                    \n                                    \n                                walletAddress\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                walletType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        chainId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Chain ID'})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        chainType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Chain type', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional metadata', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        walletAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Wallet address'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        walletType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Wallet type', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:98\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsBoolean,\n  IsNumber,\n} from \"class-validator\";\n\nexport class UpdateProfileDto {\n  @ApiProperty({ description: \"User full name\", required: false })\n  @IsOptional()\n  @IsString()\n  full_name?: string;\n\n  @ApiProperty({ description: \"Enable email notifications\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  email_notifications?: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\", required: false })\n  @IsOptional()\n  @IsString()\n  telegram_handle?: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\", required: false })\n  @IsOptional()\n  @IsString()\n  discord_webhook?: string;\n\n  @ApiProperty({ description: \"Dark mode preference\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  dark_mode?: boolean;\n}\n\nexport class ProfileResponseDto {\n  @ApiProperty({ description: \"User ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User full name\" })\n  full_name: string;\n\n  @ApiProperty({ description: \"Email notifications enabled\" })\n  email_notifications: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\" })\n  telegram_handle: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\" })\n  discord_webhook: string;\n\n  @ApiProperty({ description: \"Dark mode enabled\" })\n  dark_mode: boolean;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n\n  @ApiProperty({ description: \"Subscription status\" })\n  subscription_status: string;\n\n  @ApiProperty({ description: \"Subscription expiry date\" })\n  subscription_expires_at: string | null;\n\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updated_at: string;\n}\n\nexport class UsageResponseDto {\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n}\n\nexport class CreateWalletDto {\n  @ApiProperty({ description: \"Wallet address\" })\n  @IsString()\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  @IsNumber()\n  chainId: number;\n\n  @ApiProperty({ description: \"Wallet type\", required: false })\n  @IsOptional()\n  @IsString()\n  walletType?: string;\n\n  @ApiProperty({ description: \"Chain type\", required: false })\n  @IsOptional()\n  @IsString()\n  chainType?: string;\n\n  @ApiProperty({ description: \"Additional metadata\", required: false })\n  @IsOptional()\n  metadata?: Record;\n}\n\nexport class WalletResponseDto {\n  @ApiProperty({ description: \"Wallet ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Wallet type\" })\n  walletType: string;\n\n  @ApiProperty({ description: \"Chain type\" })\n  chainType: string;\n\n  @ApiProperty({ description: \"Additional metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updatedAt: string;\n}\n\nexport class WalletTransactionResponseDto {\n  @ApiProperty({ description: \"Transaction ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Transaction hash\" })\n  transactionHash: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Transaction type\" })\n  type: string;\n\n  @ApiProperty({ description: \"Amount\" })\n  amount: string;\n\n  @ApiProperty({ description: \"Token symbol\" })\n  symbol: string;\n\n  @ApiProperty({ description: \"Transaction metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateWorkflowDto.html":{"url":"classes/CreateWorkflowDto.html","title":"class - CreateWorkflowDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateWorkflowDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workflows/dto/workflow.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                edges\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                nodes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the workflow', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Workflow edges configuration'})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the workflow'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Workflow nodes configuration'})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class CreateWorkflowDto {\n  @ApiProperty({ description: \"Name of the workflow\" })\n  @IsString()\n  name: string;\n\n  @ApiProperty({ description: \"Description of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\" })\n  @IsArray()\n  nodes: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\" })\n  @IsArray()\n  edges: Record[];\n}\n\nexport class UpdateWorkflowDto {\n  @ApiProperty({ description: \"Name of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ description: \"Description of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\", required: false })\n  @IsOptional()\n  @IsArray()\n  nodes?: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\", required: false })\n  @IsOptional()\n  @IsArray()\n  edges?: Record[];\n}\n\nexport class WorkflowDto {\n  @ApiProperty({ description: \"Unique identifier for the workflow\" })\n  id: string;\n\n  @ApiProperty({ description: \"Name of the workflow\" })\n  name: string;\n\n  @ApiProperty({ description: \"Description of the workflow\" })\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\" })\n  nodes: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\" })\n  edges: Record[];\n\n  @ApiProperty({ description: \"User ID who created the workflow\" })\n  userId: string;\n}\n\nexport class PaginatedWorkflowsResponseDto {\n  @ApiProperty({ type: [WorkflowDto] })\n  data: WorkflowDto[];\n\n  @ApiProperty()\n  total: number;\n\n  @ApiProperty()\n  page: number;\n\n  @ApiProperty()\n  limit: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomBlockConfigField.html":{"url":"interfaces/CustomBlockConfigField.html","title":"interface - CustomBlockConfigField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomBlockConfigField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for custom block configuration fields\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            defaultValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            options\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            placeholder\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            required\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        defaultValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        options\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        options:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placeholder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placeholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        required\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        required:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NodeCategory } from './categories';\n\n/**\n * Data types for inputs/outputs\n */\nexport enum DataType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  OBJECT = \"object\",\n  ARRAY = \"array\",\n  ANY = \"any\",\n}\n\n/**\n * Logic execution types for custom blocks\n */\nexport enum ExecutionType {\n  FUNCTION = \"function\",\n  CODE = \"code\",\n  WEBHOOK = \"webhook\",\n}\n\n/**\n * Logic types for custom block execution\n */\nexport enum LogicType {\n  JAVASCRIPT = \"javascript\",\n  TYPESCRIPT = \"typescript\",\n  PYTHON = \"python\",\n  REST_API = \"rest-api\",\n  // Add these to match worker implementation\n  JSON_TRANSFORM = \"json-transform\",\n  TEMPLATE = \"template\",\n  CONDITION = \"condition\",\n}\n\n/**\n * Interface for custom block input parameters\n */\nexport interface CustomBlockInput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Interface for custom block output parameters\n */\nexport interface CustomBlockOutput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n}\n\n/**\n * Interface for custom block configuration fields\n */\nexport interface CustomBlockConfigField {\n  name: string;\n  label: string;\n  type: string;\n  defaultValue?: any;\n  options?: string[];\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n}\n\n/**\n * Block parameter definition\n */\nexport interface BlockParameter {\n  name: string;\n  type: DataType;\n  description: string;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Custom block definition\n */\nexport interface CustomBlockDefinition {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  tags?: string[];\n}\n\n/**\n * Interface for AI-generated custom block data\n */\nexport interface AICustomBlockData {\n  name: string;\n  description: string;\n  category: string;\n  inputs: CustomBlockInput[];\n  outputs: CustomBlockOutput[];\n  configFields: CustomBlockConfigField[];\n  code: string;\n}\n\n/**\n * Complete custom block data with all properties\n */\nexport interface CustomBlockData {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  isPublic: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  version?: string;\n  rating?: number;\n  downloads?: number;\n}\n\n/**\n * Result of custom block execution\n */\nexport interface CustomBlockExecutionResult {\n  success: boolean;\n  outputs?: Record;\n  error?: string;\n  logs?: string[];\n}\n\n/**\n * Helper function to create a block parameter\n */\nexport function createParameter(name: string, type: DataType, description: string, required = true, defaultValue?: any): BlockParameter {\n  return {\n    name,\n    type,\n    description,\n    required,\n    defaultValue,\n  };\n}\n\n/**\n * Helper function to create a custom block definition\n */\nexport function createCustomBlockDefinition(options: {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n}): CustomBlockDefinition {\n  return {\n    ...options,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomBlockData.html":{"url":"interfaces/CustomBlockData.html","title":"interface - CustomBlockData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomBlockData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n        \n\n\n            \n                Description\n            \n            \n                Complete custom block data with all properties\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            downloads\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            inputs\n                                        \n                                \n                                \n                                        \n                                            isPublic\n                                        \n                                \n                                \n                                        \n                                            logicType\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            outputs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            rating\n                                        \n                                \n                                \n                                        \n                                            tags\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         NodeCategory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeCategory\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        downloads\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        downloads:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:         BlockParameter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlockParameter[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isPublic\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPublic:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logicType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logicType:         LogicType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LogicType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:         BlockParameter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlockParameter[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rating\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rating:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NodeCategory } from './categories';\n\n/**\n * Data types for inputs/outputs\n */\nexport enum DataType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  OBJECT = \"object\",\n  ARRAY = \"array\",\n  ANY = \"any\",\n}\n\n/**\n * Logic execution types for custom blocks\n */\nexport enum ExecutionType {\n  FUNCTION = \"function\",\n  CODE = \"code\",\n  WEBHOOK = \"webhook\",\n}\n\n/**\n * Logic types for custom block execution\n */\nexport enum LogicType {\n  JAVASCRIPT = \"javascript\",\n  TYPESCRIPT = \"typescript\",\n  PYTHON = \"python\",\n  REST_API = \"rest-api\",\n  // Add these to match worker implementation\n  JSON_TRANSFORM = \"json-transform\",\n  TEMPLATE = \"template\",\n  CONDITION = \"condition\",\n}\n\n/**\n * Interface for custom block input parameters\n */\nexport interface CustomBlockInput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Interface for custom block output parameters\n */\nexport interface CustomBlockOutput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n}\n\n/**\n * Interface for custom block configuration fields\n */\nexport interface CustomBlockConfigField {\n  name: string;\n  label: string;\n  type: string;\n  defaultValue?: any;\n  options?: string[];\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n}\n\n/**\n * Block parameter definition\n */\nexport interface BlockParameter {\n  name: string;\n  type: DataType;\n  description: string;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Custom block definition\n */\nexport interface CustomBlockDefinition {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  tags?: string[];\n}\n\n/**\n * Interface for AI-generated custom block data\n */\nexport interface AICustomBlockData {\n  name: string;\n  description: string;\n  category: string;\n  inputs: CustomBlockInput[];\n  outputs: CustomBlockOutput[];\n  configFields: CustomBlockConfigField[];\n  code: string;\n}\n\n/**\n * Complete custom block data with all properties\n */\nexport interface CustomBlockData {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  isPublic: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  version?: string;\n  rating?: number;\n  downloads?: number;\n}\n\n/**\n * Result of custom block execution\n */\nexport interface CustomBlockExecutionResult {\n  success: boolean;\n  outputs?: Record;\n  error?: string;\n  logs?: string[];\n}\n\n/**\n * Helper function to create a block parameter\n */\nexport function createParameter(name: string, type: DataType, description: string, required = true, defaultValue?: any): BlockParameter {\n  return {\n    name,\n    type,\n    description,\n    required,\n    defaultValue,\n  };\n}\n\n/**\n * Helper function to create a custom block definition\n */\nexport function createCustomBlockDefinition(options: {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n}): CustomBlockDefinition {\n  return {\n    ...options,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomBlockDefinition.html":{"url":"interfaces/CustomBlockDefinition.html","title":"interface - CustomBlockDefinition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomBlockDefinition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom block definition\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            inputs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isPublic\n                                        \n                                \n                                \n                                        \n                                            logicType\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            outputs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tags\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         NodeCategory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeCategory\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        inputs:         BlockParameter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlockParameter[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isPublic\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPublic:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logicType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logicType:         LogicType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LogicType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:         BlockParameter[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlockParameter[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NodeCategory } from './categories';\n\n/**\n * Data types for inputs/outputs\n */\nexport enum DataType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  OBJECT = \"object\",\n  ARRAY = \"array\",\n  ANY = \"any\",\n}\n\n/**\n * Logic execution types for custom blocks\n */\nexport enum ExecutionType {\n  FUNCTION = \"function\",\n  CODE = \"code\",\n  WEBHOOK = \"webhook\",\n}\n\n/**\n * Logic types for custom block execution\n */\nexport enum LogicType {\n  JAVASCRIPT = \"javascript\",\n  TYPESCRIPT = \"typescript\",\n  PYTHON = \"python\",\n  REST_API = \"rest-api\",\n  // Add these to match worker implementation\n  JSON_TRANSFORM = \"json-transform\",\n  TEMPLATE = \"template\",\n  CONDITION = \"condition\",\n}\n\n/**\n * Interface for custom block input parameters\n */\nexport interface CustomBlockInput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Interface for custom block output parameters\n */\nexport interface CustomBlockOutput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n}\n\n/**\n * Interface for custom block configuration fields\n */\nexport interface CustomBlockConfigField {\n  name: string;\n  label: string;\n  type: string;\n  defaultValue?: any;\n  options?: string[];\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n}\n\n/**\n * Block parameter definition\n */\nexport interface BlockParameter {\n  name: string;\n  type: DataType;\n  description: string;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Custom block definition\n */\nexport interface CustomBlockDefinition {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  tags?: string[];\n}\n\n/**\n * Interface for AI-generated custom block data\n */\nexport interface AICustomBlockData {\n  name: string;\n  description: string;\n  category: string;\n  inputs: CustomBlockInput[];\n  outputs: CustomBlockOutput[];\n  configFields: CustomBlockConfigField[];\n  code: string;\n}\n\n/**\n * Complete custom block data with all properties\n */\nexport interface CustomBlockData {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  isPublic: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  version?: string;\n  rating?: number;\n  downloads?: number;\n}\n\n/**\n * Result of custom block execution\n */\nexport interface CustomBlockExecutionResult {\n  success: boolean;\n  outputs?: Record;\n  error?: string;\n  logs?: string[];\n}\n\n/**\n * Helper function to create a block parameter\n */\nexport function createParameter(name: string, type: DataType, description: string, required = true, defaultValue?: any): BlockParameter {\n  return {\n    name,\n    type,\n    description,\n    required,\n    defaultValue,\n  };\n}\n\n/**\n * Helper function to create a custom block definition\n */\nexport function createCustomBlockDefinition(options: {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n}): CustomBlockDefinition {\n  return {\n    ...options,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomBlockExecutionResult.html":{"url":"interfaces/CustomBlockExecutionResult.html","title":"interface - CustomBlockExecutionResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomBlockExecutionResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n        \n\n\n            \n                Description\n            \n            \n                Result of custom block execution\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            error\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            logs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            outputs\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        outputs:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NodeCategory } from './categories';\n\n/**\n * Data types for inputs/outputs\n */\nexport enum DataType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  OBJECT = \"object\",\n  ARRAY = \"array\",\n  ANY = \"any\",\n}\n\n/**\n * Logic execution types for custom blocks\n */\nexport enum ExecutionType {\n  FUNCTION = \"function\",\n  CODE = \"code\",\n  WEBHOOK = \"webhook\",\n}\n\n/**\n * Logic types for custom block execution\n */\nexport enum LogicType {\n  JAVASCRIPT = \"javascript\",\n  TYPESCRIPT = \"typescript\",\n  PYTHON = \"python\",\n  REST_API = \"rest-api\",\n  // Add these to match worker implementation\n  JSON_TRANSFORM = \"json-transform\",\n  TEMPLATE = \"template\",\n  CONDITION = \"condition\",\n}\n\n/**\n * Interface for custom block input parameters\n */\nexport interface CustomBlockInput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Interface for custom block output parameters\n */\nexport interface CustomBlockOutput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n}\n\n/**\n * Interface for custom block configuration fields\n */\nexport interface CustomBlockConfigField {\n  name: string;\n  label: string;\n  type: string;\n  defaultValue?: any;\n  options?: string[];\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n}\n\n/**\n * Block parameter definition\n */\nexport interface BlockParameter {\n  name: string;\n  type: DataType;\n  description: string;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Custom block definition\n */\nexport interface CustomBlockDefinition {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  tags?: string[];\n}\n\n/**\n * Interface for AI-generated custom block data\n */\nexport interface AICustomBlockData {\n  name: string;\n  description: string;\n  category: string;\n  inputs: CustomBlockInput[];\n  outputs: CustomBlockOutput[];\n  configFields: CustomBlockConfigField[];\n  code: string;\n}\n\n/**\n * Complete custom block data with all properties\n */\nexport interface CustomBlockData {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  isPublic: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  version?: string;\n  rating?: number;\n  downloads?: number;\n}\n\n/**\n * Result of custom block execution\n */\nexport interface CustomBlockExecutionResult {\n  success: boolean;\n  outputs?: Record;\n  error?: string;\n  logs?: string[];\n}\n\n/**\n * Helper function to create a block parameter\n */\nexport function createParameter(name: string, type: DataType, description: string, required = true, defaultValue?: any): BlockParameter {\n  return {\n    name,\n    type,\n    description,\n    required,\n    defaultValue,\n  };\n}\n\n/**\n * Helper function to create a custom block definition\n */\nexport function createCustomBlockDefinition(options: {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n}): CustomBlockDefinition {\n  return {\n    ...options,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomBlockInput.html":{"url":"interfaces/CustomBlockInput.html","title":"interface - CustomBlockInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomBlockInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for custom block input parameters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dataType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            defaultValue\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            required\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataType:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        defaultValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        defaultValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        required\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        required:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NodeCategory } from './categories';\n\n/**\n * Data types for inputs/outputs\n */\nexport enum DataType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  OBJECT = \"object\",\n  ARRAY = \"array\",\n  ANY = \"any\",\n}\n\n/**\n * Logic execution types for custom blocks\n */\nexport enum ExecutionType {\n  FUNCTION = \"function\",\n  CODE = \"code\",\n  WEBHOOK = \"webhook\",\n}\n\n/**\n * Logic types for custom block execution\n */\nexport enum LogicType {\n  JAVASCRIPT = \"javascript\",\n  TYPESCRIPT = \"typescript\",\n  PYTHON = \"python\",\n  REST_API = \"rest-api\",\n  // Add these to match worker implementation\n  JSON_TRANSFORM = \"json-transform\",\n  TEMPLATE = \"template\",\n  CONDITION = \"condition\",\n}\n\n/**\n * Interface for custom block input parameters\n */\nexport interface CustomBlockInput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Interface for custom block output parameters\n */\nexport interface CustomBlockOutput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n}\n\n/**\n * Interface for custom block configuration fields\n */\nexport interface CustomBlockConfigField {\n  name: string;\n  label: string;\n  type: string;\n  defaultValue?: any;\n  options?: string[];\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n}\n\n/**\n * Block parameter definition\n */\nexport interface BlockParameter {\n  name: string;\n  type: DataType;\n  description: string;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Custom block definition\n */\nexport interface CustomBlockDefinition {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  tags?: string[];\n}\n\n/**\n * Interface for AI-generated custom block data\n */\nexport interface AICustomBlockData {\n  name: string;\n  description: string;\n  category: string;\n  inputs: CustomBlockInput[];\n  outputs: CustomBlockOutput[];\n  configFields: CustomBlockConfigField[];\n  code: string;\n}\n\n/**\n * Complete custom block data with all properties\n */\nexport interface CustomBlockData {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  isPublic: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  version?: string;\n  rating?: number;\n  downloads?: number;\n}\n\n/**\n * Result of custom block execution\n */\nexport interface CustomBlockExecutionResult {\n  success: boolean;\n  outputs?: Record;\n  error?: string;\n  logs?: string[];\n}\n\n/**\n * Helper function to create a block parameter\n */\nexport function createParameter(name: string, type: DataType, description: string, required = true, defaultValue?: any): BlockParameter {\n  return {\n    name,\n    type,\n    description,\n    required,\n    defaultValue,\n  };\n}\n\n/**\n * Helper function to create a custom block definition\n */\nexport function createCustomBlockDefinition(options: {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n}): CustomBlockDefinition {\n  return {\n    ...options,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomBlockOutput.html":{"url":"interfaces/CustomBlockOutput.html","title":"interface - CustomBlockOutput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomBlockOutput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for custom block output parameters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dataType\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            required\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dataType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataType:         DataType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        required\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        required:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { NodeCategory } from './categories';\n\n/**\n * Data types for inputs/outputs\n */\nexport enum DataType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  OBJECT = \"object\",\n  ARRAY = \"array\",\n  ANY = \"any\",\n}\n\n/**\n * Logic execution types for custom blocks\n */\nexport enum ExecutionType {\n  FUNCTION = \"function\",\n  CODE = \"code\",\n  WEBHOOK = \"webhook\",\n}\n\n/**\n * Logic types for custom block execution\n */\nexport enum LogicType {\n  JAVASCRIPT = \"javascript\",\n  TYPESCRIPT = \"typescript\",\n  PYTHON = \"python\",\n  REST_API = \"rest-api\",\n  // Add these to match worker implementation\n  JSON_TRANSFORM = \"json-transform\",\n  TEMPLATE = \"template\",\n  CONDITION = \"condition\",\n}\n\n/**\n * Interface for custom block input parameters\n */\nexport interface CustomBlockInput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Interface for custom block output parameters\n */\nexport interface CustomBlockOutput {\n  name: string;\n  description: string;\n  dataType: DataType;\n  required: boolean;\n}\n\n/**\n * Interface for custom block configuration fields\n */\nexport interface CustomBlockConfigField {\n  name: string;\n  label: string;\n  type: string;\n  defaultValue?: any;\n  options?: string[];\n  required?: boolean;\n  placeholder?: string;\n  description?: string;\n}\n\n/**\n * Block parameter definition\n */\nexport interface BlockParameter {\n  name: string;\n  type: DataType;\n  description: string;\n  required: boolean;\n  defaultValue?: any;\n}\n\n/**\n * Custom block definition\n */\nexport interface CustomBlockDefinition {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  tags?: string[];\n}\n\n/**\n * Interface for AI-generated custom block data\n */\nexport interface AICustomBlockData {\n  name: string;\n  description: string;\n  category: string;\n  inputs: CustomBlockInput[];\n  outputs: CustomBlockOutput[];\n  configFields: CustomBlockConfigField[];\n  code: string;\n}\n\n/**\n * Complete custom block data with all properties\n */\nexport interface CustomBlockData {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  code: string;\n  logicType: LogicType;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  isPublic: boolean;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  version?: string;\n  rating?: number;\n  downloads?: number;\n}\n\n/**\n * Result of custom block execution\n */\nexport interface CustomBlockExecutionResult {\n  success: boolean;\n  outputs?: Record;\n  error?: string;\n  logs?: string[];\n}\n\n/**\n * Helper function to create a block parameter\n */\nexport function createParameter(name: string, type: DataType, description: string, required = true, defaultValue?: any): BlockParameter {\n  return {\n    name,\n    type,\n    description,\n    required,\n    defaultValue,\n  };\n}\n\n/**\n * Helper function to create a custom block definition\n */\nexport function createCustomBlockDefinition(options: {\n  id: string;\n  name: string;\n  description: string;\n  category: NodeCategory;\n  inputs: BlockParameter[];\n  outputs: BlockParameter[];\n  code: string;\n  logicType: LogicType;\n  isPublic?: boolean;\n  createdBy?: string;\n}): CustomBlockDefinition {\n  return {\n    ...options,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DashboardController.html":{"url":"controllers/DashboardController.html","title":"controller - DashboardController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DashboardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dashboard.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                dashboard\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getMetrics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getMetrics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMetrics(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('metrics')@ApiOperation({summary: 'Get dashboard metrics'})@ApiResponse({status: 200, description: 'Returns dashboard metrics'})\n                \n            \n\n                    \n                        \n                            Defined in src/dashboard/dashboard.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards, Request } from \"@nestjs/common\";\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from \"@nestjs/swagger\";\nimport { DashboardService } from \"./dashboard.service\";\n\n@ApiTags(\"dashboard\")\n@Controller(\"dashboard\")\n@ApiBearerAuth()\nexport class DashboardController {\n  constructor(private readonly dashboardService: DashboardService) {}\n\n  @Get(\"metrics\")\n  @ApiOperation({ summary: \"Get dashboard metrics\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Returns dashboard metrics\",\n  })\n  async getMetrics(@Request() req: { user?: { id: string } }) {\n    const userId = req.user?.id || \"user1\";\n    return this.dashboardService.getMetrics(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DashboardModule.html":{"url":"modules/DashboardModule.html","title":"module - DashboardModule","body":"\n                   \n\n\n\n\n    Modules\n    DashboardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DashboardModule\n\n\n\ncluster_DashboardModule_exports\n\n\n\ncluster_DashboardModule_providers\n\n\n\n\nDashboardService \n\nDashboardService \n\n\n\nDashboardModule\n\nDashboardModule\n\nDashboardService  -->\n\nDashboardModule->DashboardService \n\n\n\n\n\nDashboardService\n\nDashboardService\n\nDashboardModule -->\n\nDashboardService->DashboardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dashboard/dashboard.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DashboardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DashboardController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DashboardService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { DashboardController } from \"./dashboard.controller\";\nimport { DashboardService } from \"./dashboard.service\";\n\n@Module({\n  controllers: [DashboardController],\n  providers: [DashboardService],\n  exports: [DashboardService],\n})\nexport class DashboardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DashboardService.html":{"url":"injectables/DashboardService.html","title":"injectable - DashboardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DashboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dashboard/dashboard.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getMetrics\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(executionRepository: ExecutionRepository, workflowRepository: WorkflowRepository)\n                    \n                \n                        \n                            \n                                Defined in src/dashboard/dashboard.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        executionRepository\n                                                  \n                                                        \n                                                                        ExecutionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        workflowRepository\n                                                  \n                                                        \n                                                                        WorkflowRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMetrics\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMetrics(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dashboard/dashboard.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ExecutionRepository, WorkflowRepository } from \"@zyra/database\";\nimport type { WorkflowExecution } from \"@zyra/database\";\n\nfunction formatDuration(ms: number): string {\n  const seconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const remainingSeconds = seconds % 60;\n  return `${minutes}m ${remainingSeconds}s`;\n}\n\n@Injectable()\nexport class DashboardService {\n  constructor(\n    private readonly executionRepository: ExecutionRepository,\n    private readonly workflowRepository: WorkflowRepository\n  ) {}\n\n  async getMetrics(userId: string) {\n    const now = new Date();\n    const oneWeekAgo = new Date(now);\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    const twoWeeksAgo = new Date(oneWeekAgo);\n    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 7);\n\n    // Get all executions for the user (limit to a reasonable number for dashboard)\n    const allExecutions: WorkflowExecution[] =\n      await this.executionRepository.findByUserId(userId, 1000);\n    const executionsLastWeek: WorkflowExecution[] = allExecutions.filter(\n      (e: WorkflowExecution) =>\n        e.startedAt &&\n        new Date(e.startedAt as unknown as string) >= oneWeekAgo &&\n        new Date(e.startedAt as unknown as string) \n        e.startedAt &&\n        new Date(e.startedAt as unknown as string) >= twoWeeksAgo &&\n        new Date(e.startedAt as unknown as string)  e.workflowId)\n    );\n    const activeWorkflows = workflowIdsWithExecutions.size;\n\n    // Success rate and totals for last week\n    const successfulExecutions = executionsLastWeek.filter(\n      (e: WorkflowExecution) => e.status === \"completed\"\n    ).length;\n    const failedExecutions = executionsLastWeek.filter(\n      (e: WorkflowExecution) => e.status === \"failed\"\n    ).length;\n    const runningExecutions = executionsLastWeek.filter(\n      (e: WorkflowExecution) => e.status === \"running\"\n    ).length;\n    const totalExecutions = executionsLastWeek.length;\n    const successRate =\n      totalExecutions > 0\n        ? Math.round((successfulExecutions / totalExecutions) * 10000) / 100\n        : 0;\n\n    // Average duration for completed executions last week\n    let totalDurationMs = 0;\n    let completedWithDuration = 0;\n    for (const exec of executionsLastWeek) {\n      if (exec.status === \"completed\" && exec.startedAt && exec.finishedAt) {\n        const duration =\n          new Date(\n            (exec.finishedAt as unknown as Date).toISOString()\n          ).getTime() -\n          new Date((exec.startedAt as unknown as Date).toISOString()).getTime();\n        totalDurationMs += duration;\n        completedWithDuration++;\n      }\n    }\n    const avgDurationMs =\n      completedWithDuration > 0\n        ? Math.round(totalDurationMs / completedWithDuration)\n        : 0;\n\n    // Previous week metrics\n    const prevSuccessfulExecutions = executionsPrevWeek.filter(\n      (e: WorkflowExecution) => e.status === \"completed\"\n    ).length;\n    const prevTotalExecutions = executionsPrevWeek.length;\n    const prevSuccessRate =\n      prevTotalExecutions > 0\n        ? Math.round((prevSuccessfulExecutions / prevTotalExecutions) * 10000) /\n          100\n        : 0;\n    let prevTotalDurationMs = 0;\n    let prevCompletedWithDuration = 0;\n    for (const exec of executionsPrevWeek) {\n      if (exec.status === \"completed\" && exec.startedAt && exec.finishedAt) {\n        const duration =\n          new Date(\n            (exec.finishedAt as unknown as Date).toISOString()\n          ).getTime() -\n          new Date((exec.startedAt as unknown as Date).toISOString()).getTime();\n        prevTotalDurationMs += duration;\n        prevCompletedWithDuration++;\n      }\n    }\n    const prevAvgDurationMs =\n      prevCompletedWithDuration > 0\n        ? Math.round(prevTotalDurationMs / prevCompletedWithDuration)\n        : 0;\n\n    // Calculate changes from last week\n    const executionChange =\n      prevTotalExecutions > 0\n        ? Math.round(\n            ((totalExecutions - prevTotalExecutions) / prevTotalExecutions) *\n              100\n          )\n        : 0;\n    const durationChange =\n      prevAvgDurationMs > 0\n        ? Math.round(\n            ((avgDurationMs - prevAvgDurationMs) / prevAvgDurationMs) * 100\n          )\n        : 0;\n    const successRateChange =\n      prevSuccessRate > 0\n        ? Math.round((successRate - prevSuccessRate) * 100) / 100\n        : 0;\n\n    return {\n      successRate,\n      totalExecutions,\n      averageDuration: formatDuration(avgDurationMs),\n      rawAverageDurationMs: avgDurationMs,\n      activeWorkflows,\n      changeFromLastWeek: {\n        successRate: successRateChange,\n        totalExecutions: executionChange,\n        averageDuration: durationChange,\n      },\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_DatabaseModule_exports\n\n\n\n\nExecutionRepository \n\nExecutionRepository \n\n\n\nNotificationRepository \n\nNotificationRepository \n\n\n\nPrismaService \n\nPrismaService \n\n\n\nUserRepository \n\nUserRepository \n\n\n\nWalletRepository \n\nWalletRepository \n\n\n\nWorkflowRepository \n\nWorkflowRepository \n\n\n\nDatabaseModule\n\nDatabaseModule\n\nExecutionRepository  -->\n\nDatabaseModule->ExecutionRepository \n\n\n\nNotificationRepository  -->\n\nDatabaseModule->NotificationRepository \n\n\n\nPrismaService  -->\n\nDatabaseModule->PrismaService \n\n\n\nUserRepository  -->\n\nDatabaseModule->UserRepository \n\n\n\nWalletRepository  -->\n\nDatabaseModule->WalletRepository \n\n\n\nWorkflowRepository  -->\n\nDatabaseModule->WorkflowRepository \n\n\n\n\n\nExecutionRepository\n\nExecutionRepository\n\nDatabaseModule -->\n\nExecutionRepository->DatabaseModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDatabaseModule -->\n\nPrismaService->DatabaseModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nDatabaseModule -->\n\nUserRepository->DatabaseModule\n\n\n\n\n\nWorkflowRepository\n\nWorkflowRepository\n\nDatabaseModule -->\n\nWorkflowRepository->DatabaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExecutionRepository\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserRepository\n                        \n                        \n                            WorkflowRepository\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExecutionRepository\n                        \n                        \n                            NotificationRepository\n                        \n                        \n                            PrismaService\n                        \n                        \n                            UserRepository\n                        \n                        \n                            WalletRepository\n                        \n                        \n                            WorkflowRepository\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, Global } from \"@nestjs/common\";\nimport { PrismaService } from \"./prisma.service\";\nimport {\n  UserRepository,\n  WorkflowRepository,\n  ExecutionRepository,\n  WalletRepository,\n  NotificationRepository,\n} from \"@zyra/database\";\n\n@Global()\n@Module({\n  providers: [\n    PrismaService,\n    UserRepository,\n    WorkflowRepository,\n    ExecutionRepository,\n    WalletRepository,\n    NotificationRepository,\n  ],\n  exports: [\n    PrismaService,\n    UserRepository,\n    WorkflowRepository,\n    ExecutionRepository,\n    WalletRepository,\n    NotificationRepository,\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExecuteWorkflowDto.html":{"url":"classes/ExecuteWorkflowDto.html","title":"class - ExecuteWorkflowDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExecuteWorkflowDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workflows/dto/execute-workflow.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                cronExpression\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                input\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                scheduledTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        cronExpression\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Cron expression for recurring executions (alternative to scheduledTime)', example: '0 9 * * 1-5', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/execute-workflow.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Input data for the workflow execution', example: undefined, required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/execute-workflow.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        scheduledTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ISO 8601 date string for when to execute the workflow. If not provided, executes immediately.', example: '2024-12-25T10:00:00.000Z', required: false})@IsOptional()@IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/execute-workflow.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsDateString, IsString } from \"class-validator\";\n\nexport class ExecuteWorkflowDto {\n  @ApiProperty({\n    description:\n      \"ISO 8601 date string for when to execute the workflow. If not provided, executes immediately.\",\n    example: \"2024-12-25T10:00:00.000Z\",\n    required: false,\n  })\n  @IsOptional()\n  @IsDateString()\n  scheduledTime?: string;\n\n  @ApiProperty({\n    description:\n      \"Cron expression for recurring executions (alternative to scheduledTime)\",\n    example: \"0 9 * * 1-5\", // Every weekday at 9 AM\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  cronExpression?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    example: { key: \"value\" },\n    required: false,\n  })\n  @IsOptional()\n  input?: Record;\n}\n\nexport class ExecuteWorkflowResponseDto {\n  @ApiProperty({\n    description: \"The unique identifier for the execution\",\n    example: \"exec_1234567890_abcdef123\",\n  })\n  executionId: string;\n\n  @ApiProperty({\n    description: \"Whether the execution was scheduled or started immediately\",\n    example: \"scheduled\",\n    enum: [\"immediate\", \"scheduled\", \"recurring\"],\n  })\n  status: \"immediate\" | \"scheduled\" | \"recurring\";\n\n  @ApiProperty({\n    description: \"When the execution is scheduled to run (if scheduled)\",\n    example: \"2024-12-25T10:00:00.000Z\",\n    required: false,\n  })\n  scheduledTime?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExecuteWorkflowResponseDto.html":{"url":"classes/ExecuteWorkflowResponseDto.html","title":"class - ExecuteWorkflowResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExecuteWorkflowResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workflows/dto/execute-workflow.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                executionId\n                            \n                            \n                                    \n                                    Optional\n                                scheduledTime\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        executionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier for the execution', example: 'exec_1234567890_abcdef123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/execute-workflow.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scheduledTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'When the execution is scheduled to run (if scheduled)', example: '2024-12-25T10:00:00.000Z', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/execute-workflow.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"immediate\" | \"scheduled\" | \"recurring\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the execution was scheduled or started immediately', example: 'scheduled', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/execute-workflow.dto.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsDateString, IsString } from \"class-validator\";\n\nexport class ExecuteWorkflowDto {\n  @ApiProperty({\n    description:\n      \"ISO 8601 date string for when to execute the workflow. If not provided, executes immediately.\",\n    example: \"2024-12-25T10:00:00.000Z\",\n    required: false,\n  })\n  @IsOptional()\n  @IsDateString()\n  scheduledTime?: string;\n\n  @ApiProperty({\n    description:\n      \"Cron expression for recurring executions (alternative to scheduledTime)\",\n    example: \"0 9 * * 1-5\", // Every weekday at 9 AM\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  cronExpression?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    example: { key: \"value\" },\n    required: false,\n  })\n  @IsOptional()\n  input?: Record;\n}\n\nexport class ExecuteWorkflowResponseDto {\n  @ApiProperty({\n    description: \"The unique identifier for the execution\",\n    example: \"exec_1234567890_abcdef123\",\n  })\n  executionId: string;\n\n  @ApiProperty({\n    description: \"Whether the execution was scheduled or started immediately\",\n    example: \"scheduled\",\n    enum: [\"immediate\", \"scheduled\", \"recurring\"],\n  })\n  status: \"immediate\" | \"scheduled\" | \"recurring\";\n\n  @ApiProperty({\n    description: \"When the execution is scheduled to run (if scheduled)\",\n    example: \"2024-12-25T10:00:00.000Z\",\n    required: false,\n  })\n  scheduledTime?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExecutionActionDto.html":{"url":"classes/ExecutionActionDto.html","title":"class - ExecutionActionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExecutionActionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                nodeId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/executions/dto/execution.dto.ts:214\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nodeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional node ID for targeted actions', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:214\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExecutionActionResponseDto.html":{"url":"classes/ExecutionActionResponseDto.html","title":"class - ExecutionActionResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExecutionActionResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                success\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/executions/dto/execution.dto.ts:228\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Response message'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:228\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        success\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether the action was successful'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:225\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExecutionLog.html":{"url":"interfaces/ExecutionLog.html","title":"interface - ExecutionLog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExecutionLog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts\n        \n\n\n            \n                Description\n            \n            \n                Execution log record\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            execution_id\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            node_id\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        execution_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        execution_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ExecutionStatus = \"pending\" | \"running\" | \"completed\" | \"failed\";\n\n/**\n * Execution log record\n */\nexport interface ExecutionLog {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  level: string;\n  message: string;\n  data?: any;\n  timestamp: string;\n}\n\n/**\n * Node execution record\n */\nexport interface NodeExecution {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n}\n\n/**\n * Complete workflow execution result\n */\nexport interface ExecutionResult {\n  id: string;\n  workflow_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n  result?: any;\n  logs: ExecutionLog[];\n  nodeExecutions: NodeExecution[];\n}\n\n/**\n * Context provided to block handlers during execution\n */\nexport interface BlockExecutionContext {\n  nodeId: string;\n  executionId: string;\n  workflowId: string;\n  userId: string;\n  inputs: Record;\n  previousOutputs?: Record;\n  config: Record;\n  // Added workflowData field that many handlers use\n  workflowData?: Record;\n  logger: {\n    // Added log method for compatibility with worker implementation\n    log: (message: string, data?: any) => void;\n    debug: (message: string, data?: any) => void;\n    info: (message: string, data?: any) => void;\n    warn: (message: string, data?: any) => void;\n    error: (message: string, data?: any) => void;\n  };\n  // Used by custom blocks to access additional services\n  services?: Record;\n}\n\n/**\n * Interface for block handlers that execute workflow nodes\n */\nexport interface BlockHandler {\n  // Updated signature to match worker implementation with 2 parameters\n  execute(node: any, context: BlockExecutionContext): Promise>;\n  validate?(config: Record): boolean;\n  getDefaultConfig?(): Record;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExecutionRepository.html":{"url":"injectables/ExecutionRepository.html","title":"injectable - ExecutionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExecutionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/repositories/execution.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createExecution\n                            \n                            \n                                    Async\n                                findByUserId\n                            \n                            \n                                    Async\n                                findExecutionById\n                            \n                            \n                                    Async\n                                findExecutions\n                            \n                            \n                                    Async\n                                findMany\n                            \n                            \n                                    Async\n                                findNodeExecution\n                            \n                            \n                                    Async\n                                findNodeExecutions\n                            \n                            \n                                    Async\n                                findNodeLogs\n                            \n                            \n                                    Async\n                                findWithNodesAndLogs\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateExecutionStatus\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/database/repositories/execution.repository.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createExecution\n                        \n                    \n                \n            \n            \n                \n                        \n                    createExecution(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:119\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(userId: string, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:134\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findExecutionById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findExecutionById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findExecutions\n                        \n                    \n                \n            \n            \n                \n                        \n                    findExecutions(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMany(params: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findNodeExecution\n                        \n                    \n                \n            \n            \n                \n                        \n                    findNodeExecution(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findNodeExecutions\n                        \n                    \n                \n            \n            \n                \n                        \n                    findNodeExecutions(executionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                executionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findNodeLogs\n                        \n                    \n                \n            \n            \n                \n                        \n                    findNodeLogs(nodeExecutionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nodeExecutionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findWithNodesAndLogs\n                        \n                    \n                \n            \n            \n                \n                        \n                    findWithNodesAndLogs(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateExecutionStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateExecutionStatus(id: string, status: WorkflowStatus, error?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            WorkflowStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(id: string, status: WorkflowStatus, error?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/execution.repository.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            WorkflowStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport {\n  NodeExecution,\n  NodeLog,\n  WorkflowExecution,\n  WorkflowStatus,\n} from \"@zyra/database\";\n\n@Injectable()\nexport class ExecutionRepository {\n  constructor(private prisma: PrismaService) {}\n\n  async findExecutions(params: {\n    workflowId?: string;\n    userId?: string;\n    page?: number;\n    limit?: number;\n    sortKey?: string;\n    sortOrder?: \"asc\" | \"desc\";\n  }): Promise {\n    const {\n      workflowId,\n      userId,\n      page = 1,\n      limit = 10,\n      sortKey = \"startedAt\",\n      sortOrder = \"desc\",\n    } = params;\n\n    const skip = (page - 1) * limit;\n\n    const where: any = {};\n    if (workflowId) where.workflowId = workflowId;\n    if (userId) where.userId = userId;\n\n    const [data, total] = await Promise.all([\n      this.prisma.client.workflowExecution.findMany({\n        where,\n        skip,\n        take: limit,\n        orderBy: { [sortKey]: sortOrder },\n      }),\n      this.prisma.client.workflowExecution.count({ where }),\n    ]);\n\n    return { data, total, page, limit };\n  }\n\n  async findExecutionById(id: string): Promise {\n    return this.prisma.client.workflowExecution.findUnique({\n      where: { id },\n      include: {\n        workflow: {\n          select: {\n            name: true,\n            nodes: true,\n            edges: true,\n          },\n        },\n      },\n    });\n  }\n\n  async findNodeExecutions(executionId: string): Promise {\n    return this.prisma.client.nodeExecution.findMany({\n      where: { executionId },\n      include: {\n        nodeInputs: true,\n        nodeOutputs: true,\n      },\n      orderBy: { startedAt: \"asc\" },\n    });\n  }\n\n  async findNodeExecution(id: string): Promise {\n    return this.prisma.client.nodeExecution.findUnique({\n      where: { id },\n      include: {\n        nodeInputs: true,\n        nodeOutputs: true,\n      },\n    });\n  }\n\n  async findNodeLogs(nodeExecutionId: string): Promise {\n    return this.prisma.client.nodeLog.findMany({\n      where: { nodeExecutionId },\n      orderBy: { createdAt: \"asc\" },\n    });\n  }\n\n  async updateExecutionStatus(\n    id: string,\n    status: WorkflowStatus,\n    error?: string\n  ): Promise {\n    const data: any = { status };\n\n    if (status === \"completed\" || status === \"failed\") {\n      data.finishedAt = new Date();\n    }\n\n    if (error) {\n      data.error = error;\n    }\n\n    return this.prisma.client.workflowExecution.update({\n      where: { id },\n      data,\n    });\n  }\n\n  async createExecution(data: {\n    workflowId: string;\n    userId: string;\n    status?: WorkflowStatus;\n  }): Promise {\n    return this.prisma.client.workflowExecution.create({\n      data: {\n        workflowId: data.workflowId,\n        userId: data.userId,\n        status: data.status || \"pending\",\n        startedAt: new Date(),\n      },\n    });\n  }\n\n  async findByUserId(userId: string, limit = 10): Promise {\n    return this.prisma.client.workflowExecution.findMany({\n      where: { userId },\n      take: limit,\n      orderBy: { createdAt: \"desc\" },\n    });\n  }\n\n  async findMany(params: { take?: number }): Promise {\n    return this.prisma.client.workflowExecution.findMany({\n      take: params.take || 10,\n      orderBy: { createdAt: \"desc\" },\n    });\n  }\n\n  async findWithNodesAndLogs(id: string): Promise {\n    return this.prisma.client.workflowExecution.findUnique({\n      where: { id },\n      include: {\n        nodeExecutions: {\n          include: {\n            logs: true,\n            nodeInputs: true,\n            nodeOutputs: true,\n          },\n        },\n        workflow: {\n          select: {\n            name: true,\n            nodes: true,\n            edges: true,\n          },\n        },\n      },\n    });\n  }\n\n  async update(id: string, data: any): Promise {\n    return this.prisma.client.workflowExecution.update({\n      where: { id },\n      data,\n    });\n  }\n\n  async updateStatus(\n    id: string,\n    status: WorkflowStatus,\n    error?: string\n  ): Promise {\n    return this.updateExecutionStatus(id, status, error);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExecutionResult.html":{"url":"interfaces/ExecutionResult.html","title":"interface - ExecutionResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExecutionResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts\n        \n\n\n            \n                Description\n            \n            \n                Complete workflow execution result\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            completed_at\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            logs\n                                        \n                                \n                                \n                                        \n                                            nodeExecutions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            result\n                                        \n                                \n                                \n                                        \n                                            started_at\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            workflow_id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        completed_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completed_at:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logs:         ExecutionLog[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ExecutionLog[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeExecutions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeExecutions:         NodeExecution[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeExecution[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        result:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        started_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        started_at:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        workflow_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        workflow_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ExecutionStatus = \"pending\" | \"running\" | \"completed\" | \"failed\";\n\n/**\n * Execution log record\n */\nexport interface ExecutionLog {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  level: string;\n  message: string;\n  data?: any;\n  timestamp: string;\n}\n\n/**\n * Node execution record\n */\nexport interface NodeExecution {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n}\n\n/**\n * Complete workflow execution result\n */\nexport interface ExecutionResult {\n  id: string;\n  workflow_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n  result?: any;\n  logs: ExecutionLog[];\n  nodeExecutions: NodeExecution[];\n}\n\n/**\n * Context provided to block handlers during execution\n */\nexport interface BlockExecutionContext {\n  nodeId: string;\n  executionId: string;\n  workflowId: string;\n  userId: string;\n  inputs: Record;\n  previousOutputs?: Record;\n  config: Record;\n  // Added workflowData field that many handlers use\n  workflowData?: Record;\n  logger: {\n    // Added log method for compatibility with worker implementation\n    log: (message: string, data?: any) => void;\n    debug: (message: string, data?: any) => void;\n    info: (message: string, data?: any) => void;\n    warn: (message: string, data?: any) => void;\n    error: (message: string, data?: any) => void;\n  };\n  // Used by custom blocks to access additional services\n  services?: Record;\n}\n\n/**\n * Interface for block handlers that execute workflow nodes\n */\nexport interface BlockHandler {\n  // Updated signature to match worker implementation with 2 parameters\n  execute(node: any, context: BlockExecutionContext): Promise>;\n  validate?(config: Record): boolean;\n  getDefaultConfig?(): Record;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExecutionsModule.html":{"url":"modules/ExecutionsModule.html","title":"module - ExecutionsModule","body":"\n                   \n\n\n\n\n    Modules\n    ExecutionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExecutionsModule\n\n\n\ncluster_ExecutionsModule_imports\n\n\n\ncluster_ExecutionsModule_exports\n\n\n\ncluster_ExecutionsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nExecutionsModule\n\nExecutionsModule\n\nExecutionsModule -->\n\nDatabaseModule->ExecutionsModule\n\n\n\n\n\nExecutionsService \n\nExecutionsService \n\nExecutionsService  -->\n\nExecutionsModule->ExecutionsService \n\n\n\n\n\nNodeExecutionsService \n\nNodeExecutionsService \n\nNodeExecutionsService  -->\n\nExecutionsModule->NodeExecutionsService \n\n\n\n\n\nNodeLogsService \n\nNodeLogsService \n\nNodeLogsService  -->\n\nExecutionsModule->NodeLogsService \n\n\n\n\n\nExecutionsService\n\nExecutionsService\n\nExecutionsModule -->\n\nExecutionsService->ExecutionsModule\n\n\n\n\n\nNodeExecutionsService\n\nNodeExecutionsService\n\nExecutionsModule -->\n\nNodeExecutionsService->ExecutionsModule\n\n\n\n\n\nNodeLogsService\n\nNodeLogsService\n\nExecutionsModule -->\n\nNodeLogsService->ExecutionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/executions/executions.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ExecutionsService\n                        \n                        \n                            NodeExecutionsService\n                        \n                        \n                            NodeLogsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ExecutionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ExecutionsService\n                        \n                        \n                            NodeExecutionsService\n                        \n                        \n                            NodeLogsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ExecutionsController } from \"./executions.controller\";\nimport { ExecutionsService } from \"./executions.service\";\nimport { NodeExecutionsService } from \"./node-executions.service\";\nimport { NodeLogsService } from \"./node-logs.service\";\nimport { ExecutionRepository } from \"@zyra/database\";\nimport { DatabaseModule } from \"../database/database.module\";\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [ExecutionsController],\n  providers: [\n    ExecutionsService,\n    NodeExecutionsService,\n    NodeLogsService,\n    {\n      provide: \"NODE_EXECUTIONS_REPOSITORY\",\n      useClass: ExecutionRepository,\n    },\n  ],\n  exports: [ExecutionsService, NodeExecutionsService, NodeLogsService],\n})\nexport class ExecutionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExecutionsService.html":{"url":"injectables/ExecutionsService.html","title":"injectable - ExecutionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExecutionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/executions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                cancel\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getHeatmap\n                            \n                            \n                                    Async\n                                getStats\n                            \n                            \n                                    Async\n                                getTrends\n                            \n                            \n                                    Async\n                                pause\n                            \n                            \n                                    Async\n                                resume\n                            \n                            \n                                    Async\n                                retry\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(executionRepository: ExecutionRepository)\n                    \n                \n                        \n                            \n                                Defined in src/executions/executions.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        executionRepository\n                                                  \n                                                        \n                                                                        ExecutionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cancel\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancel(id: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createExecutionDto: CreateExecutionDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createExecutionDto\n                                            \n                                                            CreateExecutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getHeatmap\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHeatmap(userId?: string, workflowId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:221\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                workflowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStats(userId?: string, workflowId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                workflowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTrends\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTrends(userId?: string, days: number, workflowId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:175\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                days\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    7\n                                            \n\n                                        \n                                        \n                                                workflowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        pause\n                        \n                    \n                \n            \n            \n                \n                        \n                    pause(id: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resume\n                        \n                    \n                \n            \n            \n                \n                        \n                    resume(id: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        retry\n                        \n                    \n                \n            \n            \n                \n                        \n                    retry(id: string, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateExecutionDto: UpdateExecutionDto, userId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/executions.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateExecutionDto\n                                            \n                                                            UpdateExecutionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { ExecutionRepository } from \"@zyra/database\";\nimport { CreateExecutionDto, UpdateExecutionDto } from \"./dto/execution.dto\";\n\n@Injectable()\nexport class ExecutionsService {\n  constructor(private readonly executionRepository: ExecutionRepository) {}\n\n  async findAll(userId: string, limit = 10): Promise {\n    return this.executionRepository.findByUserId(userId, limit);\n  }\n\n  async findOne(id: string, userId?: string) {\n    const execution = await this.executionRepository.findWithNodesAndLogs(id);\n\n    if (!execution) {\n      throw new NotFoundException(`Execution with ID ${id} not found`);\n    }\n\n    // Check access permissions - if userId is provided, verify ownership\n    if (userId && execution.userId !== userId) {\n      throw new NotFoundException(`Execution with ID ${id} not found`);\n    }\n\n    return execution;\n  }\n\n  async create(\n    createExecutionDto: CreateExecutionDto,\n    userId: string\n  ): Promise {\n    return this.executionRepository.createExecution(\n      createExecutionDto.workflowId,\n      userId,\n      createExecutionDto.input,\n      createExecutionDto.triggerType\n    );\n  }\n\n  async update(\n    id: string,\n    updateExecutionDto: UpdateExecutionDto,\n    userId?: string\n  ): Promise {\n    // Verify execution exists and user has access\n    const execution = await this.findOne(id, userId);\n\n    if (updateExecutionDto.status) {\n      return this.executionRepository.updateStatus(\n        id,\n        updateExecutionDto.status as any,\n        updateExecutionDto.error\n      );\n    }\n\n    // Convert the string status to the expected enum type\n    const updateData = {\n      ...updateExecutionDto,\n      status: updateExecutionDto.status as any, // Type assertion to handle the enum conversion\n    };\n    return this.executionRepository.update(id, updateData);\n  }\n\n  async cancel(id: string, userId?: string): Promise {\n    await this.findOne(id, userId); // Verify access\n    return this.executionRepository.updateStatus(id, \"cancelled\" as any);\n  }\n\n  async pause(id: string, userId?: string): Promise {\n    await this.findOne(id, userId); // Verify access\n    return this.executionRepository.updateStatus(id, \"paused\" as any);\n  }\n\n  async resume(id: string, userId?: string): Promise {\n    await this.findOne(id, userId); // Verify access\n    return this.executionRepository.updateStatus(id, \"running\" as any);\n  }\n\n  async retry(id: string, userId?: string): Promise {\n    await this.findOne(id, userId); // Verify access\n    return this.executionRepository.updateStatus(id, \"pending\" as any);\n  }\n\n  async getStats(userId?: string, workflowId?: string) {\n    // Get recent executions for stats\n    let executions = userId\n      ? await this.executionRepository.findByUserId(userId, 100)\n      : await this.executionRepository.findMany({ take: 100 });\n\n    // Filter by workflowId if provided\n    if (workflowId) {\n      executions = executions.filter((exec) => exec.workflowId === workflowId);\n    }\n\n    const total = executions.length;\n    const completed = executions.filter((e) => e.status === \"completed\").length;\n    const failed = executions.filter((e) => e.status === \"failed\").length;\n    const running = executions.filter((e) => e.status === \"running\").length;\n    const pending = executions.filter((e) => e.status === \"pending\").length;\n\n    // Calculate performance metrics for completed executions\n    const completedExecutions = executions.filter(\n      (e) => e.status === \"completed\" && e.startedAt && e.finishedAt\n    );\n\n    let avgDuration = 0;\n    let medianDuration = 0;\n    let peakConcurrency = 0;\n\n    if (completedExecutions.length > 0) {\n      // Calculate durations in milliseconds\n      const durations = completedExecutions.map((exec) => {\n        const start = new Date(exec.startedAt!).getTime();\n        const end = new Date(exec.finishedAt!).getTime();\n        return end - start;\n      });\n\n      // Average duration\n      avgDuration = Math.round(\n        durations.reduce((sum, duration) => sum + duration, 0) /\n          durations.length\n      );\n\n      // Median duration\n      const sortedDurations = durations.sort((a, b) => a - b);\n      const mid = Math.floor(sortedDurations.length / 2);\n      medianDuration = Math.round(\n        sortedDurations.length % 2 === 0\n          ? (sortedDurations[mid - 1] + sortedDurations[mid]) / 2\n          : sortedDurations[mid]\n      );\n\n      // Peak concurrency - count max simultaneous executions\n      const timePoints: { time: number; delta: number }[] = [];\n\n      executions.forEach((exec) => {\n        if (exec.startedAt) {\n          timePoints.push({\n            time: new Date(exec.startedAt).getTime(),\n            delta: 1,\n          });\n        }\n        if (exec.finishedAt) {\n          timePoints.push({\n            time: new Date(exec.finishedAt).getTime(),\n            delta: -1,\n          });\n        }\n      });\n\n      // Sort by time and calculate peak concurrency\n      timePoints.sort((a, b) => a.time - b.time);\n      let currentConcurrency = 0;\n      timePoints.forEach((point) => {\n        currentConcurrency += point.delta;\n        peakConcurrency = Math.max(peakConcurrency, currentConcurrency);\n      });\n    }\n\n    return {\n      // Performance metrics for frontend\n      avgDuration,\n      medianDuration,\n      peakConcurrency,\n      // Traditional stats for other uses\n      total,\n      completed,\n      failed,\n      running,\n      pending,\n      success_rate: total > 0 ? (completed / total) * 100 : 0,\n    };\n  }\n\n  async getTrends(userId?: string, days = 7, workflowId?: string) {\n    let executions = userId\n      ? await this.executionRepository.findByUserId(userId, 1000) // Get more data for trends\n      : await this.executionRepository.findMany({ take: 1000 });\n\n    // Filter by workflowId if provided\n    if (workflowId) {\n      executions = executions.filter((exec) => exec.workflowId === workflowId);\n    }\n\n    // Group executions by day\n    const trendsMap = new Map();\n\n    // Initialize all days with zero counts\n    for (let i = 0; i  {\n      if (execution.startedAt) {\n        const dateKey = execution.startedAt.toISOString().split(\"T\")[0];\n        if (trendsMap.has(dateKey)) {\n          const dayData = trendsMap.get(dateKey)!;\n          dayData.total++;\n          if (execution.status === \"completed\") {\n            dayData.successful++;\n          }\n        }\n      }\n    });\n\n    // Convert to array format expected by frontend\n    const trends = Array.from(trendsMap.entries())\n      .map(([date, data]) => ({\n        timestamp: date,\n        count: data.total,\n      }))\n      .sort((a, b) => a.timestamp.localeCompare(b.timestamp));\n\n    return trends;\n  }\n\n  async getHeatmap(userId?: string, workflowId?: string) {\n    let executions = userId\n      ? await this.executionRepository.findByUserId(userId, 1000)\n      : await this.executionRepository.findMany({ take: 1000 });\n\n    // Filter by workflowId if provided\n    if (workflowId) {\n      executions = executions.filter((exec) => exec.workflowId === workflowId);\n    }\n\n    // For now, create a simplified heatmap based on daily execution patterns\n    // In a real implementation, this would analyze node-level performance data\n    const heatmapMap = new Map();\n\n    // Group executions by date\n    executions.forEach((execution) => {\n      if (execution.startedAt) {\n        const dateKey = execution.startedAt.toISOString().split(\"T\")[0];\n\n        if (!heatmapMap.has(dateKey)) {\n          heatmapMap.set(dateKey, {\n            executions: 0,\n            completedExecutions: 0,\n            totalDuration: 0,\n            completedWithDuration: 0,\n          });\n        }\n\n        const dayData = heatmapMap.get(dateKey)!;\n        dayData.executions++;\n\n        if (execution.status === \"completed\") {\n          dayData.completedExecutions++;\n\n          if (execution.startedAt && execution.finishedAt) {\n            const duration =\n              new Date(execution.finishedAt).getTime() -\n              new Date(execution.startedAt).getTime();\n            dayData.totalDuration += duration;\n            dayData.completedWithDuration++;\n          }\n        }\n      }\n    });\n\n    // Convert to array format expected by frontend\n    // Since we don't have actual node data, we'll create a general \"workflow\" node entry per date\n    const heatmap = Array.from(heatmapMap.entries()).map(([date, data]) => ({\n      nodeId: \"workflow\", // Generic node ID since we don't have node-level data\n      date,\n      avgDuration:\n        data.completedWithDuration > 0\n          ? Math.round(data.totalDuration / data.completedWithDuration)\n          : 0,\n      failureRate:\n        data.executions > 0\n          ? Math.round(\n              ((data.executions - data.completedExecutions) / data.executions) *\n                100\n            )\n          : 0,\n      executionCount: data.executions, // Add execution count for UI\n    }));\n\n    return heatmap;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateWorkflowDto.html":{"url":"classes/GenerateWorkflowDto.html","title":"class - GenerateWorkflowDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateWorkflowDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/dto/workflow-generation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                existingEdges\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                existingNodes\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                options\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Natural language description of the workflow'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        existingEdges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkflowEdgeDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Existing workflow edges', required: false})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        existingNodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkflowNodeDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Existing workflow nodes', required: false})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenerationOptionsDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Generation options', required: false})@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsString,\n  IsOptional,\n  IsArray,\n  IsBoolean,\n  ValidateNested,\n} from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class GenerationOptionsDto {\n  @ApiProperty({ description: \"Enable detailed mode for generation\" })\n  @IsBoolean()\n  detailedMode: boolean;\n\n  @ApiProperty({ description: \"Enable prefill configuration\" })\n  @IsBoolean()\n  prefillConfig: boolean;\n\n  @ApiProperty({\n    description: \"Domain hint for better generation\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  domainHint?: string;\n}\n\nexport class WorkflowNodeDto {\n  @ApiProperty({ description: \"Node ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Node type\" })\n  @IsString()\n  type: string;\n\n  @ApiProperty({ description: \"Node position\" })\n  position: { x: number; y: number };\n\n  @ApiProperty({ description: \"Node data\" })\n  data: Record;\n}\n\nexport class WorkflowEdgeDto {\n  @ApiProperty({ description: \"Edge ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Source node ID\" })\n  @IsString()\n  source: string;\n\n  @ApiProperty({ description: \"Target node ID\" })\n  @IsString()\n  target: string;\n\n  @ApiProperty({ description: \"Source handle\", required: false })\n  @IsOptional()\n  @IsString()\n  sourceHandle?: string;\n\n  @ApiProperty({ description: \"Target handle\", required: false })\n  @IsOptional()\n  @IsString()\n  targetHandle?: string;\n}\n\nexport class GenerateWorkflowDto {\n  @ApiProperty({ description: \"Natural language description of the workflow\" })\n  @IsString()\n  description: string;\n\n  @ApiProperty({ description: \"Generation options\", required: false })\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => GenerationOptionsDto)\n  options?: GenerationOptionsDto;\n\n  @ApiProperty({ description: \"Existing workflow nodes\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  existingNodes?: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Existing workflow edges\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  existingEdges?: WorkflowEdgeDto[];\n}\n\nexport class RefineWorkflowDto {\n  @ApiProperty({ description: \"Refinement prompt\" })\n  @IsString()\n  prompt: string;\n\n  @ApiProperty({ description: \"Refinement options\", required: false })\n  @IsOptional()\n  options?: {\n    preserveConnections?: boolean;\n    focusArea?: string;\n    intensity?: \"light\" | \"medium\" | \"heavy\";\n  };\n\n  @ApiProperty({ description: \"Current workflow nodes\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Current workflow edges\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  edges: WorkflowEdgeDto[];\n}\n\nexport class WorkflowResponseDto {\n  @ApiProperty({ description: \"Generated workflow nodes\" })\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Generated workflow edges\" })\n  edges: WorkflowEdgeDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerationOptions.html":{"url":"interfaces/GenerationOptions.html","title":"interface - GenerationOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerationOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            detailedMode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            domainHint\n                                        \n                                \n                                \n                                        \n                                            prefillConfig\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        detailedMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        detailedMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        domainHint\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        domainHint:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prefillConfig\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prefillConfig:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { createOpenRouter } from \"@openrouter/ai-sdk-provider\";\nimport { generateText } from \"ai\";\nimport { z } from \"zod\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Import types from the types package\nimport { BlockType, DataType, NodeCategory } from \"@zyra/types\";\n\nconst MODEL_TO_USE = \"gpt-4o-mini\";\n\ninterface WorkflowNode {\n  id: string;\n  type: string;\n  position: { x: number; y: number };\n  data: Record;\n}\n\ninterface WorkflowEdge {\n  id: string;\n  source: string;\n  target: string;\n  sourceHandle?: string;\n  targetHandle?: string;\n}\n\ninterface GenerationOptions {\n  detailedMode: boolean;\n  prefillConfig: boolean;\n  domainHint?: string;\n}\n\nconst WorkflowResponseSchema = z.object({\n  nodes: z.array(\n    z.object({\n      id: z.string(),\n      type: z.string().default(\"custom\"),\n      position: z.object({ x: z.number(), y: z.number() }),\n      data: z.object({\n        blockType: z.nativeEnum(BlockType),\n        label: z.string(),\n        description: z.string().optional(),\n        nodeType: z.enum([\"TRIGGER\", \"ACTION\", \"LOGIC\"]),\n        iconName: z.string(),\n        isEnabled: z.boolean().default(true),\n        config: z.record(z.unknown()).optional(),\n        inputs: z.array(z.unknown()).default([]),\n        outputs: z.array(z.unknown()).default([]),\n      }),\n    })\n  ),\n  edges: z.array(\n    z.object({\n      id: z.string(),\n      source: z.string(),\n      target: z.string(),\n      sourceHandle: z.string().optional(),\n      targetHandle: z.string().optional(),\n      type: z.string().default(\"custom\"),\n      animated: z.boolean().default(false),\n    })\n  ),\n});\n\n@Injectable()\nexport class AiService {\n  private readonly openrouter;\n\n  constructor() {\n    this.openrouter = createOpenRouter({\n      apiKey: process.env.OPENROUTER_API_KEY ?? \"\",\n      baseURL: \"https://openrouter.ai/api/v1\",\n    });\n  }\n\n  async generateBlock(prompt: string): Promise;\n      outputs: Array;\n      configFields: Array;\n    };\n  }> {\n    try {\n      const systemPrompt = `You are an AI that creates custom workflow blocks for Zzyra platform.\n\nAvailable Data Types: ${JSON.stringify(Object.values(DataType), null, 2)}\n\nGenerate a complete custom block definition based on user requirements.\n\nREQUIRED OUTPUT STRUCTURE:\n{\n  \"name\": \"Block Name\",\n  \"description\": \"What this block does\",\n  \"category\": \"Utility|Integration|AI|Data|Analytics|Communication\",\n  \"code\": \"async function execute(inputs, context) { /* Complete implementation */ return { outputName: result }; }\",\n  \"inputs\": [{\"name\": \"input\", \"dataType\": \"string\", \"required\": true, \"description\": \"Input description\"}],\n  \"outputs\": [{\"name\": \"output\", \"dataType\": \"string\", \"required\": true, \"description\": \"Output description\"}],\n  \"configFields\": [{\"name\": \"config\", \"label\": \"Config Label\", \"type\": \"string\", \"required\": false, \"description\": \"Config help\"}]\n}\n\nRequirements:\n1. Analyze user request to understand functionality\n2. Design appropriate inputs, outputs, and config fields\n3. Implement complete, working JavaScript code\n4. Handle errors gracefully\n5. Use async/await for any asynchronous operations\n6. Access config via context.config.fieldName\n7. Return object with named outputs matching the outputs array\n\nReturn ONLY the JSON object.`;\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: prompt },\n        ],\n        temperature: 0.3,\n        maxTokens: 4000,\n      });\n\n      const cleanedText = text.replace(/```json|```/g, \"\").trim();\n      const parsedResponse = JSON.parse(cleanedText);\n\n      return {\n        success: true,\n        block: parsedResponse,\n      };\n    } catch (error) {\n      console.error(\"AI Custom Block Generation Error:\", error);\n      throw new Error(\"Failed to generate custom block\");\n    }\n  }\n\n  async generateWorkflow(\n    description: string,\n    options: GenerationOptions = { detailedMode: true, prefillConfig: true },\n    existingNodes: WorkflowNode[] = [],\n    existingEdges: WorkflowEdge[] = []\n  ): Promise {\n    try {\n      const systemPrompt = this.generateSystemPrompt();\n\n      const userContext =\n        existingNodes.length > 0\n          ? this.generateExistingContext(\n              description,\n              existingNodes,\n              existingEdges\n            )\n          : this.generateNewContext(description);\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userContext },\n        ],\n        temperature: 0.1,\n        maxTokens: 12000,\n      });\n\n      const parsedResponse = await this.parseAndValidateResponse(text);\n      const enhancedNodes = this.enhanceNodes(parsedResponse.nodes);\n      const enhancedEdges = this.enhanceEdges(parsedResponse.edges);\n\n      const finalWorkflow = this.mergeWorkflows(\n        existingNodes,\n        existingEdges,\n        enhancedNodes,\n        enhancedEdges\n      );\n\n      return this.deduplicateWorkflow(finalWorkflow);\n    } catch (error) {\n      console.error(\"AI Workflow Generation Error:\", error);\n      throw error;\n    }\n  }\n\n  async refineWorkflow(\n    prompt: string,\n    options: {\n      preserveConnections?: boolean;\n      focusArea?: string;\n      intensity?: \"light\" | \"medium\" | \"heavy\";\n    } = {},\n    nodes: WorkflowNode[],\n    edges: WorkflowEdge[]\n  ): Promise {\n    try {\n      const systemPrompt = this.generateRefinementSystemPrompt();\n\n      const userContext = `\nWORKFLOW REFINEMENT REQUEST:\n\n**CURRENT WORKFLOW**:\nNodes: ${JSON.stringify(nodes, null, 2)}\nEdges: ${JSON.stringify(edges, null, 2)}\n\n**REFINEMENT REQUEST**: \"${prompt}\"\n**OPTIONS**: ${JSON.stringify(options, null, 2)}\n\n**TASK**: Refine the existing workflow based on the user's request while maintaining the core functionality.\n`;\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userContext },\n        ],\n        temperature: 0.1,\n        maxTokens: 12000,\n      });\n\n      const parsedResponse = await this.parseAndValidateResponse(text);\n      return {\n        nodes: this.enhanceNodes(parsedResponse.nodes),\n        edges: this.enhanceEdges(parsedResponse.edges),\n      };\n    } catch (error) {\n      console.error(\"AI Workflow Refinement Error:\", error);\n      throw error;\n    }\n  }\n\n  private generateSystemPrompt(): string {\n    return `You are an EXPERT WORKFLOW AI for Zzyra automation platform with deep understanding of blockchain, crypto, and automation workflows.\n\n🎯 **CORE MISSION**: Transform ANY natural language into sophisticated, executable workflows using our comprehensive block system.\n\n🔥 **AVAILABLE BLOCK TYPES**:\n${JSON.stringify(Object.values(BlockType), null, 2)}\n\n📊 **AVAILABLE DATA TYPES**: \n${JSON.stringify(Object.values(DataType), null, 2)}\n\n🔥 **BLOCK SYSTEM OVERVIEW**:\n- **PRICE_MONITOR**: Monitor cryptocurrency prices with conditions\n- **EMAIL**: Send email notifications\n- **NOTIFICATION**: Send various types of notifications\n- **CONDITION**: Add conditional logic and branching\n- **DELAY**: Add time delays between actions\n- **SCHEDULE**: Schedule recurring tasks\n- **WEBHOOK**: Handle webhook integrations\n- **HTTP_REQUEST**: Make HTTP calls to external APIs\n- **CALCULATOR**: Perform arithmetic calculations\n- **COMPARATOR**: Compare values with logical conditions\n- **BLOCKCHAIN_READ**: Read blockchain data (balances, transactions)\n- **DATABASE_QUERY/WRITE**: Database operations\n- **FILE_READ/WRITE**: File system operations\n- **TRANSFORMER**: Transform and manipulate data\n- **AGGREGATOR**: Aggregate and analyze data\n- **LOOP**: Repeat operations with iteration logic\n- **HTTP_CALL**: Call external services\n- **MESSAGE_SEND**: Send messages via various channels\n\n🎯 **OUTPUT SPECIFICATION**:\n\n**Node Structure** (STRICT FORMAT):\n{\n  \"id\": \"node-{{uuid}}\",\n  \"type\": \"custom\",\n  \"position\": {\"x\": intelligent_x, \"y\": intelligent_y},\n  \"data\": {\n    \"blockType\": \"EXACT_UPPERCASE_ENUM_VALUE\",\n    \"label\": \"User-friendly descriptive name\",\n    \"description\": \"Clear description of functionality\",\n    \"nodeType\": \"TRIGGER|ACTION|LOGIC\",\n    \"iconName\": \"appropriate-icon-name\",\n    \"isEnabled\": true,\n    \"config\": {\n      /* Intelligent configuration based on user request */\n    },\n    \"inputs\": [],\n    \"outputs\": []\n  }\n}\n\n**Edge Structure**:\n{\n  \"id\": \"edge-{{uuid}}\",\n  \"source\": \"source-node-id\",\n  \"target\": \"target-node-id\",\n  \"type\": \"custom\",\n  \"animated\": false\n}\n\n**CRITICAL REQUIREMENTS**:\n- Return ONLY valid JSON: {\"nodes\": [...], \"edges\": [...]}\n- Use exact BlockType enum values (UPPERCASE format)\n- Generate unique UUIDs for all IDs\n- Create intelligent positioning based on flow order\n- Generate proper configurations for each block type\n- Ensure logical execution flow (TRIGGER → LOGIC → ACTION)\n\nGenerate workflows that users can execute immediately.`;\n  }\n\n  private generateRefinementSystemPrompt(): string {\n    return `You are an EXPERT WORKFLOW REFINEMENT AI for Zzyra automation platform.\n\nYour task is to intelligently refine existing workflows based on user requests while preserving core functionality.\n\n**REFINEMENT CAPABILITIES**:\n- Add new nodes and connections\n- Modify existing configurations\n- Optimize workflow structure\n- Enhance error handling\n- Improve efficiency\n\n**OUTPUT**: Return the complete refined workflow as JSON with \"nodes\" and \"edges\" arrays.`;\n  }\n\n  private generateExistingContext(\n    prompt: string,\n    existingNodes: WorkflowNode[],\n    existingEdges: WorkflowEdge[]\n  ): string {\n    return `WORKFLOW ENHANCEMENT REQUEST:\n\n**CURRENT WORKFLOW**:\nNodes: ${JSON.stringify(existingNodes, null, 2)}\nEdges: ${JSON.stringify(existingEdges, null, 2)}\n\n**USER ENHANCEMENT REQUEST**: \"${prompt}\"\n\n**TASK**: Enhance the existing workflow by adding new functionality while maintaining existing capabilities.`;\n  }\n\n  private generateNewContext(prompt: string): string {\n    return `NEW WORKFLOW CREATION REQUEST:\n\n**USER REQUEST**: \"${prompt}\"\n\n**TASK**: Create a complete workflow from scratch that accomplishes the user's automation goal.`;\n  }\n\n  private async parseAndValidateResponse(\n    text: string\n  ): Promise> {\n    const cleanedText = text.replace(/```json|```/g, \"\").trim();\n\n    let parsedResponse: unknown;\n    try {\n      parsedResponse = JSON.parse(cleanedText);\n    } catch (parseError) {\n      throw new Error(\"AI generated invalid JSON format\");\n    }\n\n    const validationResult = WorkflowResponseSchema.safeParse(parsedResponse);\n    if (!validationResult.success) {\n      throw new Error(\n        `AI workflow validation failed: ${validationResult.error.message}`\n      );\n    }\n\n    return validationResult.data;\n  }\n\n  private enhanceNodes(nodes: Record[]): WorkflowNode[] {\n    return nodes.map((nodeData) => {\n      const nodeId = (nodeData.id as string) || `node-${uuidv4()}`;\n\n      return {\n        id: nodeId,\n        type: \"custom\",\n        position: nodeData.position as { x: number; y: number },\n        data: {\n          blockType: (nodeData.data as any)?.blockType,\n          label: (nodeData.data as any)?.label,\n          description: (nodeData.data as any)?.description || \"\",\n          nodeType: (nodeData.data as any)?.nodeType || \"ACTION\",\n          iconName: (nodeData.data as any)?.iconName || \"block\",\n          isEnabled: true,\n          config: (nodeData.data as any)?.config || {},\n          inputs: [],\n          outputs: [],\n          inputCount: 1,\n          outputCount: 1,\n          status: \"idle\",\n          nodeStatus: \"idle\",\n          isCompleted: false,\n          isFailed: false,\n          isExecuting: false,\n          isActive: false,\n        },\n      };\n    });\n  }\n\n  private enhanceEdges(edges: Record[]): WorkflowEdge[] {\n    return edges.map((edge) => ({\n      id: (edge.id as string) || `edge-${uuidv4()}`,\n      source: edge.source as string,\n      target: edge.target as string,\n      sourceHandle: edge.sourceHandle as string,\n      targetHandle: edge.targetHandle as string,\n      type: (edge.type as string) || \"custom\",\n      animated: (edge.animated as boolean) || false,\n    }));\n  }\n\n  private mergeWorkflows(\n    existingNodes: WorkflowNode[],\n    existingEdges: WorkflowEdge[],\n    newNodes: WorkflowNode[],\n    newEdges: WorkflowEdge[]\n  ): { nodes: WorkflowNode[]; edges: WorkflowEdge[] } {\n    if (existingNodes.length === 0) {\n      return { nodes: newNodes, edges: newEdges };\n    }\n\n    // Adjust positions to avoid overlap\n    const maxX = Math.max(...existingNodes.map((n) => n.position.x), 0);\n    const adjustedNewNodes = newNodes.map((node, index) => ({\n      ...node,\n      position: {\n        x: node.position.x + maxX + 200,\n        y: node.position.y + index * 50,\n      },\n    }));\n\n    return {\n      nodes: [...existingNodes, ...adjustedNewNodes],\n      edges: [...existingEdges, ...newEdges],\n    };\n  }\n\n  private deduplicateWorkflow(workflow: {\n    nodes: WorkflowNode[];\n    edges: WorkflowEdge[];\n  }): {\n    nodes: WorkflowNode[];\n    edges: WorkflowEdge[];\n  } {\n    const usedIds = new Set();\n    const deduplicatedNodes: WorkflowNode[] = [];\n    const deduplicatedEdges: WorkflowEdge[] = [];\n\n    workflow.nodes.forEach((node) => {\n      if (!usedIds.has(node.id)) {\n        usedIds.add(node.id);\n        deduplicatedNodes.push(node);\n      }\n    });\n\n    workflow.edges.forEach((edge) => {\n      if (!usedIds.has(edge.id)) {\n        usedIds.add(edge.id);\n        deduplicatedEdges.push(edge);\n      }\n    });\n\n    return { nodes: deduplicatedNodes, edges: deduplicatedEdges };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerationOptionsDto.html":{"url":"classes/GenerationOptionsDto.html","title":"class - GenerationOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerationOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/dto/workflow-generation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                detailedMode\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                domainHint\n                            \n                            \n                                    \n                                    \n                                prefillConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        detailedMode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enable detailed mode for generation'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        domainHint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Domain hint for better generation', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        prefillConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enable prefill configuration'})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsString,\n  IsOptional,\n  IsArray,\n  IsBoolean,\n  ValidateNested,\n} from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class GenerationOptionsDto {\n  @ApiProperty({ description: \"Enable detailed mode for generation\" })\n  @IsBoolean()\n  detailedMode: boolean;\n\n  @ApiProperty({ description: \"Enable prefill configuration\" })\n  @IsBoolean()\n  prefillConfig: boolean;\n\n  @ApiProperty({\n    description: \"Domain hint for better generation\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  domainHint?: string;\n}\n\nexport class WorkflowNodeDto {\n  @ApiProperty({ description: \"Node ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Node type\" })\n  @IsString()\n  type: string;\n\n  @ApiProperty({ description: \"Node position\" })\n  position: { x: number; y: number };\n\n  @ApiProperty({ description: \"Node data\" })\n  data: Record;\n}\n\nexport class WorkflowEdgeDto {\n  @ApiProperty({ description: \"Edge ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Source node ID\" })\n  @IsString()\n  source: string;\n\n  @ApiProperty({ description: \"Target node ID\" })\n  @IsString()\n  target: string;\n\n  @ApiProperty({ description: \"Source handle\", required: false })\n  @IsOptional()\n  @IsString()\n  sourceHandle?: string;\n\n  @ApiProperty({ description: \"Target handle\", required: false })\n  @IsOptional()\n  @IsString()\n  targetHandle?: string;\n}\n\nexport class GenerateWorkflowDto {\n  @ApiProperty({ description: \"Natural language description of the workflow\" })\n  @IsString()\n  description: string;\n\n  @ApiProperty({ description: \"Generation options\", required: false })\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => GenerationOptionsDto)\n  options?: GenerationOptionsDto;\n\n  @ApiProperty({ description: \"Existing workflow nodes\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  existingNodes?: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Existing workflow edges\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  existingEdges?: WorkflowEdgeDto[];\n}\n\nexport class RefineWorkflowDto {\n  @ApiProperty({ description: \"Refinement prompt\" })\n  @IsString()\n  prompt: string;\n\n  @ApiProperty({ description: \"Refinement options\", required: false })\n  @IsOptional()\n  options?: {\n    preserveConnections?: boolean;\n    focusArea?: string;\n    intensity?: \"light\" | \"medium\" | \"heavy\";\n  };\n\n  @ApiProperty({ description: \"Current workflow nodes\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Current workflow edges\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  edges: WorkflowEdgeDto[];\n}\n\nexport class WorkflowResponseDto {\n  @ApiProperty({ description: \"Generated workflow nodes\" })\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Generated workflow edges\" })\n  edges: WorkflowEdgeDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err: any, user: any, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ExecutionContext,\n  UnauthorizedException,\n} from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { Reflector } from \"@nestjs/core\";\nimport { IS_PUBLIC_KEY } from \"../decorators/public.decorator\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n\n  handleRequest(err: any, user: any, info: any) {\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { UserRepository } from \"@zyra/database\";\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n  name?: string;\n}\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  name?: string;\n}\n\ninterface TokenResponse {\n  accessToken: string;\n  expiresIn: number;\n}\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userRepository: UserRepository\n  ) {}\n\n  async validateUser(payload: JwtPayload): Promise {\n    const user = await this.userRepository.findById(payload.sub);\n    if (user) {\n      return {\n        id: user.id,\n        email: user.email || \"\",\n        name: user.email ? user.email.split(\"@\")[0] : \"User\",\n      };\n    }\n    return null;\n  }\n\n  async generateToken(user: AuthUser): Promise {\n    const payload: JwtPayload = {\n      sub: user.id,\n      email: user.email,\n      name: user.name,\n    };\n\n    const accessToken = this.jwtService.sign(payload);\n\n    return {\n      accessToken,\n      expiresIn: 3600, // 1 hour\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload-1.html":{"url":"interfaces/JwtPayload-1.html","title":"interface - JwtPayload-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exp\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iat\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { Request } from \"express\";\n\nexport interface JwtPayload {\n  sub: string;\n  email: string;\n  name?: string;\n  accessToken?: string;\n  refreshToken?: string;\n  expiresAt?: Date;\n  iat?: number;\n  exp?: number;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        // Extract JWT from Authorization header\n        ExtractJwt.fromAuthHeaderAsBearerToken(),\n        // Extract JWT from cookies for compatibility with Next.js auth\n        (request: Request) => {\n          // First try the session token (our main JWT)\n          const sessionToken =\n            request?.cookies?.[\"next-auth.session-token\"] ||\n            request?.cookies?.[\"__Secure-next-auth.session-token\"];\n          if (sessionToken) {\n            return sessionToken;\n          }\n\n          // Fallback to the access token for backward compatibility\n          return request?.cookies?.token;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET || \"your-secret-key\",\n    });\n  }\n\n  async validate(payload: JwtPayload) {\n    // Return user object that will be attached to request.user\n    return {\n      id: payload.sub,\n      email: payload.email,\n      name: payload.name,\n      accessToken: payload.accessToken,\n      refreshToken: payload.refreshToken,\n      expiresAt: payload.expiresAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload-2.html":{"url":"interfaces/JwtPayload-2.html","title":"interface - JwtPayload-2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/auth/types.ts\n        \n\n\n            \n                Description\n            \n            \n                JWT Payload structure\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            exp\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            iat\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            walletAddress\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        iat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        iat:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        walletAddress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        walletAddress:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User, Profile, UserWallet } from \"@prisma/client\";\n\n/**\n * JWT Payload structure\n */\nexport interface JwtPayload {\n  userId: string;\n  email?: string;\n  walletAddress?: string;\n  iat?: number;\n  exp?: number;\n}\n\n/**\n * Session information\n */\nexport interface Session {\n  user: {\n    id: string;\n    email?: string;\n    walletAddress?: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: number;\n}\n\n/**\n * Auth user with profile\n */\nexport type AuthUser = User & {\n  profile?: Profile | null;\n  userWallets?: UserWallet[];\n};\n\n/**\n * Magic link authentication payload\n */\nexport interface MagicAuthPayload {\n  didToken: string;\n  provider?: string;\n  email?: string;\n  isOAuth?: boolean;\n  oauthProvider?: string;\n  oauthUserInfo?: Record;\n}\n\n/**\n * Authentication result\n */\nexport interface AuthResult {\n  user: AuthUser;\n  session: Session;\n}\n\n/**\n * Authentication error\n */\nexport class AuthError extends Error {\n  code: string;\n\n  constructor(message: string, code: string) {\n    super(message);\n    this.code = code;\n    this.name = \"AuthError\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtService.html":{"url":"classes/JwtService.html","title":"class - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                JWT_EXPIRES_IN\n                            \n                            \n                                    Private\n                                    Readonly\n                                JWT_SECRET\n                            \n                            \n                                    Private\n                                    Readonly\n                                REFRESH_TOKEN_EXPIRES_IN\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateRefreshToken\n                            \n                            \n                                generateToken\n                            \n                            \n                                    Async\n                                invalidateAllTokens\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                verifyRefreshToken\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:27\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        JWT_EXPIRES_IN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        REFRESH_TOKEN_EXPIRES_IN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:27\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRefreshToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Generate a refresh token for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The refresh token data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateToken\n                        \n                    \n                \n            \n            \n                \ngenerateToken(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The signed JWT token\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        invalidateAllTokens\n                        \n                    \n                \n            \n            \n                \n                        \n                    invalidateAllTokens(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Invalidate all refresh tokens for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Refresh a JWT token using a refresh token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The refresh token\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The new JWT token and refresh token or null if invalid\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyRefreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyRefreshToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Verify a refresh token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The refresh token to verify\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The refresh token data or null if invalid\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT token to verify\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     JwtPayload | null\n\n                        \n                            \n                                The decoded payload or null if invalid\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as jwt from \"jsonwebtoken\";\nimport type { Secret, SignOptions } from \"jsonwebtoken\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { JwtPayload } from \"./types\";\nimport prisma from \"../client\";\n\n// Define RefreshToken interface until Prisma generates it\ninterface RefreshToken {\n  id: string;\n  userId: string;\n  token: string;\n  expiresAt: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport class JwtService {\n  private readonly JWT_SECRET: string;\n  private readonly JWT_EXPIRES_IN: string;\n  private readonly REFRESH_TOKEN_EXPIRES_IN: number; // In days\n\n  constructor() {\n    this.JWT_SECRET =\n      process.env.JWT_SECRET || \"your-jwt-secret-key-change-in-production\";\n    this.JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"1d\";\n    this.REFRESH_TOKEN_EXPIRES_IN = parseInt(\n      process.env.REFRESH_TOKEN_EXPIRES_IN || \"7\",\n      10\n    );\n  }\n\n  /**\n   * Generate a JWT token for a user\n   * @param payload The JWT payload\n   * @returns The signed JWT token\n   */\n  generateToken(payload: JwtPayload): string {\n    return jwt.sign(\n      payload,\n      this.JWT_SECRET as Secret,\n      {\n        expiresIn: this.JWT_EXPIRES_IN,\n      } as SignOptions\n    );\n  }\n\n  /**\n   * Verify a JWT token\n   * @param token The JWT token to verify\n   * @returns The decoded payload or null if invalid\n   */\n  verifyToken(token: string): JwtPayload | null {\n    try {\n      return jwt.verify(token, this.JWT_SECRET) as JwtPayload;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Generate a refresh token for a user\n   * @param userId The user ID\n   * @returns The refresh token data\n   */\n  async generateRefreshToken(userId: string): Promise {\n    const token = uuidv4();\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + this.REFRESH_TOKEN_EXPIRES_IN);\n\n    // Delete any existing refresh tokens for this user\n    await prisma.$executeRaw`DELETE FROM refresh_tokens WHERE user_id = ${userId}`;\n\n    // Create new refresh token with raw SQL until Prisma client is regenerated\n    const result = await prisma.$executeRaw`\n      INSERT INTO refresh_tokens (id, user_id, token, expires_at, created_at, updated_at)\n      VALUES (${uuidv4()}, ${userId}, ${token}, ${expiresAt}, NOW(), NOW())\n      RETURNING id, user_id, token, expires_at, created_at, updated_at\n    `;\n\n    // Return a structured refresh token object\n    return {\n      id: uuidv4(), // This will be different from the actual DB ID until client is regenerated\n      userId,\n      token,\n      expiresAt,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n  }\n\n  /**\n   * Verify a refresh token\n   * @param token The refresh token to verify\n   * @returns The refresh token data or null if invalid\n   */\n  async verifyRefreshToken(token: string): Promise {\n    // Query refresh token using raw SQL\n    const tokens = await prisma.$queryRaw`\n      SELECT id, user_id as \"userId\", token, expires_at as \"expiresAt\", \n             created_at as \"createdAt\", updated_at as \"updatedAt\"\n      FROM refresh_tokens\n      WHERE token = ${token}\n      LIMIT 1\n    `;\n\n    const refreshToken = tokens && tokens.length > 0 ? tokens[0] : null;\n    if (!refreshToken) return null;\n\n    // Check if the token has expired\n    if (new Date() > refreshToken.expiresAt) {\n      // Delete the expired token\n      await prisma.$executeRaw`DELETE FROM refresh_tokens WHERE id = ${refreshToken.id}`;\n      return null;\n    }\n\n    return refreshToken;\n  }\n\n  /**\n   * Refresh a JWT token using a refresh token\n   * @param token The refresh token\n   * @returns The new JWT token and refresh token or null if invalid\n   */\n  async refreshToken(\n    token: string\n  ): Promise {\n    const verifiedToken = await this.verifyRefreshToken(token);\n    if (!verifiedToken) return null;\n\n    // Get the user\n    const user = await prisma.user.findUnique({\n      where: { id: verifiedToken.userId },\n    });\n\n    if (!user) return null;\n\n    // Generate a new JWT token\n    const payload: JwtPayload = {\n      userId: user.id,\n      email: user.email || undefined,\n    };\n\n    const newToken = this.generateToken(payload);\n\n    // Generate a new refresh token\n    const newRefreshToken = await this.generateRefreshToken(user.id);\n\n    // Delete the old refresh token\n    await prisma.$executeRaw`DELETE FROM refresh_tokens WHERE id = ${verifiedToken.id}`;\n\n    return {\n      token: newToken,\n      refreshToken: newRefreshToken,\n    };\n  }\n\n  /**\n   * Invalidate all refresh tokens for a user\n   * @param userId The user ID\n   */\n  async invalidateAllTokens(userId: string): Promise {\n    await prisma.$executeRaw`DELETE FROM refresh_tokens WHERE user_id = ${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { Request } from \"express\";\n\nexport interface JwtPayload {\n  sub: string;\n  email: string;\n  name?: string;\n  accessToken?: string;\n  refreshToken?: string;\n  expiresAt?: Date;\n  iat?: number;\n  exp?: number;\n}\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        // Extract JWT from Authorization header\n        ExtractJwt.fromAuthHeaderAsBearerToken(),\n        // Extract JWT from cookies for compatibility with Next.js auth\n        (request: Request) => {\n          // First try the session token (our main JWT)\n          const sessionToken =\n            request?.cookies?.[\"next-auth.session-token\"] ||\n            request?.cookies?.[\"__Secure-next-auth.session-token\"];\n          if (sessionToken) {\n            return sessionToken;\n          }\n\n          // Fallback to the access token for backward compatibility\n          return request?.cookies?.token;\n        },\n      ]),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET || \"your-secret-key\",\n    });\n  }\n\n  async validate(payload: JwtPayload) {\n    // Return user object that will be attached to request.user\n    return {\n      id: payload.sub,\n      email: payload.email,\n      name: payload.name,\n      accessToken: payload.accessToken,\n      refreshToken: payload.refreshToken,\n      expiresAt: payload.expiresAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({ description: 'User email' })\n  email: string;\n\n  @ApiProperty({ description: 'User password' })\n  password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty({ description: 'User email' })\n  email: string;\n\n  @ApiProperty({ description: 'User password' })\n  password: string;\n\n  @ApiProperty({ description: 'User full name' })\n  fullName: string;\n}\n\nexport class AuthResponseDto {\n  @ApiProperty({ description: 'JWT access token' })\n  accessToken: string;\n\n  @ApiProperty({ description: 'User information' })\n  user: {\n    id: string;\n    email: string;\n    fullName: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MagicAuthPayload.html":{"url":"interfaces/MagicAuthPayload.html","title":"interface - MagicAuthPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MagicAuthPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            didToken\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isOAuth\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            oauthProvider\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            oauthUserInfo\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        didToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        didToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isOAuth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isOAuth:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauthProvider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oauthProvider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauthUserInfo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oauthUserInfo:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  Request,\n  Response,\n  HttpException,\n  HttpStatus,\n} from \"@nestjs/common\";\nimport { ApiTags, ApiOperation } from \"@nestjs/swagger\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { AuthService as DatabaseAuthService } from \"@zyra/database\";\nimport { Public } from \"./decorators/public.decorator\";\n\ninterface MagicAuthPayload {\n  email: string;\n  didToken: string;\n  isOAuth?: boolean;\n  oauthProvider?: string;\n  oauthUserInfo?: any;\n}\n\n@ApiTags(\"auth\")\n@Controller(\"auth\")\nexport class AuthController {\n  constructor(\n    private readonly authService: DatabaseAuthService,\n    private readonly jwtService: JwtService\n  ) {}\n\n  @Public()\n  @Post(\"login\")\n  @ApiOperation({ summary: \"User login with Magic Link\" })\n  async login(\n    @Body()\n    body: {\n      email: string;\n      didToken: string;\n      isOAuth?: boolean;\n      oauthProvider?: string;\n      oauthUserInfo?: any;\n      callbackUrl?: string;\n    },\n    @Request() req: any,\n    @Response() res: any\n  ) {\n    try {\n      const {\n        email,\n        didToken,\n        isOAuth,\n        oauthProvider,\n        oauthUserInfo,\n        callbackUrl,\n      } = body;\n\n      if (!email || !didToken) {\n        throw new HttpException(\n          \"Email and DID token are required\",\n          HttpStatus.BAD_REQUEST\n        );\n      }\n\n      console.log(\"Login route: Received authentication data\", {\n        email,\n        didToken: didToken ? \"[PRESENT]\" : \"[MISSING]\",\n        isOAuth,\n        oauthProvider,\n        hasOAuthUserInfo: !!oauthUserInfo,\n        callbackUrl,\n      });\n\n      // Create Magic Auth payload - match the exact structure from Next.js\n      const magicPayload: MagicAuthPayload = {\n        email,\n        didToken,\n        isOAuth,\n        oauthProvider,\n        oauthUserInfo,\n      };\n\n      const { session, user } =\n        await this.authService.authenticateWithMagic(magicPayload);\n\n      console.log(\"Auth Result:\", { user, session });\n\n      if (!session || !session.accessToken || !user) {\n        console.error(\n          \"Login route: Authentication successful but no session tokens or user returned\"\n        );\n        throw new HttpException(\n          \"Authentication failed: Invalid session\",\n          HttpStatus.UNAUTHORIZED\n        );\n      }\n\n      // Create JWT token structure matching Next.js implementation\n      const tokenPayload = {\n        sub: user.id,\n        email: user.email || \"\",\n        name: user.email ? user.email.split(\"@\")[0] : \"User\",\n        accessToken: session.accessToken,\n        refreshToken: session.refreshToken,\n        expiresAt: session.expiresAt,\n      };\n      \n      console.log(\"Creating JWT token with payload:\", {\n        ...tokenPayload,\n        accessToken: '[REDACTED]',\n        refreshToken: '[REDACTED]'\n      });\n\n      // Create session token using NestJS JWT service\n      const sessionToken = this.jwtService.sign(tokenPayload, {\n        expiresIn: \"30d\", // Match Next.js behavior\n      });\n\n      console.log(\"Created Session Token:\", sessionToken.substring(0, 20) + '...');\n\n      // Set cookies matching Next.js behavior\n      const cookieName =\n        process.env.NODE_ENV === \"production\"\n          ? \"__Secure-next-auth.session-token\"\n          : \"next-auth.session-token\";\n\n      // Set session cookie\n      res.cookie(cookieName, sessionToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        path: \"/\",\n        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\n      });\n\n      // Set access token cookie\n      res.cookie(\"token\", session.accessToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\",\n        sameSite: \"strict\",\n        path: \"/\",\n        maxAge: 60 * 60 * 24 * 1000, // 1 day\n      });\n\n      // Set refresh token cookie if available\n      if (session.refreshToken) {\n        res.cookie(\"refresh_token\", session.refreshToken, {\n          httpOnly: true,\n          secure: process.env.NODE_ENV === \"production\",\n          sameSite: \"strict\",\n          path: \"/\",\n          maxAge: 60 * 60 * 24 * 7 * 1000, // 7 days\n        });\n      }\n\n      // Clean callbackUrl matching Next.js logic\n      let finalCallbackUrl = \"/dashboard\";\n      try {\n        if (callbackUrl) {\n          const url = new URL(\n            callbackUrl,\n            req.headers.origin || \"http://localhost:3000\"\n          );\n          if (!url.pathname.startsWith(\"/login\")) {\n            finalCallbackUrl = url.toString();\n          }\n        }\n      } catch {\n        // Use default if invalid\n      }\n\n      // Create response object\n      const responseData = {\n        token: sessionToken, // Include the JWT token at top level\n        session: {\n          expiresAt: session.expiresAt,\n          user: {\n            id: user.id,\n            email: user.email,\n            name: user.email ? user.email.split(\"@\")[0] : \"User\",\n          },\n          token: sessionToken, // Include token in session object\n          accessToken: session.accessToken,\n          refreshToken: session.refreshToken,\n        },\n        user,\n        success: true,\n        callbackUrl: finalCallbackUrl,\n      };\n      \n      // Log the response we're sending (with sensitive data redacted)\n      console.log(\"Sending login response:\", {\n        token: responseData.token.substring(0, 20) + '...',\n        session: {\n          ...responseData.session,\n          token: responseData.session.token.substring(0, 20) + '...',\n          accessToken: '[REDACTED]',\n          refreshToken: '[REDACTED]'\n        },\n        success: responseData.success,\n        callbackUrl: responseData.callbackUrl\n      });\n      \n      // Return response matching Next.js format with token included\n      return res.status(200).json(responseData);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      const errorMessage =\n        error instanceof Error ? error.message : \"Authentication failed\";\n      throw new HttpException(errorMessage, HttpStatus.UNAUTHORIZED);\n    }\n  }\n\n  @Public()\n  @Post(\"logout\")\n  @ApiOperation({ summary: \"User logout\" })\n  async logout(@Request() req: any, @Response() res: any) {\n    try {\n      // Clear all cookies matching Next.js logout behavior\n      res.clearCookie(\"token\");\n      res.clearCookie(\"refresh_token\");\n      res.clearCookie(\"next-auth.session-token\");\n      res.clearCookie(\"__Secure-next-auth.session-token\");\n\n      // Invalidate tokens in the auth service\n      try {\n        const token = req.cookies?.token;\n        if (token) {\n          const userId = this.authService.verifySession(token);\n          if (userId) {\n            await this.authService.signOut(userId);\n            console.log(`Logged out user with ID: ${userId}`);\n          }\n        }\n      } catch (serviceError) {\n        console.error(\n          \"Failed to invalidate tokens during logout:\",\n          serviceError\n        );\n      }\n\n      return res.json({\n        success: true,\n        message: \"Logged out successfully\",\n      });\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      throw new HttpException(\n        \"Failed to logout\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MagicAuthPayload-1.html":{"url":"interfaces/MagicAuthPayload-1.html","title":"interface - MagicAuthPayload-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MagicAuthPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/auth/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Magic link authentication payload\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            didToken\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isOAuth\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            oauthProvider\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            oauthUserInfo\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            provider\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        didToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        didToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isOAuth\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isOAuth:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauthProvider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oauthProvider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oauthUserInfo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oauthUserInfo:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User, Profile, UserWallet } from \"@prisma/client\";\n\n/**\n * JWT Payload structure\n */\nexport interface JwtPayload {\n  userId: string;\n  email?: string;\n  walletAddress?: string;\n  iat?: number;\n  exp?: number;\n}\n\n/**\n * Session information\n */\nexport interface Session {\n  user: {\n    id: string;\n    email?: string;\n    walletAddress?: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: number;\n}\n\n/**\n * Auth user with profile\n */\nexport type AuthUser = User & {\n  profile?: Profile | null;\n  userWallets?: UserWallet[];\n};\n\n/**\n * Magic link authentication payload\n */\nexport interface MagicAuthPayload {\n  didToken: string;\n  provider?: string;\n  email?: string;\n  isOAuth?: boolean;\n  oauthProvider?: string;\n  oauthUserInfo?: Record;\n}\n\n/**\n * Authentication result\n */\nexport interface AuthResult {\n  user: AuthUser;\n  session: Session;\n}\n\n/**\n * Authentication error\n */\nexport class AuthError extends Error {\n  code: string;\n\n  constructor(message: string, code: string) {\n    super(message);\n    this.code = code;\n    this.name = \"AuthError\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MagicService.html":{"url":"classes/MagicService.html","title":"class - MagicService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MagicService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/auth/magic.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logoutUser\n                            \n                            \n                                    Async\n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/magic.service.ts:15\n                            \n                        \n\n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logoutUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    logoutUser(issuer: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/magic.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Logout a user from Magic\nNOTE: This is a simplified implementation for development.\nIn production, use Magic Admin SDK to properly logout users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                issuer\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user's Magic issuer ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateToken(didToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/auth/magic.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Validate a DID token from Magic SDK\nNOTE: This is a simplified implementation for development.\nIn production, use Magic Admin SDK to validate tokens properly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                didToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DID token to validate\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The validated user metadata including email\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AuthError } from \"./types\";\n\n// Configure Magic Admin - For production, set this in environment variables\nconst MAGIC_SECRET_KEY = process.env.MAGIC_SECRET_KEY || \"test-key\";\n\nexport class MagicService {\n  constructor() {\n    if (!MAGIC_SECRET_KEY) {\n      console.warn(\n        \"MAGIC_SECRET_KEY environment variable is not set, using mock implementation\"\n      );\n    }\n    console.log(\"MagicService: Initialized\");\n  }\n\n  /**\n   * Validate a DID token from Magic SDK\n   *\n   * NOTE: This is a simplified implementation for development.\n   * In production, use Magic Admin SDK to validate tokens properly.\n   *\n   * @param didToken The DID token to validate\n   * @returns The validated user metadata including email\n   */\n  async validateToken(\n    didToken: string\n  ): Promise {\n    try {\n      console.log(\"MagicService: Validating DID token\");\n\n      if (!didToken || didToken.length = 2) {\n          const payload = JSON.parse(\n            Buffer.from(parts[1], \"base64\").toString()\n          );\n          email = payload.email || \"\";\n          issuer = payload.iss || payload.sub || \"mock-issuer\";\n        }\n      } catch (parseError) {\n        console.warn(\n          \"MagicService: Failed to parse token, using fallback validation\"\n        );\n      }\n\n      // In a real implementation, we would validate the token with Magic Admin SDK\n      // and extract email and issuer from the validated metadata\n\n      console.log(\"MagicService: Token validation successful\", {\n        email,\n        issuer,\n      });\n\n      return { email, issuer };\n    } catch (error) {\n      console.error(\"MagicService: Token validation failed\", error);\n      throw new AuthError(\n        \"Invalid or expired authentication token\",\n        \"auth/invalid-token\"\n      );\n    }\n  }\n\n  /**\n   * Logout a user from Magic\n   *\n   * NOTE: This is a simplified implementation for development.\n   * In production, use Magic Admin SDK to properly logout users.\n   *\n   * @param issuer The user's Magic issuer ID\n   */\n  async logoutUser(issuer: string): Promise {\n    try {\n      console.log(`MagicService: Logging out user with issuer: ${issuer}`);\n      // In a real implementation, we would call Magic Admin SDK to logout\n      // await this.magic.users.logoutByIssuer(issuer);\n      console.log(\"MagicService: User logged out successfully\");\n    } catch (error) {\n      console.error(\"MagicService: Failed to logout user\", error);\n      // Don't throw here, as we want the logout process to continue even if Magic fails\n    }\n  }\n}\n\n// Export a singleton instance\nlet magicServiceInstance: MagicService | null = null;\n\nexport function getMagicService(): MagicService {\n  if (!magicServiceInstance) {\n    try {\n      magicServiceInstance = new MagicService();\n    } catch (error) {\n      console.error(\"Failed to initialize Magic Service:\", error);\n      throw error;\n    }\n  }\n  return magicServiceInstance;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeExecution.html":{"url":"interfaces/NodeExecution.html","title":"interface - NodeExecution","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeExecution\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts\n        \n\n\n            \n                Description\n            \n            \n                Node execution record\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            completed_at\n                                        \n                                \n                                \n                                        \n                                            execution_id\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            node_id\n                                        \n                                \n                                \n                                        \n                                            started_at\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        completed_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        completed_at:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        execution_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        execution_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        started_at\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        started_at:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ExecutionStatus = \"pending\" | \"running\" | \"completed\" | \"failed\";\n\n/**\n * Execution log record\n */\nexport interface ExecutionLog {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  level: string;\n  message: string;\n  data?: any;\n  timestamp: string;\n}\n\n/**\n * Node execution record\n */\nexport interface NodeExecution {\n  id: string;\n  execution_id: string;\n  node_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n}\n\n/**\n * Complete workflow execution result\n */\nexport interface ExecutionResult {\n  id: string;\n  workflow_id: string;\n  status: string;\n  started_at: string;\n  completed_at?: string;\n  result?: any;\n  logs: ExecutionLog[];\n  nodeExecutions: NodeExecution[];\n}\n\n/**\n * Context provided to block handlers during execution\n */\nexport interface BlockExecutionContext {\n  nodeId: string;\n  executionId: string;\n  workflowId: string;\n  userId: string;\n  inputs: Record;\n  previousOutputs?: Record;\n  config: Record;\n  // Added workflowData field that many handlers use\n  workflowData?: Record;\n  logger: {\n    // Added log method for compatibility with worker implementation\n    log: (message: string, data?: any) => void;\n    debug: (message: string, data?: any) => void;\n    info: (message: string, data?: any) => void;\n    warn: (message: string, data?: any) => void;\n    error: (message: string, data?: any) => void;\n  };\n  // Used by custom blocks to access additional services\n  services?: Record;\n}\n\n/**\n * Interface for block handlers that execute workflow nodes\n */\nexport interface BlockHandler {\n  // Updated signature to match worker implementation with 2 parameters\n  execute(node: any, context: BlockExecutionContext): Promise>;\n  validate?(config: Record): boolean;\n  getDefaultConfig?(): Record;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NodeExecutionDto.html":{"url":"classes/NodeExecutionDto.html","title":"class - NodeExecutionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NodeExecutionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                completed_at\n                            \n                            \n                                    \n                                    Optional\n                                error\n                            \n                            \n                                    \n                                execution_id\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                input_data\n                            \n                            \n                                    \n                                node_id\n                            \n                            \n                                    \n                                    Optional\n                                output_data\n                            \n                            \n                                    \n                                started_at\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/executions/dto/execution.dto.ts:174\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        completed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'When the node execution completed', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Error message if node execution failed', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        execution_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the workflow execution this node belongs to'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:138\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier for the node execution'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        input_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Input data for the node execution', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        node_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the node in the workflow'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        output_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Output data from the node execution', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:174\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        started_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'When the node execution started'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:150\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\"\n\n                    \n                \n                \n                    \n                        Default value : \"pending\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Current status of the node execution', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:147\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NodeExecutionsService.html":{"url":"injectables/NodeExecutionsService.html","title":"injectable - NodeExecutionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NodeExecutionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/node-executions.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findByExecutionId\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(executionRepository: ExecutionRepository)\n                    \n                \n                        \n                            \n                                Defined in src/executions/node-executions.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        executionRepository\n                                                  \n                                                        \n                                                                        ExecutionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByExecutionId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByExecutionId(executionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/node-executions.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                executionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/node-executions.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { NodeExecutionDto } from \"./dto/execution.dto\";\nimport { ExecutionRepository } from \"../database/repositories/execution.repository\";\n\n@Injectable()\nexport class NodeExecutionsService {\n  constructor(\n    @Inject(\"NODE_EXECUTIONS_REPOSITORY\")\n    private readonly executionRepository: ExecutionRepository\n  ) {}\n\n  async findByExecutionId(executionId: string): Promise {\n    try {\n      // Get node executions from database\n      const nodeExecutions =\n        await this.executionRepository.findNodeExecutions(executionId);\n\n      // Transform database records to DTOs\n      return nodeExecutions.map(\n        (nodeExec) =>\n          new NodeExecutionDto({\n            id: nodeExec.id,\n            execution_id: nodeExec.executionId,\n            node_id: nodeExec.nodeId,\n            status: nodeExec.status as\n              | \"pending\"\n              | \"running\"\n              | \"completed\"\n              | \"failed\"\n              | \"paused\",\n            started_at: nodeExec.startedAt?.toISOString() || undefined,\n            completed_at: nodeExec.completedAt?.toISOString() || undefined,\n            error: nodeExec.error || undefined,\n            input_data:\n              ((nodeExec as any).nodeInputs?.[0]?.inputData as Record) || {},\n            output_data: (nodeExec.outputData as Record) || {},\n          })\n      );\n    } catch (error) {\n      console.error(\n        `Failed to fetch node executions for execution ${executionId}:`,\n        error\n      );\n      // Return empty array instead of throwing to prevent breaking the UI\n      return [];\n    }\n  }\n\n  async findById(id: string): Promise {\n    try {\n      // Get single node execution from database\n      const nodeExecution =\n        await this.executionRepository.findNodeExecution(id);\n\n      if (!nodeExecution) {\n        return undefined;\n      }\n\n      return new NodeExecutionDto({\n        id: nodeExecution.id,\n        execution_id: nodeExecution.executionId,\n        node_id: nodeExecution.nodeId,\n        status: nodeExecution.status as\n          | \"pending\"\n          | \"running\"\n          | \"completed\"\n          | \"failed\"\n          | \"paused\",\n        started_at: nodeExecution.startedAt?.toISOString() || undefined,\n        completed_at: nodeExecution.completedAt?.toISOString() || undefined,\n        error: nodeExecution.error || undefined,\n        input_data:\n          ((nodeExecution as any).nodeInputs?.[0]?.inputData as Record) || {},\n        output_data:\n          (nodeExecution.outputData as Record) || {},\n      });\n    } catch (error) {\n      console.error(`Failed to fetch node execution ${id}:`, error);\n      return undefined;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NodeLogDto.html":{"url":"classes/NodeLogDto.html","title":"class - NodeLogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NodeLogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                created_at\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                level\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                node_execution_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/executions/dto/execution.dto.ts:200\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        created_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'When the log was created'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:200\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier for the log entry'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:185\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"info\" | \"warn\" | \"error\" | \"debug\"\n\n                    \n                \n                \n                    \n                        Default value : \"info\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Log level', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:197\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Log message content'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:191\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        node_execution_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the node execution this log belongs to'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:188\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NodeLogsService.html":{"url":"injectables/NodeLogsService.html","title":"injectable - NodeLogsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NodeLogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/node-logs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findByNodeExecutionId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(executionRepository: ExecutionRepository)\n                    \n                \n                        \n                            \n                                Defined in src/executions/node-logs.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        executionRepository\n                                                  \n                                                        \n                                                                        ExecutionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByNodeExecutionId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByNodeExecutionId(nodeExecutionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/executions/node-logs.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nodeExecutionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from \"@nestjs/common\";\nimport { NodeLogDto } from \"./dto/execution.dto\";\nimport { ExecutionRepository } from \"../database/repositories/execution.repository\";\n\n@Injectable()\nexport class NodeLogsService {\n  constructor(\n    @Inject(\"NODE_EXECUTIONS_REPOSITORY\")\n    private readonly executionRepository: ExecutionRepository\n  ) {}\n\n  async findByNodeExecutionId(nodeExecutionId: string): Promise {\n    try {\n      // Get node logs from database\n      const nodeLogs =\n        await this.executionRepository.findNodeLogs(nodeExecutionId);\n\n      // Transform database records to DTOs\n      return nodeLogs.map(\n        (log) =>\n          new NodeLogDto({\n            id: log.id,\n            node_execution_id: log.nodeExecutionId,\n            message: log.message,\n            level: log.level,\n            created_at: log.createdAt.toISOString(),\n          })\n      );\n    } catch (error) {\n      console.error(\n        `Failed to fetch node logs for node execution ${nodeExecutionId}:`,\n        error\n      );\n      // Return empty array instead of throwing to prevent breaking the UI\n      return [];\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationCreateInput.html":{"url":"interfaces/NotificationCreateInput.html","title":"interface - NotificationCreateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationCreateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/notification.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            read\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        read\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        read:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Notification, NotificationPreference } from \"@prisma/client\";\n// No need for custom interfaces; use Prisma-generated types for type safety.\nimport { BaseRepository } from './base.repository';\nimport { PaginationParams, applyPagination, createPaginatedResult } from '../utils/pagination';\n\n// Type definitions for notification operations\nexport interface NotificationCreateInput {\n  userId: string;\n  title: string;\n  message: string;\n  type: string;\n  read?: boolean;\n  data?: any;\n}\n\nexport interface NotificationUpdateInput {\n  title?: string;\n  message?: string;\n  type?: string;\n  read?: boolean;\n  data?: any;\n}\n\nexport interface NotificationPreferenceCreateInput {\n  userId: string;\n  emailEnabled?: boolean;\n  pushEnabled?: boolean;\n  webhookEnabled?: boolean;\n  telegramChatId?: string;\n  discordWebhookUrl?: string;\n}\n\nexport interface NotificationPreferenceUpdateInput {\n  emailEnabled?: boolean;\n  pushEnabled?: boolean;\n  webhookEnabled?: boolean;\n  telegramChatId?: string;\n  discordWebhookUrl?: string;\n}\n\nexport class NotificationRepository extends BaseRepository {\n  protected tableName = 'notifications';\n  protected model = this.prisma.notification;\n\n  /**\n   * Find notifications by user ID with pagination\n   * @param userId The user ID to filter by\n   * @param params Pagination parameters\n   * @returns Paginated notifications\n   */\n  async findByUserId(userId: string, params: PaginationParams = {}) {\n    // Get total count\n    const total = await this.prisma.notification.count({\n      where: { userId },\n    });\n\n    // Apply pagination\n    const query = this.prisma.notification.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    const paginatedQuery = applyPagination(query, params);\n    const data = await paginatedQuery;\n\n    // Return paginated result\n    return createPaginatedResult(data, total, params);\n  }\n\n  /**\n   * Find unread notifications by user ID\n   * @param userId The user ID to filter by\n   * @param limit The maximum number of notifications to return\n   * @returns An array of unread notifications\n   */\n  async findUnreadByUserId(userId: string, limit = 10): Promise {\n    return this.prisma.notification.findMany({\n      where: {\n        userId,\n        read: false,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Count unread notifications by user ID\n   * @param userId The user ID to filter by\n   * @returns The count of unread notifications\n   */\n  async countUnreadByUserId(userId: string): Promise {\n    return this.prisma.notification.count({\n      where: {\n        userId,\n        read: false,\n      },\n    });\n  }\n\n  /**\n   * Mark a notification as read\n   * @param id The notification ID\n   * @returns The updated notification\n   */\n  async markAsRead(id: string): Promise {\n    return this.prisma.notification.update({\n      where: { id },\n      data: {\n        read: true,\n        \n      },\n    });\n  }\n\n  /**\n   * Mark all notifications as read for a user\n   * @param userId The user ID\n   * @returns The number of updated notifications\n   */\n  async markAllAsRead(userId: string): Promise {\n    const result = await this.prisma.notification.updateMany({\n      where: {\n        userId,\n        read: false,\n      },\n      data: {\n        read: true,\n        \n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Delete a notification\n   * @param id The notification ID\n   * @returns The deleted notification\n   */\n  async delete(id: string): Promise {\n    return this.prisma.notification.delete({\n      where: { id },\n    });\n  }\n\n  /**\n   * Delete all notifications for a user\n   * @param userId The user ID\n   * @returns The number of deleted notifications\n   */\n  async deleteAllForUser(userId: string): Promise {\n    const result = await this.prisma.notification.deleteMany({\n      where: { userId },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Create a notification for a user\n   * @param userId The user ID\n   * @param data The notification data\n   * @returns The created notification\n   */\n  async createForUser(userId: string, data: Omit): Promise {\n    return this.prisma.notification.create({\n      data: {\n        ...data,\n        userId,\n      },\n    });\n  }\n\n  /**\n   * Create a notification for multiple users\n   * @param userIds The user IDs\n   * @param data The notification data\n   * @returns The number of created notifications\n   */\n  async createForUsers(userIds: string[], data: Omit): Promise {\n    // Create notifications in batches\n    const batchSize = 100;\n    let createdCount = 0;\n\n    for (let i = 0; i  ({\n        ...data,\n        userId,\n      }));\n\n      const result = await this.prisma.notification.createMany({\n        data: notifications,\n      });\n\n      createdCount += result.count;\n    }\n\n    return createdCount;\n  }\n\n  /**\n   * Get notification preferences for a user\n   * @param userId The user ID\n   * @returns The notification preferences\n   */\n  async getPreferences(userId: string): Promise {\n    return this.prisma.notificationPreference.findUnique({\n      where: { userId },\n    });\n  }\n\n  /**\n   * Create or update notification preferences for a user\n   * @param userId The user ID\n   * @param data The notification preference data\n   * @returns The created or updated notification preferences\n   */\n  async updatePreferences(userId: string, data: Omit): Promise {\n    return this.prisma.notificationPreference.upsert({\n      where: { userId },\n      update: {\n        ...data,\n        \n      },\n      create: {\n        ...data,\n        userId,\n      },\n    });\n  }\n\n  /**\n   * Send a notification to external channels based on user preferences\n   * @param userId The user ID\n   * @param title The notification title\n   * @param message The notification message\n   * @param type The notification type\n   * @returns True if the notification was sent successfully\n   */\n  async sendExternalNotification(userId: string, title: string, message: string, type: string): Promise {\n    try {\n      // Get user with profile\n      const user = await this.prisma.user.findUnique({\n        where: { id: userId },\n        include: {\n          profile: true,\n          notificationPreferences: true,\n        },\n      });\n\n      if (!user || !user.notificationPreferences) {\n        return false;\n      }\n\n      // Check if user has enabled notifications for this type\n      const preferences = user.notificationPreferences;\n      const profile = user.profile;\n\n      if (!profile) {\n        return false;\n      }\n\n      // Send to Telegram if enabled\n      if (preferences.telegramChatId && profile.telegramChatId) {\n        // This would be implemented with Telegram API integration\n        // await this.sendTelegramNotification(profile.telegramChatId, title, message);\n      }\n\n      // Send to Discord if enabled\n      if (preferences.discordWebhookUrl && profile.discordWebhookUrl) {\n        // This would be implemented with Discord API integration\n        // await this.sendDiscordNotification(profile.discordWebhookUrl, title, message);\n      }\n\n      // Send to Email if enabled\n      if (preferences.emailEnabled && user.email) {\n        // This would be implemented with email service integration\n        // await this.sendEmailNotification(user.email, title, message);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to send external notification:', error);\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationPreferenceCreateInput.html":{"url":"interfaces/NotificationPreferenceCreateInput.html","title":"interface - NotificationPreferenceCreateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationPreferenceCreateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/notification.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            discordWebhookUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emailEnabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            pushEnabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            telegramChatId\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhookEnabled\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        discordWebhookUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        discordWebhookUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emailEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pushEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pushEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telegramChatId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        telegramChatId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhookEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhookEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Notification, NotificationPreference } from \"@prisma/client\";\n// No need for custom interfaces; use Prisma-generated types for type safety.\nimport { BaseRepository } from './base.repository';\nimport { PaginationParams, applyPagination, createPaginatedResult } from '../utils/pagination';\n\n// Type definitions for notification operations\nexport interface NotificationCreateInput {\n  userId: string;\n  title: string;\n  message: string;\n  type: string;\n  read?: boolean;\n  data?: any;\n}\n\nexport interface NotificationUpdateInput {\n  title?: string;\n  message?: string;\n  type?: string;\n  read?: boolean;\n  data?: any;\n}\n\nexport interface NotificationPreferenceCreateInput {\n  userId: string;\n  emailEnabled?: boolean;\n  pushEnabled?: boolean;\n  webhookEnabled?: boolean;\n  telegramChatId?: string;\n  discordWebhookUrl?: string;\n}\n\nexport interface NotificationPreferenceUpdateInput {\n  emailEnabled?: boolean;\n  pushEnabled?: boolean;\n  webhookEnabled?: boolean;\n  telegramChatId?: string;\n  discordWebhookUrl?: string;\n}\n\nexport class NotificationRepository extends BaseRepository {\n  protected tableName = 'notifications';\n  protected model = this.prisma.notification;\n\n  /**\n   * Find notifications by user ID with pagination\n   * @param userId The user ID to filter by\n   * @param params Pagination parameters\n   * @returns Paginated notifications\n   */\n  async findByUserId(userId: string, params: PaginationParams = {}) {\n    // Get total count\n    const total = await this.prisma.notification.count({\n      where: { userId },\n    });\n\n    // Apply pagination\n    const query = this.prisma.notification.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    const paginatedQuery = applyPagination(query, params);\n    const data = await paginatedQuery;\n\n    // Return paginated result\n    return createPaginatedResult(data, total, params);\n  }\n\n  /**\n   * Find unread notifications by user ID\n   * @param userId The user ID to filter by\n   * @param limit The maximum number of notifications to return\n   * @returns An array of unread notifications\n   */\n  async findUnreadByUserId(userId: string, limit = 10): Promise {\n    return this.prisma.notification.findMany({\n      where: {\n        userId,\n        read: false,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Count unread notifications by user ID\n   * @param userId The user ID to filter by\n   * @returns The count of unread notifications\n   */\n  async countUnreadByUserId(userId: string): Promise {\n    return this.prisma.notification.count({\n      where: {\n        userId,\n        read: false,\n      },\n    });\n  }\n\n  /**\n   * Mark a notification as read\n   * @param id The notification ID\n   * @returns The updated notification\n   */\n  async markAsRead(id: string): Promise {\n    return this.prisma.notification.update({\n      where: { id },\n      data: {\n        read: true,\n        \n      },\n    });\n  }\n\n  /**\n   * Mark all notifications as read for a user\n   * @param userId The user ID\n   * @returns The number of updated notifications\n   */\n  async markAllAsRead(userId: string): Promise {\n    const result = await this.prisma.notification.updateMany({\n      where: {\n        userId,\n        read: false,\n      },\n      data: {\n        read: true,\n        \n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Delete a notification\n   * @param id The notification ID\n   * @returns The deleted notification\n   */\n  async delete(id: string): Promise {\n    return this.prisma.notification.delete({\n      where: { id },\n    });\n  }\n\n  /**\n   * Delete all notifications for a user\n   * @param userId The user ID\n   * @returns The number of deleted notifications\n   */\n  async deleteAllForUser(userId: string): Promise {\n    const result = await this.prisma.notification.deleteMany({\n      where: { userId },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Create a notification for a user\n   * @param userId The user ID\n   * @param data The notification data\n   * @returns The created notification\n   */\n  async createForUser(userId: string, data: Omit): Promise {\n    return this.prisma.notification.create({\n      data: {\n        ...data,\n        userId,\n      },\n    });\n  }\n\n  /**\n   * Create a notification for multiple users\n   * @param userIds The user IDs\n   * @param data The notification data\n   * @returns The number of created notifications\n   */\n  async createForUsers(userIds: string[], data: Omit): Promise {\n    // Create notifications in batches\n    const batchSize = 100;\n    let createdCount = 0;\n\n    for (let i = 0; i  ({\n        ...data,\n        userId,\n      }));\n\n      const result = await this.prisma.notification.createMany({\n        data: notifications,\n      });\n\n      createdCount += result.count;\n    }\n\n    return createdCount;\n  }\n\n  /**\n   * Get notification preferences for a user\n   * @param userId The user ID\n   * @returns The notification preferences\n   */\n  async getPreferences(userId: string): Promise {\n    return this.prisma.notificationPreference.findUnique({\n      where: { userId },\n    });\n  }\n\n  /**\n   * Create or update notification preferences for a user\n   * @param userId The user ID\n   * @param data The notification preference data\n   * @returns The created or updated notification preferences\n   */\n  async updatePreferences(userId: string, data: Omit): Promise {\n    return this.prisma.notificationPreference.upsert({\n      where: { userId },\n      update: {\n        ...data,\n        \n      },\n      create: {\n        ...data,\n        userId,\n      },\n    });\n  }\n\n  /**\n   * Send a notification to external channels based on user preferences\n   * @param userId The user ID\n   * @param title The notification title\n   * @param message The notification message\n   * @param type The notification type\n   * @returns True if the notification was sent successfully\n   */\n  async sendExternalNotification(userId: string, title: string, message: string, type: string): Promise {\n    try {\n      // Get user with profile\n      const user = await this.prisma.user.findUnique({\n        where: { id: userId },\n        include: {\n          profile: true,\n          notificationPreferences: true,\n        },\n      });\n\n      if (!user || !user.notificationPreferences) {\n        return false;\n      }\n\n      // Check if user has enabled notifications for this type\n      const preferences = user.notificationPreferences;\n      const profile = user.profile;\n\n      if (!profile) {\n        return false;\n      }\n\n      // Send to Telegram if enabled\n      if (preferences.telegramChatId && profile.telegramChatId) {\n        // This would be implemented with Telegram API integration\n        // await this.sendTelegramNotification(profile.telegramChatId, title, message);\n      }\n\n      // Send to Discord if enabled\n      if (preferences.discordWebhookUrl && profile.discordWebhookUrl) {\n        // This would be implemented with Discord API integration\n        // await this.sendDiscordNotification(profile.discordWebhookUrl, title, message);\n      }\n\n      // Send to Email if enabled\n      if (preferences.emailEnabled && user.email) {\n        // This would be implemented with email service integration\n        // await this.sendEmailNotification(user.email, title, message);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to send external notification:', error);\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationPreferenceUpdateInput.html":{"url":"interfaces/NotificationPreferenceUpdateInput.html","title":"interface - NotificationPreferenceUpdateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationPreferenceUpdateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/notification.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            discordWebhookUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            emailEnabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            pushEnabled\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            telegramChatId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhookEnabled\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        discordWebhookUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        discordWebhookUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emailEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pushEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pushEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        telegramChatId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        telegramChatId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhookEnabled\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhookEnabled:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Notification, NotificationPreference } from \"@prisma/client\";\n// No need for custom interfaces; use Prisma-generated types for type safety.\nimport { BaseRepository } from './base.repository';\nimport { PaginationParams, applyPagination, createPaginatedResult } from '../utils/pagination';\n\n// Type definitions for notification operations\nexport interface NotificationCreateInput {\n  userId: string;\n  title: string;\n  message: string;\n  type: string;\n  read?: boolean;\n  data?: any;\n}\n\nexport interface NotificationUpdateInput {\n  title?: string;\n  message?: string;\n  type?: string;\n  read?: boolean;\n  data?: any;\n}\n\nexport interface NotificationPreferenceCreateInput {\n  userId: string;\n  emailEnabled?: boolean;\n  pushEnabled?: boolean;\n  webhookEnabled?: boolean;\n  telegramChatId?: string;\n  discordWebhookUrl?: string;\n}\n\nexport interface NotificationPreferenceUpdateInput {\n  emailEnabled?: boolean;\n  pushEnabled?: boolean;\n  webhookEnabled?: boolean;\n  telegramChatId?: string;\n  discordWebhookUrl?: string;\n}\n\nexport class NotificationRepository extends BaseRepository {\n  protected tableName = 'notifications';\n  protected model = this.prisma.notification;\n\n  /**\n   * Find notifications by user ID with pagination\n   * @param userId The user ID to filter by\n   * @param params Pagination parameters\n   * @returns Paginated notifications\n   */\n  async findByUserId(userId: string, params: PaginationParams = {}) {\n    // Get total count\n    const total = await this.prisma.notification.count({\n      where: { userId },\n    });\n\n    // Apply pagination\n    const query = this.prisma.notification.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    const paginatedQuery = applyPagination(query, params);\n    const data = await paginatedQuery;\n\n    // Return paginated result\n    return createPaginatedResult(data, total, params);\n  }\n\n  /**\n   * Find unread notifications by user ID\n   * @param userId The user ID to filter by\n   * @param limit The maximum number of notifications to return\n   * @returns An array of unread notifications\n   */\n  async findUnreadByUserId(userId: string, limit = 10): Promise {\n    return this.prisma.notification.findMany({\n      where: {\n        userId,\n        read: false,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Count unread notifications by user ID\n   * @param userId The user ID to filter by\n   * @returns The count of unread notifications\n   */\n  async countUnreadByUserId(userId: string): Promise {\n    return this.prisma.notification.count({\n      where: {\n        userId,\n        read: false,\n      },\n    });\n  }\n\n  /**\n   * Mark a notification as read\n   * @param id The notification ID\n   * @returns The updated notification\n   */\n  async markAsRead(id: string): Promise {\n    return this.prisma.notification.update({\n      where: { id },\n      data: {\n        read: true,\n        \n      },\n    });\n  }\n\n  /**\n   * Mark all notifications as read for a user\n   * @param userId The user ID\n   * @returns The number of updated notifications\n   */\n  async markAllAsRead(userId: string): Promise {\n    const result = await this.prisma.notification.updateMany({\n      where: {\n        userId,\n        read: false,\n      },\n      data: {\n        read: true,\n        \n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Delete a notification\n   * @param id The notification ID\n   * @returns The deleted notification\n   */\n  async delete(id: string): Promise {\n    return this.prisma.notification.delete({\n      where: { id },\n    });\n  }\n\n  /**\n   * Delete all notifications for a user\n   * @param userId The user ID\n   * @returns The number of deleted notifications\n   */\n  async deleteAllForUser(userId: string): Promise {\n    const result = await this.prisma.notification.deleteMany({\n      where: { userId },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Create a notification for a user\n   * @param userId The user ID\n   * @param data The notification data\n   * @returns The created notification\n   */\n  async createForUser(userId: string, data: Omit): Promise {\n    return this.prisma.notification.create({\n      data: {\n        ...data,\n        userId,\n      },\n    });\n  }\n\n  /**\n   * Create a notification for multiple users\n   * @param userIds The user IDs\n   * @param data The notification data\n   * @returns The number of created notifications\n   */\n  async createForUsers(userIds: string[], data: Omit): Promise {\n    // Create notifications in batches\n    const batchSize = 100;\n    let createdCount = 0;\n\n    for (let i = 0; i  ({\n        ...data,\n        userId,\n      }));\n\n      const result = await this.prisma.notification.createMany({\n        data: notifications,\n      });\n\n      createdCount += result.count;\n    }\n\n    return createdCount;\n  }\n\n  /**\n   * Get notification preferences for a user\n   * @param userId The user ID\n   * @returns The notification preferences\n   */\n  async getPreferences(userId: string): Promise {\n    return this.prisma.notificationPreference.findUnique({\n      where: { userId },\n    });\n  }\n\n  /**\n   * Create or update notification preferences for a user\n   * @param userId The user ID\n   * @param data The notification preference data\n   * @returns The created or updated notification preferences\n   */\n  async updatePreferences(userId: string, data: Omit): Promise {\n    return this.prisma.notificationPreference.upsert({\n      where: { userId },\n      update: {\n        ...data,\n        \n      },\n      create: {\n        ...data,\n        userId,\n      },\n    });\n  }\n\n  /**\n   * Send a notification to external channels based on user preferences\n   * @param userId The user ID\n   * @param title The notification title\n   * @param message The notification message\n   * @param type The notification type\n   * @returns True if the notification was sent successfully\n   */\n  async sendExternalNotification(userId: string, title: string, message: string, type: string): Promise {\n    try {\n      // Get user with profile\n      const user = await this.prisma.user.findUnique({\n        where: { id: userId },\n        include: {\n          profile: true,\n          notificationPreferences: true,\n        },\n      });\n\n      if (!user || !user.notificationPreferences) {\n        return false;\n      }\n\n      // Check if user has enabled notifications for this type\n      const preferences = user.notificationPreferences;\n      const profile = user.profile;\n\n      if (!profile) {\n        return false;\n      }\n\n      // Send to Telegram if enabled\n      if (preferences.telegramChatId && profile.telegramChatId) {\n        // This would be implemented with Telegram API integration\n        // await this.sendTelegramNotification(profile.telegramChatId, title, message);\n      }\n\n      // Send to Discord if enabled\n      if (preferences.discordWebhookUrl && profile.discordWebhookUrl) {\n        // This would be implemented with Discord API integration\n        // await this.sendDiscordNotification(profile.discordWebhookUrl, title, message);\n      }\n\n      // Send to Email if enabled\n      if (preferences.emailEnabled && user.email) {\n        // This would be implemented with email service integration\n        // await this.sendEmailNotification(user.email, title, message);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to send external notification:', error);\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationUpdateInput.html":{"url":"interfaces/NotificationUpdateInput.html","title":"interface - NotificationUpdateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationUpdateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/notification.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            read\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        read\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        read:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Notification, NotificationPreference } from \"@prisma/client\";\n// No need for custom interfaces; use Prisma-generated types for type safety.\nimport { BaseRepository } from './base.repository';\nimport { PaginationParams, applyPagination, createPaginatedResult } from '../utils/pagination';\n\n// Type definitions for notification operations\nexport interface NotificationCreateInput {\n  userId: string;\n  title: string;\n  message: string;\n  type: string;\n  read?: boolean;\n  data?: any;\n}\n\nexport interface NotificationUpdateInput {\n  title?: string;\n  message?: string;\n  type?: string;\n  read?: boolean;\n  data?: any;\n}\n\nexport interface NotificationPreferenceCreateInput {\n  userId: string;\n  emailEnabled?: boolean;\n  pushEnabled?: boolean;\n  webhookEnabled?: boolean;\n  telegramChatId?: string;\n  discordWebhookUrl?: string;\n}\n\nexport interface NotificationPreferenceUpdateInput {\n  emailEnabled?: boolean;\n  pushEnabled?: boolean;\n  webhookEnabled?: boolean;\n  telegramChatId?: string;\n  discordWebhookUrl?: string;\n}\n\nexport class NotificationRepository extends BaseRepository {\n  protected tableName = 'notifications';\n  protected model = this.prisma.notification;\n\n  /**\n   * Find notifications by user ID with pagination\n   * @param userId The user ID to filter by\n   * @param params Pagination parameters\n   * @returns Paginated notifications\n   */\n  async findByUserId(userId: string, params: PaginationParams = {}) {\n    // Get total count\n    const total = await this.prisma.notification.count({\n      where: { userId },\n    });\n\n    // Apply pagination\n    const query = this.prisma.notification.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    const paginatedQuery = applyPagination(query, params);\n    const data = await paginatedQuery;\n\n    // Return paginated result\n    return createPaginatedResult(data, total, params);\n  }\n\n  /**\n   * Find unread notifications by user ID\n   * @param userId The user ID to filter by\n   * @param limit The maximum number of notifications to return\n   * @returns An array of unread notifications\n   */\n  async findUnreadByUserId(userId: string, limit = 10): Promise {\n    return this.prisma.notification.findMany({\n      where: {\n        userId,\n        read: false,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Count unread notifications by user ID\n   * @param userId The user ID to filter by\n   * @returns The count of unread notifications\n   */\n  async countUnreadByUserId(userId: string): Promise {\n    return this.prisma.notification.count({\n      where: {\n        userId,\n        read: false,\n      },\n    });\n  }\n\n  /**\n   * Mark a notification as read\n   * @param id The notification ID\n   * @returns The updated notification\n   */\n  async markAsRead(id: string): Promise {\n    return this.prisma.notification.update({\n      where: { id },\n      data: {\n        read: true,\n        \n      },\n    });\n  }\n\n  /**\n   * Mark all notifications as read for a user\n   * @param userId The user ID\n   * @returns The number of updated notifications\n   */\n  async markAllAsRead(userId: string): Promise {\n    const result = await this.prisma.notification.updateMany({\n      where: {\n        userId,\n        read: false,\n      },\n      data: {\n        read: true,\n        \n      },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Delete a notification\n   * @param id The notification ID\n   * @returns The deleted notification\n   */\n  async delete(id: string): Promise {\n    return this.prisma.notification.delete({\n      where: { id },\n    });\n  }\n\n  /**\n   * Delete all notifications for a user\n   * @param userId The user ID\n   * @returns The number of deleted notifications\n   */\n  async deleteAllForUser(userId: string): Promise {\n    const result = await this.prisma.notification.deleteMany({\n      where: { userId },\n    });\n\n    return result.count;\n  }\n\n  /**\n   * Create a notification for a user\n   * @param userId The user ID\n   * @param data The notification data\n   * @returns The created notification\n   */\n  async createForUser(userId: string, data: Omit): Promise {\n    return this.prisma.notification.create({\n      data: {\n        ...data,\n        userId,\n      },\n    });\n  }\n\n  /**\n   * Create a notification for multiple users\n   * @param userIds The user IDs\n   * @param data The notification data\n   * @returns The number of created notifications\n   */\n  async createForUsers(userIds: string[], data: Omit): Promise {\n    // Create notifications in batches\n    const batchSize = 100;\n    let createdCount = 0;\n\n    for (let i = 0; i  ({\n        ...data,\n        userId,\n      }));\n\n      const result = await this.prisma.notification.createMany({\n        data: notifications,\n      });\n\n      createdCount += result.count;\n    }\n\n    return createdCount;\n  }\n\n  /**\n   * Get notification preferences for a user\n   * @param userId The user ID\n   * @returns The notification preferences\n   */\n  async getPreferences(userId: string): Promise {\n    return this.prisma.notificationPreference.findUnique({\n      where: { userId },\n    });\n  }\n\n  /**\n   * Create or update notification preferences for a user\n   * @param userId The user ID\n   * @param data The notification preference data\n   * @returns The created or updated notification preferences\n   */\n  async updatePreferences(userId: string, data: Omit): Promise {\n    return this.prisma.notificationPreference.upsert({\n      where: { userId },\n      update: {\n        ...data,\n        \n      },\n      create: {\n        ...data,\n        userId,\n      },\n    });\n  }\n\n  /**\n   * Send a notification to external channels based on user preferences\n   * @param userId The user ID\n   * @param title The notification title\n   * @param message The notification message\n   * @param type The notification type\n   * @returns True if the notification was sent successfully\n   */\n  async sendExternalNotification(userId: string, title: string, message: string, type: string): Promise {\n    try {\n      // Get user with profile\n      const user = await this.prisma.user.findUnique({\n        where: { id: userId },\n        include: {\n          profile: true,\n          notificationPreferences: true,\n        },\n      });\n\n      if (!user || !user.notificationPreferences) {\n        return false;\n      }\n\n      // Check if user has enabled notifications for this type\n      const preferences = user.notificationPreferences;\n      const profile = user.profile;\n\n      if (!profile) {\n        return false;\n      }\n\n      // Send to Telegram if enabled\n      if (preferences.telegramChatId && profile.telegramChatId) {\n        // This would be implemented with Telegram API integration\n        // await this.sendTelegramNotification(profile.telegramChatId, title, message);\n      }\n\n      // Send to Discord if enabled\n      if (preferences.discordWebhookUrl && profile.discordWebhookUrl) {\n        // This would be implemented with Discord API integration\n        // await this.sendDiscordNotification(profile.discordWebhookUrl, title, message);\n      }\n\n      // Send to Email if enabled\n      if (preferences.emailEnabled && user.email) {\n        // This would be implemented with email service integration\n        // await this.sendEmailNotification(user.email, title, message);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Failed to send external notification:', error);\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NotificationsController.html":{"url":"controllers/NotificationsController.html","title":"controller - NotificationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NotificationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                notifications\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getNotificationLogs\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getNotifications\n                            \n                            \n                                    \n                                    \n                                    Async\n                                getUnreadCount\n                            \n                            \n                                    \n                                    \n                                    Async\n                                markAllAsRead\n                            \n                            \n                                    \n                                    \n                                    Async\n                                testNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getNotificationLogs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotificationLogs(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('logs')@ApiOperation({summary: 'Get notification logs'})\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notifications.controller.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotifications(req: literal type, page?: string, limit?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user notifications'})\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notifications.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getUnreadCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUnreadCount(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('unread-count')@ApiOperation({summary: 'Get unread notification count'})\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notifications.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        markAllAsRead\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAllAsRead(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('mark-all-read')@ApiOperation({summary: 'Mark all notifications as read'})\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notifications.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        testNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    testNotification(req: literal type, data: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('test')@ApiOperation({summary: 'Send test notification'})\n                \n            \n\n                    \n                        \n                            Defined in src/notifications/notifications.controller.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Query, Request } from \"@nestjs/common\";\nimport { ApiTags, ApiOperation, ApiResponse } from \"@nestjs/swagger\";\nimport { NotificationsService } from \"./notifications.service\";\n\n@ApiTags(\"notifications\")\n@Controller(\"notifications\")\nexport class NotificationsController {\n  constructor(private readonly notificationsService: NotificationsService) {}\n\n  @Get()\n  @ApiOperation({ summary: \"Get user notifications\" })\n  async getNotifications(\n    @Request() req: { user?: { id: string } },\n    @Query(\"page\") page?: string,\n    @Query(\"limit\") limit?: string\n  ) {\n    const userId = req.user?.id || \"user1\";\n    const pageNum = page ? parseInt(page, 10) : 1;\n    const limitNum = limit ? parseInt(limit, 10) : 10;\n    return this.notificationsService.getNotifications(\n      userId,\n      pageNum,\n      limitNum\n    );\n  }\n\n  @Get(\"unread-count\")\n  @ApiOperation({ summary: \"Get unread notification count\" })\n  async getUnreadCount(@Request() req: { user?: { id: string } }) {\n    const userId = req.user?.id || \"user1\";\n    return this.notificationsService.getUnreadCount(userId);\n  }\n\n  @Post(\"mark-all-read\")\n  @ApiOperation({ summary: \"Mark all notifications as read\" })\n  async markAllAsRead(@Request() req: { user?: { id: string } }) {\n    const userId = req.user?.id || \"user1\";\n    return this.notificationsService.markAllAsRead(userId);\n  }\n\n  @Get(\"logs\")\n  @ApiOperation({ summary: \"Get notification logs\" })\n  async getNotificationLogs(@Request() req: { user?: { id: string } }) {\n    const userId = req.user?.id || \"user1\";\n    return this.notificationsService.getNotificationLogs(userId);\n  }\n\n  @Post(\"test\")\n  @ApiOperation({ summary: \"Send test notification\" })\n  async testNotification(\n    @Request() req: { user?: { id: string } },\n    @Body() data: { type: string; title: string; message: string }\n  ): Promise {\n    const userId = req.user?.id || \"user1\";\n    return this.notificationsService.testNotification(userId, data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NotificationsModule.html":{"url":"modules/NotificationsModule.html","title":"module - NotificationsModule","body":"\n                   \n\n\n\n\n    Modules\n    NotificationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\n\nNotificationsService \n\nNotificationsService \n\n\n\nNotificationsModule\n\nNotificationsModule\n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/notifications/notifications.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NotificationsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NotificationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { NotificationsController } from \"./notifications.controller\";\nimport { NotificationsService } from \"./notifications.service\";\n\n@Module({\n  controllers: [NotificationsController],\n  providers: [NotificationsService],\n  exports: [NotificationsService],\n})\nexport class NotificationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NotificationsService.html":{"url":"injectables/NotificationsService.html","title":"injectable - NotificationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NotificationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notifications/notifications.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createNotification\n                            \n                            \n                                    Async\n                                getNotificationLogs\n                            \n                            \n                                    Async\n                                getNotifications\n                            \n                            \n                                    Async\n                                getUnreadCount\n                            \n                            \n                                    Async\n                                markAllAsRead\n                            \n                            \n                                    Async\n                                testNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(notificationRepository: NotificationRepository)\n                    \n                \n                        \n                            \n                                Defined in src/notifications/notifications.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        notificationRepository\n                                                  \n                                                        \n                                                                        NotificationRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    createNotification(userId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notifications.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNotificationLogs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotificationLogs(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notifications.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getNotifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNotifications(userId: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notifications.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUnreadCount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUnreadCount(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notifications.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        markAllAsRead\n                        \n                    \n                \n            \n            \n                \n                        \n                    markAllAsRead(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notifications.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        testNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    testNotification(userId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/notifications/notifications.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { NotificationRepository } from \"@zyra/database\";\n\n@Injectable()\nexport class NotificationsService {\n  constructor(\n    private readonly notificationRepository: NotificationRepository\n  ) {}\n\n  async getNotifications(userId: string, page = 1, limit = 10) {\n    return this.notificationRepository.findByUserId(userId, { page, limit });\n  }\n\n  async getUnreadCount(userId: string) {\n    const count = await this.notificationRepository.countUnreadByUserId(userId);\n    return { unread_count: count };\n  }\n\n  async markAllAsRead(userId: string) {\n    const count = await this.notificationRepository.markAllAsRead(userId);\n    return { marked_count: count };\n  }\n\n  async createNotification(\n    userId: string,\n    data: {\n      title: string;\n      message: string;\n      type: string;\n      data?: any;\n    }\n  ): Promise {\n    return this.notificationRepository.createForUser(userId, {\n      title: data.title,\n      message: data.message,\n      type: data.type,\n      userId,\n      data: data.data,\n    });\n  }\n\n  async getNotificationLogs(userId: string) {\n    // Stub - would get notification logs\n    return [];\n  }\n\n  async testNotification(\n    userId: string,\n    data: {\n      type: string;\n      title: string;\n      message: string;\n    }\n  ): Promise {\n    // Create test notification\n    const notification = await this.createNotification(userId, data);\n\n    // Send external notification\n    await this.notificationRepository.sendExternalNotification(\n      userId,\n      data.title,\n      data.message,\n      data.type\n    );\n\n    return { success: true, notification };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedExecutionsResponseDto.html":{"url":"classes/PaginatedExecutionsResponseDto.html","title":"class - PaginatedExecutionsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedExecutionsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/executions/dto/execution.dto.ts:119\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkflowExecutionDto[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Array of workflow executions', type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PaginationMetaDto\n\n                    \n                \n                \n                    \n                        Default value : new PaginationMetaDto()\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Pagination metadata', type: PaginationMetaDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:119\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginatedResult.html":{"url":"interfaces/PaginatedResult.html","title":"interface - PaginatedResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginatedResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/utils/pagination.ts\n        \n\n\n            \n                Description\n            \n            \n                Pagination result\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationParams {\n  page?: number;\n  limit?: number;\n  cursor?: string;\n  orderBy?: string;\n  orderDirection?: 'asc' | 'desc';\n}\n\n/**\n * Pagination result\n */\nexport interface PaginatedResult {\n  data: T[];\n  metadata: {\n    total: number;\n    page: number;\n    limit: number;\n    hasMore: boolean;\n    nextCursor?: string;\n  };\n}\n\n/**\n * Default pagination parameters\n */\nconst DEFAULT_PAGE = 1;\nconst DEFAULT_LIMIT = 10;\nconst MAX_LIMIT = 100;\n\n/**\n * Parse pagination parameters\n * @param params The pagination parameters\n * @returns The parsed pagination parameters\n */\nexport function parsePaginationParams(params: PaginationParams = {}): {\n  skip: number;\n  take: number;\n  cursor?: { id: string };\n  orderBy?: { [key: string]: 'asc' | 'desc' };\n} {\n  const page = Math.max(params.page || DEFAULT_PAGE, 1);\n  const limit = Math.min(params.limit || DEFAULT_LIMIT, MAX_LIMIT);\n  const skip = (page - 1) * limit;\n  \n  // Build the result\n  const result: any = {\n    skip,\n    take: limit,\n  };\n  \n  // Add cursor if provided\n  if (params.cursor) {\n    result.cursor = { id: params.cursor };\n  }\n  \n  // Add orderBy if provided\n  if (params.orderBy) {\n    result.orderBy = {\n      [params.orderBy]: params.orderDirection || 'desc',\n    };\n  } else {\n    // Default order by createdAt\n    result.orderBy = {\n      createdAt: 'desc',\n    };\n  }\n  \n  return result;\n}\n\n/**\n * Create a paginated result\n * @param data The data to paginate\n * @param total The total number of items\n * @param params The pagination parameters\n * @returns The paginated result\n */\nexport function createPaginatedResult(\n  data: T[],\n  total: number,\n  params: PaginationParams = {}\n): PaginatedResult {\n  const page = Math.max(params.page || DEFAULT_PAGE, 1);\n  const limit = Math.min(params.limit || DEFAULT_LIMIT, MAX_LIMIT);\n  const hasMore = page * limit  0 ? data[data.length - 1].id : undefined;\n  \n  return {\n    data,\n    metadata: {\n      total,\n      page,\n      limit,\n      hasMore,\n      nextCursor,\n    },\n  };\n}\n\n/**\n * Apply pagination to a Prisma query\n * @param query The Prisma query\n * @param params The pagination parameters\n * @returns The paginated query\n */\nexport function applyPagination(query: any, params: PaginationParams = {}): any {\n  const { skip, take, cursor, orderBy } = parsePaginationParams(params);\n  \n  // Apply pagination to the query\n  query = query.skip(skip).take(take);\n  \n  // Apply cursor if provided\n  if (cursor) {\n    query = query.cursor(cursor);\n  }\n  \n  // Apply orderBy if provided\n  if (orderBy) {\n    query = query.orderBy(orderBy);\n  }\n  \n  return query;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginatedWorkflowsResponseDto.html":{"url":"classes/PaginatedWorkflowsResponseDto.html","title":"class - PaginatedWorkflowsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginatedWorkflowsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workflows/dto/workflow.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkflowDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class CreateWorkflowDto {\n  @ApiProperty({ description: \"Name of the workflow\" })\n  @IsString()\n  name: string;\n\n  @ApiProperty({ description: \"Description of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\" })\n  @IsArray()\n  nodes: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\" })\n  @IsArray()\n  edges: Record[];\n}\n\nexport class UpdateWorkflowDto {\n  @ApiProperty({ description: \"Name of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ description: \"Description of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\", required: false })\n  @IsOptional()\n  @IsArray()\n  nodes?: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\", required: false })\n  @IsOptional()\n  @IsArray()\n  edges?: Record[];\n}\n\nexport class WorkflowDto {\n  @ApiProperty({ description: \"Unique identifier for the workflow\" })\n  id: string;\n\n  @ApiProperty({ description: \"Name of the workflow\" })\n  name: string;\n\n  @ApiProperty({ description: \"Description of the workflow\" })\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\" })\n  nodes: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\" })\n  edges: Record[];\n\n  @ApiProperty({ description: \"User ID who created the workflow\" })\n  userId: string;\n}\n\nexport class PaginatedWorkflowsResponseDto {\n  @ApiProperty({ type: [WorkflowDto] })\n  data: WorkflowDto[];\n\n  @ApiProperty()\n  total: number;\n\n  @ApiProperty()\n  page: number;\n\n  @ApiProperty()\n  limit: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationMetaDto.html":{"url":"classes/PaginationMetaDto.html","title":"class - PaginationMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                page\n                            \n                            \n                                    \n                                total\n                            \n                            \n                                    \n                                totalPages\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/executions/dto/execution.dto.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Current page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        total\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Total number of items'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        totalPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Total number of pages'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:57\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationParams.html":{"url":"interfaces/PaginationParams.html","title":"interface - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/utils/pagination.ts\n        \n\n\n            \n                Description\n            \n            \n                Pagination parameters\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cursor\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            limit\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            orderBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            orderDirection\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            page\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cursor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cursor:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        limit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        limit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orderBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        orderBy:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orderDirection\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        orderDirection:     \"asc\" | \"desc\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"asc\" | \"desc\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        page\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        page:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface PaginationParams {\n  page?: number;\n  limit?: number;\n  cursor?: string;\n  orderBy?: string;\n  orderDirection?: 'asc' | 'desc';\n}\n\n/**\n * Pagination result\n */\nexport interface PaginatedResult {\n  data: T[];\n  metadata: {\n    total: number;\n    page: number;\n    limit: number;\n    hasMore: boolean;\n    nextCursor?: string;\n  };\n}\n\n/**\n * Default pagination parameters\n */\nconst DEFAULT_PAGE = 1;\nconst DEFAULT_LIMIT = 10;\nconst MAX_LIMIT = 100;\n\n/**\n * Parse pagination parameters\n * @param params The pagination parameters\n * @returns The parsed pagination parameters\n */\nexport function parsePaginationParams(params: PaginationParams = {}): {\n  skip: number;\n  take: number;\n  cursor?: { id: string };\n  orderBy?: { [key: string]: 'asc' | 'desc' };\n} {\n  const page = Math.max(params.page || DEFAULT_PAGE, 1);\n  const limit = Math.min(params.limit || DEFAULT_LIMIT, MAX_LIMIT);\n  const skip = (page - 1) * limit;\n  \n  // Build the result\n  const result: any = {\n    skip,\n    take: limit,\n  };\n  \n  // Add cursor if provided\n  if (params.cursor) {\n    result.cursor = { id: params.cursor };\n  }\n  \n  // Add orderBy if provided\n  if (params.orderBy) {\n    result.orderBy = {\n      [params.orderBy]: params.orderDirection || 'desc',\n    };\n  } else {\n    // Default order by createdAt\n    result.orderBy = {\n      createdAt: 'desc',\n    };\n  }\n  \n  return result;\n}\n\n/**\n * Create a paginated result\n * @param data The data to paginate\n * @param total The total number of items\n * @param params The pagination parameters\n * @returns The paginated result\n */\nexport function createPaginatedResult(\n  data: T[],\n  total: number,\n  params: PaginationParams = {}\n): PaginatedResult {\n  const page = Math.max(params.page || DEFAULT_PAGE, 1);\n  const limit = Math.min(params.limit || DEFAULT_LIMIT, MAX_LIMIT);\n  const hasMore = page * limit  0 ? data[data.length - 1].id : undefined;\n  \n  return {\n    data,\n    metadata: {\n      total,\n      page,\n      limit,\n      hasMore,\n      nextCursor,\n    },\n  };\n}\n\n/**\n * Apply pagination to a Prisma query\n * @param query The Prisma query\n * @param params The pagination parameters\n * @returns The paginated query\n */\nexport function applyPagination(query: any, params: PaginationParams = {}): any {\n  const { skip, take, cursor, orderBy } = parsePaginationParams(params);\n  \n  // Apply pagination to the query\n  query = query.skip(skip).take(take);\n  \n  // Apply cursor if provided\n  if (cursor) {\n    query = query.cursor(cursor);\n  }\n  \n  // Apply orderBy if provided\n  if (orderBy) {\n    query = query.orderBy(orderBy);\n  }\n  \n  return query;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PolicyContext.html":{"url":"interfaces/PolicyContext.html","title":"interface - PolicyContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PolicyContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Policy context containing information about the current user and operation\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            isAdmin\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            teamIds\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isAdmin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isAdmin:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        teamIds\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        teamIds:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { User } from \"@prisma/client\";\nimport prisma from \"../client\";\n\n/**\n * Policy context containing information about the current user and operation\n */\nexport interface PolicyContext {\n  userId: string;\n  isAdmin?: boolean;\n  teamIds?: string[];\n}\n\n/**\n * Policy result indicating whether access is allowed and optional error message\n */\nexport interface PolicyResult {\n  allowed: boolean;\n  message?: string;\n}\n\n/**\n * Policy service for enforcing access control\n */\nexport class PolicyService {\n  private prisma: typeof prisma;\n\n  constructor() {\n    this.prisma = prisma;\n  }\n\n  /**\n   * Check if a user has access to a workflow\n   * @param workflowId The workflow ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkWorkflowAccess(\n    workflowId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the workflow exists and belongs to the user or their team\n    const workflow = await this.prisma.workflow.findFirst({\n      where: {\n        id: workflowId,\n        OR: [\n          { isPublic: true },\n          { userId: context.userId },\n          // Add a team access check here if your schema supports it\n        ],\n      },\n    });\n\n    if (!workflow) {\n      return {\n        allowed: false,\n        message:\n          \"Workflow not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a workflow execution\n   * @param executionId The execution ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkExecutionAccess(\n    executionId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the execution exists and belongs to the user or their team\n    const execution = await this.prisma.workflowExecution.findFirst({\n      where: {\n        id: executionId,\n        OR: [\n          { userId: context.userId },\n          {\n            workflow: {\n              OR: [\n                { userId: context.userId },\n                { isPublic: true },\n                // Add team access here only if your schema supports it\n              ],\n            },\n          },\n        ],\n      },\n    });\n\n    if (!execution) {\n      return {\n        allowed: false,\n        message:\n          \"Execution not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a node execution\n   * @param nodeExecutionId The node execution ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkNodeExecutionAccess(\n    nodeExecutionId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the node execution exists and belongs to the user or their team\n    const nodeExecution = await this.prisma.nodeExecution.findFirst({\n      where: {\n        id: nodeExecutionId,\n        OR: [\n          // Use a raw query filter for properties not in the type\n          // { userId: context.userId },\n          {\n            execution: {\n              userId: context.userId,\n            },\n          },\n          {\n            execution: {\n              workflow: {\n                OR: [{ userId: context.userId }, { isPublic: true }],\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    if (!nodeExecution) {\n      return {\n        allowed: false,\n        message:\n          \"Node execution not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a team\n   * @param teamId The team ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkTeamAccess(\n    teamId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the team exists and the user is a member\n    const team = await this.prisma.team.findFirst({\n      where: {\n        id: teamId,\n        OR: [\n          { createdBy: context.userId },\n          {\n            members: {\n              some: {\n                userId: context.userId,\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    if (!team) {\n      return {\n        allowed: false,\n        message: \"Team not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a notification\n   * @param notificationId The notification ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkNotificationAccess(\n    notificationId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the notification exists and belongs to the user\n    const notification = await this.prisma.notification.findFirst({\n      where: {\n        id: notificationId,\n      },\n    });\n\n    if (!notification) {\n      return {\n        allowed: false,\n        message:\n          \"Notification not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a wallet\n   * @param walletId The wallet ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkWalletAccess(\n    walletId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the wallet exists and belongs to the user\n    const wallet = await this.prisma.userWallet.findFirst({\n      where: {\n        id: walletId,\n      },\n    });\n\n    if (!wallet) {\n      return {\n        allowed: false,\n        message: \"Wallet not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user is an admin\n   * @param userId The user ID\n   * @returns Whether the user is an admin\n   */\n  async isUserAdmin(userId: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: {\n        profile: true,\n      },\n    });\n\n    // TODO: Add isAdmin to profile type in Prisma schema if required, or replace this logic with a valid property.\n    return false;\n  }\n\n  /**\n   * Create a policy context for a user\n   * @param userId The user ID\n   * @returns The policy context\n   */\n  async createContext(userId: string): Promise {\n    const isAdmin = await this.isUserAdmin(userId);\n\n    // Get teams the user belongs to\n    const teams = await this.prisma.teamMember.findMany({\n      where: {},\n      select: {\n        teamId: true,\n      },\n    });\n\n    const teamIds = teams.map((team) => team.teamId);\n\n    return {\n      userId,\n      isAdmin,\n      teamIds,\n    };\n  }\n\n  /**\n   * Log an audit event\n   * @param action The action performed\n   * @param  The table name\n   * @param userId The user ID\n   * @returns The created audit log\n   */\n  async logAuditEvent(action: string, tableName: string, userId: string) {\n    return this.prisma.auditLog.create({\n      data: {\n        action,\n        resource: tableName,\n        resourceId: \"\", // Optional field, can be filled later if needed\n        userId,\n        metadata: {},\n        createdAt: new Date(),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PolicyResult.html":{"url":"interfaces/PolicyResult.html","title":"interface - PolicyResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PolicyResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Policy result indicating whether access is allowed and optional error message\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            allowed\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        allowed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import type { User } from \"@prisma/client\";\nimport prisma from \"../client\";\n\n/**\n * Policy context containing information about the current user and operation\n */\nexport interface PolicyContext {\n  userId: string;\n  isAdmin?: boolean;\n  teamIds?: string[];\n}\n\n/**\n * Policy result indicating whether access is allowed and optional error message\n */\nexport interface PolicyResult {\n  allowed: boolean;\n  message?: string;\n}\n\n/**\n * Policy service for enforcing access control\n */\nexport class PolicyService {\n  private prisma: typeof prisma;\n\n  constructor() {\n    this.prisma = prisma;\n  }\n\n  /**\n   * Check if a user has access to a workflow\n   * @param workflowId The workflow ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkWorkflowAccess(\n    workflowId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the workflow exists and belongs to the user or their team\n    const workflow = await this.prisma.workflow.findFirst({\n      where: {\n        id: workflowId,\n        OR: [\n          { isPublic: true },\n          { userId: context.userId },\n          // Add a team access check here if your schema supports it\n        ],\n      },\n    });\n\n    if (!workflow) {\n      return {\n        allowed: false,\n        message:\n          \"Workflow not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a workflow execution\n   * @param executionId The execution ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkExecutionAccess(\n    executionId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the execution exists and belongs to the user or their team\n    const execution = await this.prisma.workflowExecution.findFirst({\n      where: {\n        id: executionId,\n        OR: [\n          { userId: context.userId },\n          {\n            workflow: {\n              OR: [\n                { userId: context.userId },\n                { isPublic: true },\n                // Add team access here only if your schema supports it\n              ],\n            },\n          },\n        ],\n      },\n    });\n\n    if (!execution) {\n      return {\n        allowed: false,\n        message:\n          \"Execution not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a node execution\n   * @param nodeExecutionId The node execution ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkNodeExecutionAccess(\n    nodeExecutionId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the node execution exists and belongs to the user or their team\n    const nodeExecution = await this.prisma.nodeExecution.findFirst({\n      where: {\n        id: nodeExecutionId,\n        OR: [\n          // Use a raw query filter for properties not in the type\n          // { userId: context.userId },\n          {\n            execution: {\n              userId: context.userId,\n            },\n          },\n          {\n            execution: {\n              workflow: {\n                OR: [{ userId: context.userId }, { isPublic: true }],\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    if (!nodeExecution) {\n      return {\n        allowed: false,\n        message:\n          \"Node execution not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a team\n   * @param teamId The team ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkTeamAccess(\n    teamId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the team exists and the user is a member\n    const team = await this.prisma.team.findFirst({\n      where: {\n        id: teamId,\n        OR: [\n          { createdBy: context.userId },\n          {\n            members: {\n              some: {\n                userId: context.userId,\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    if (!team) {\n      return {\n        allowed: false,\n        message: \"Team not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a notification\n   * @param notificationId The notification ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkNotificationAccess(\n    notificationId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the notification exists and belongs to the user\n    const notification = await this.prisma.notification.findFirst({\n      where: {\n        id: notificationId,\n      },\n    });\n\n    if (!notification) {\n      return {\n        allowed: false,\n        message:\n          \"Notification not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a wallet\n   * @param walletId The wallet ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkWalletAccess(\n    walletId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the wallet exists and belongs to the user\n    const wallet = await this.prisma.userWallet.findFirst({\n      where: {\n        id: walletId,\n      },\n    });\n\n    if (!wallet) {\n      return {\n        allowed: false,\n        message: \"Wallet not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user is an admin\n   * @param userId The user ID\n   * @returns Whether the user is an admin\n   */\n  async isUserAdmin(userId: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: {\n        profile: true,\n      },\n    });\n\n    // TODO: Add isAdmin to profile type in Prisma schema if required, or replace this logic with a valid property.\n    return false;\n  }\n\n  /**\n   * Create a policy context for a user\n   * @param userId The user ID\n   * @returns The policy context\n   */\n  async createContext(userId: string): Promise {\n    const isAdmin = await this.isUserAdmin(userId);\n\n    // Get teams the user belongs to\n    const teams = await this.prisma.teamMember.findMany({\n      where: {},\n      select: {\n        teamId: true,\n      },\n    });\n\n    const teamIds = teams.map((team) => team.teamId);\n\n    return {\n      userId,\n      isAdmin,\n      teamIds,\n    };\n  }\n\n  /**\n   * Log an audit event\n   * @param action The action performed\n   * @param  The table name\n   * @param userId The user ID\n   * @returns The created audit log\n   */\n  async logAuditEvent(action: string, tableName: string, userId: string) {\n    return this.prisma.auditLog.create({\n      data: {\n        action,\n        resource: tableName,\n        resourceId: \"\", // Optional field, can be filled later if needed\n        userId,\n        metadata: {},\n        createdAt: new Date(),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PolicyService.html":{"url":"classes/PolicyService.html","title":"class - PolicyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PolicyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Policy service for enforcing access control\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkExecutionAccess\n                            \n                            \n                                    Async\n                                checkNodeExecutionAccess\n                            \n                            \n                                    Async\n                                checkNotificationAccess\n                            \n                            \n                                    Async\n                                checkTeamAccess\n                            \n                            \n                                    Async\n                                checkWalletAccess\n                            \n                            \n                                    Async\n                                checkWorkflowAccess\n                            \n                            \n                                    Async\n                                createContext\n                            \n                            \n                                    Async\n                                isUserAdmin\n                            \n                            \n                                    Async\n                                logAuditEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:32\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        prisma\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:32\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkExecutionAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkExecutionAccess(executionId: string, context: PolicyContext)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Check if a user has access to a workflow execution\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                executionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The execution ID\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                            PolicyContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The policy context\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Policy result\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkNodeExecutionAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkNodeExecutionAccess(nodeExecutionId: string, context: PolicyContext)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Check if a user has access to a node execution\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                nodeExecutionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The node execution ID\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                            PolicyContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The policy context\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Policy result\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkNotificationAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkNotificationAccess(notificationId: string, context: PolicyContext)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:218\n                        \n                    \n\n\n            \n                \n                        Check if a user has access to a notification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                notificationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The notification ID\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                            PolicyContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The policy context\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Policy result\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkTeamAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkTeamAccess(teamId: string, context: PolicyContext)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Check if a user has access to a team\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                teamId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The team ID\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                            PolicyContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The policy context\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Policy result\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkWalletAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkWalletAccess(walletId: string, context: PolicyContext)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:251\n                        \n                    \n\n\n            \n                \n                        Check if a user has access to a wallet\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                walletId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The wallet ID\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                            PolicyContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The policy context\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Policy result\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        checkWorkflowAccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkWorkflowAccess(workflowId: string, context: PolicyContext)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Check if a user has access to a workflow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                workflowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The workflow ID\n\n                                            \n                                        \n                                        \n                                                context\n                                            \n                                                            PolicyContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The policy context\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Policy result\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createContext\n                        \n                    \n                \n            \n            \n                \n                        \n                    createContext(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:299\n                        \n                    \n\n\n            \n                \n                        Create a policy context for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The policy context\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isUserAdmin\n                        \n                    \n                \n            \n            \n                \n                        \n                    isUserAdmin(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:282\n                        \n                    \n\n\n            \n                \n                        Check if a user is an admin\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Whether the user is an admin\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        logAuditEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    logAuditEvent(action: string, tableName: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy.service.ts:326\n                        \n                    \n\n\n            \n                \n                        Log an audit event\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                action\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The action performed\n\n                                            \n                                        \n                                        \n                                                tableName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                The created audit log\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import type { User } from \"@prisma/client\";\nimport prisma from \"../client\";\n\n/**\n * Policy context containing information about the current user and operation\n */\nexport interface PolicyContext {\n  userId: string;\n  isAdmin?: boolean;\n  teamIds?: string[];\n}\n\n/**\n * Policy result indicating whether access is allowed and optional error message\n */\nexport interface PolicyResult {\n  allowed: boolean;\n  message?: string;\n}\n\n/**\n * Policy service for enforcing access control\n */\nexport class PolicyService {\n  private prisma: typeof prisma;\n\n  constructor() {\n    this.prisma = prisma;\n  }\n\n  /**\n   * Check if a user has access to a workflow\n   * @param workflowId The workflow ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkWorkflowAccess(\n    workflowId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the workflow exists and belongs to the user or their team\n    const workflow = await this.prisma.workflow.findFirst({\n      where: {\n        id: workflowId,\n        OR: [\n          { isPublic: true },\n          { userId: context.userId },\n          // Add a team access check here if your schema supports it\n        ],\n      },\n    });\n\n    if (!workflow) {\n      return {\n        allowed: false,\n        message:\n          \"Workflow not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a workflow execution\n   * @param executionId The execution ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkExecutionAccess(\n    executionId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the execution exists and belongs to the user or their team\n    const execution = await this.prisma.workflowExecution.findFirst({\n      where: {\n        id: executionId,\n        OR: [\n          { userId: context.userId },\n          {\n            workflow: {\n              OR: [\n                { userId: context.userId },\n                { isPublic: true },\n                // Add team access here only if your schema supports it\n              ],\n            },\n          },\n        ],\n      },\n    });\n\n    if (!execution) {\n      return {\n        allowed: false,\n        message:\n          \"Execution not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a node execution\n   * @param nodeExecutionId The node execution ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkNodeExecutionAccess(\n    nodeExecutionId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the node execution exists and belongs to the user or their team\n    const nodeExecution = await this.prisma.nodeExecution.findFirst({\n      where: {\n        id: nodeExecutionId,\n        OR: [\n          // Use a raw query filter for properties not in the type\n          // { userId: context.userId },\n          {\n            execution: {\n              userId: context.userId,\n            },\n          },\n          {\n            execution: {\n              workflow: {\n                OR: [{ userId: context.userId }, { isPublic: true }],\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    if (!nodeExecution) {\n      return {\n        allowed: false,\n        message:\n          \"Node execution not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a team\n   * @param teamId The team ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkTeamAccess(\n    teamId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the team exists and the user is a member\n    const team = await this.prisma.team.findFirst({\n      where: {\n        id: teamId,\n        OR: [\n          { createdBy: context.userId },\n          {\n            members: {\n              some: {\n                userId: context.userId,\n              },\n            },\n          },\n        ],\n      },\n    });\n\n    if (!team) {\n      return {\n        allowed: false,\n        message: \"Team not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a notification\n   * @param notificationId The notification ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkNotificationAccess(\n    notificationId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the notification exists and belongs to the user\n    const notification = await this.prisma.notification.findFirst({\n      where: {\n        id: notificationId,\n      },\n    });\n\n    if (!notification) {\n      return {\n        allowed: false,\n        message:\n          \"Notification not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user has access to a wallet\n   * @param walletId The wallet ID\n   * @param context The policy context\n   * @returns Policy result\n   */\n  async checkWalletAccess(\n    walletId: string,\n    context: PolicyContext\n  ): Promise {\n    // Admin override\n    if (context.isAdmin) {\n      return { allowed: true };\n    }\n\n    // Check if the wallet exists and belongs to the user\n    const wallet = await this.prisma.userWallet.findFirst({\n      where: {\n        id: walletId,\n      },\n    });\n\n    if (!wallet) {\n      return {\n        allowed: false,\n        message: \"Wallet not found or you do not have permission to access it\",\n      };\n    }\n\n    return { allowed: true };\n  }\n\n  /**\n   * Check if a user is an admin\n   * @param userId The user ID\n   * @returns Whether the user is an admin\n   */\n  async isUserAdmin(userId: string): Promise {\n    const user = await this.prisma.user.findUnique({\n      where: { id: userId },\n      include: {\n        profile: true,\n      },\n    });\n\n    // TODO: Add isAdmin to profile type in Prisma schema if required, or replace this logic with a valid property.\n    return false;\n  }\n\n  /**\n   * Create a policy context for a user\n   * @param userId The user ID\n   * @returns The policy context\n   */\n  async createContext(userId: string): Promise {\n    const isAdmin = await this.isUserAdmin(userId);\n\n    // Get teams the user belongs to\n    const teams = await this.prisma.teamMember.findMany({\n      where: {},\n      select: {\n        teamId: true,\n      },\n    });\n\n    const teamIds = teams.map((team) => team.teamId);\n\n    return {\n      userId,\n      isAdmin,\n      teamIds,\n    };\n  }\n\n  /**\n   * Log an audit event\n   * @param action The action performed\n   * @param  The table name\n   * @param userId The user ID\n   * @returns The created audit log\n   */\n  async logAuditEvent(action: string, tableName: string, userId: string) {\n    return this.prisma.auditLog.create({\n      data: {\n        action,\n        resource: tableName,\n        resourceId: \"\", // Optional field, can be filled later if needed\n        userId,\n        metadata: {},\n        createdAt: new Date(),\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/prisma.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/prisma.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/prisma.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        client\n                        \n                    \n                \n            \n                \n                    \n                        Default value : prisma\n                    \n                \n                    \n                        \n                                Defined in src/database/prisma.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { prisma } from \"@zyra/database\";\n\n@Injectable()\nexport class PrismaService implements OnModuleInit {\n  public client: typeof prisma = prisma;\n\n  async onModuleInit() {\n    // Connect to the database when the module initializes\n    await this.client.$connect();\n  }\n\n  async onModuleDestroy() {\n    // Disconnect from the database when the module is destroyed\n    await this.client.$disconnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileResponseDto.html":{"url":"classes/ProfileResponseDto.html","title":"class - ProfileResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                dark_mode\n                            \n                            \n                                    \n                                discord_webhook\n                            \n                            \n                                    \n                                email_notifications\n                            \n                            \n                                    \n                                full_name\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                monthly_execution_quota\n                            \n                            \n                                    \n                                monthly_executions_used\n                            \n                            \n                                    \n                                subscription_expires_at\n                            \n                            \n                                    \n                                subscription_status\n                            \n                            \n                                    \n                                subscription_tier\n                            \n                            \n                                    \n                                telegram_handle\n                            \n                            \n                                    \n                                updated_at\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        dark_mode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Dark mode enabled'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        discord_webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Discord webhook URL'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email_notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Email notifications enabled'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        monthly_execution_quota\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Monthly execution quota'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        monthly_executions_used\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Monthly executions used'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subscription_expires_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Subscription expiry date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subscription_status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Subscription status'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subscription_tier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Subscription tier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        telegram_handle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Telegram handle'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updated_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Last updated timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:72\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsBoolean,\n  IsNumber,\n} from \"class-validator\";\n\nexport class UpdateProfileDto {\n  @ApiProperty({ description: \"User full name\", required: false })\n  @IsOptional()\n  @IsString()\n  full_name?: string;\n\n  @ApiProperty({ description: \"Enable email notifications\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  email_notifications?: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\", required: false })\n  @IsOptional()\n  @IsString()\n  telegram_handle?: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\", required: false })\n  @IsOptional()\n  @IsString()\n  discord_webhook?: string;\n\n  @ApiProperty({ description: \"Dark mode preference\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  dark_mode?: boolean;\n}\n\nexport class ProfileResponseDto {\n  @ApiProperty({ description: \"User ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User full name\" })\n  full_name: string;\n\n  @ApiProperty({ description: \"Email notifications enabled\" })\n  email_notifications: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\" })\n  telegram_handle: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\" })\n  discord_webhook: string;\n\n  @ApiProperty({ description: \"Dark mode enabled\" })\n  dark_mode: boolean;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n\n  @ApiProperty({ description: \"Subscription status\" })\n  subscription_status: string;\n\n  @ApiProperty({ description: \"Subscription expiry date\" })\n  subscription_expires_at: string | null;\n\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updated_at: string;\n}\n\nexport class UsageResponseDto {\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n}\n\nexport class CreateWalletDto {\n  @ApiProperty({ description: \"Wallet address\" })\n  @IsString()\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  @IsNumber()\n  chainId: number;\n\n  @ApiProperty({ description: \"Wallet type\", required: false })\n  @IsOptional()\n  @IsString()\n  walletType?: string;\n\n  @ApiProperty({ description: \"Chain type\", required: false })\n  @IsOptional()\n  @IsString()\n  chainType?: string;\n\n  @ApiProperty({ description: \"Additional metadata\", required: false })\n  @IsOptional()\n  metadata?: Record;\n}\n\nexport class WalletResponseDto {\n  @ApiProperty({ description: \"Wallet ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Wallet type\" })\n  walletType: string;\n\n  @ApiProperty({ description: \"Chain type\" })\n  chainType: string;\n\n  @ApiProperty({ description: \"Additional metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updatedAt: string;\n}\n\nexport class WalletTransactionResponseDto {\n  @ApiProperty({ description: \"Transaction ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Transaction hash\" })\n  transactionHash: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Transaction type\" })\n  type: string;\n\n  @ApiProperty({ description: \"Amount\" })\n  amount: string;\n\n  @ApiProperty({ description: \"Token symbol\" })\n  symbol: string;\n\n  @ApiProperty({ description: \"Transaction metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QueueModule.html":{"url":"modules/QueueModule.html","title":"module - QueueModule","body":"\n                   \n\n\n\n\n    Modules\n    QueueModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/queue/queue.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QueueService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QueueService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { QueueService } from \"./queue.service\";\n\n@Module({\n  providers: [QueueService],\n  exports: [QueueService],\n})\nexport class QueueModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QueueService.html":{"url":"injectables/QueueService.html","title":"injectable - QueueService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QueueService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/queue/queue.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                channel\n                            \n                            \n                                    Private\n                                connection\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCronExecutionJob\n                            \n                            \n                                    Async\n                                addExecutionJob\n                            \n                            \n                                    Async\n                                addScheduledExecutionJob\n                            \n                            \n                                    Async\n                                cancelScheduledJob\n                            \n                            \n                                    Async\n                                getQueueStats\n                            \n                            \n                                    Private\n                                    Async\n                                initQueue\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addCronExecutionJob\n                        \n                    \n                \n            \n            \n                \n                        \n                    addCronExecutionJob(executionId: string, workflowId: string, userId: string, cronExpression: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/queue/queue.service.ts:164\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                executionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                workflowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cronExpression\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addExecutionJob\n                        \n                    \n                \n            \n            \n                \n                        \n                    addExecutionJob(executionId: string, workflowId: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/queue/queue.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                executionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                workflowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addScheduledExecutionJob\n                        \n                    \n                \n            \n            \n                \n                        \n                    addScheduledExecutionJob(executionId: string, workflowId: string, userId: string, scheduledTime: Date)\n                \n            \n\n\n                    \n                        \n                            Defined in src/queue/queue.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                executionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                workflowId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                scheduledTime\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        cancelScheduledJob\n                        \n                    \n                \n            \n            \n                \n                        \n                    cancelScheduledJob(executionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/queue/queue.service.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                executionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getQueueStats\n                        \n                    \n                \n            \n            \n                \n                        \n                    getQueueStats()\n                \n            \n\n\n                    \n                        \n                            Defined in src/queue/queue.service.ts:216\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        initQueue\n                        \n                    \n                \n            \n            \n                \n                        \n                    initQueue()\n                \n            \n\n\n                    \n                        \n                            Defined in src/queue/queue.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/queue/queue.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/queue/queue.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        channel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/queue/queue.service.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        connection\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/queue/queue.service.ts:46\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit, OnModuleDestroy } from \"@nestjs/common\";\n\nconst RABBITMQ_URL =\n  process.env.RABBITMQ_URL || \"amqp://guest:guest@localhost:5672\";\nlet channel: any;\n\n// Queue names\nexport const EXECUTION_QUEUE = \"ZYRA.EXECUTION_QUEUE\";\nexport const EXECUTION_DLQ = \"ZYRA.EXECUTION_QUEUE.DLQ\"; // Dead Letter Queue\nexport const EXECUTION_RETRY_QUEUE = \"ZYRA.EXECUTION_QUEUE.RETRY\"; // Retry Queue\nexport const EXECUTION_DELAYED_QUEUE = \"ZYRA.EXECUTION_QUEUE.DELAYED\"; // Delayed execution queue\nexport const EXECUTION_SCHEDULED_EXCHANGE = \"ZYRA.EXECUTION_SCHEDULED\"; // Exchange for scheduled messages\n\nexport const queueOptions: any[] = [\n  {\n    name: EXECUTION_QUEUE,\n    durable: true,\n    options: {\n      deadLetterExchange: \"\",\n      deadLetterRoutingKey: EXECUTION_DLQ,\n    },\n  },\n  { name: EXECUTION_RETRY_QUEUE, durable: true },\n  { name: EXECUTION_DLQ, durable: true },\n  {\n    name: EXECUTION_DELAYED_QUEUE,\n    durable: true,\n    options: {\n      deadLetterExchange: \"\",\n      deadLetterRoutingKey: EXECUTION_QUEUE, // Route to main queue when TTL expires\n    },\n  },\n];\n\nexport const exchangeOptions: any[] = [\n  {\n    name: EXECUTION_SCHEDULED_EXCHANGE,\n    type: \"direct\",\n    durable: true,\n  },\n];\n\n@Injectable()\nexport class QueueService implements OnModuleInit, OnModuleDestroy {\n  private channel: any;\n  private connection: any;\n\n  async onModuleInit() {\n    await this.initQueue();\n  }\n\n  async onModuleDestroy() {\n    if (this.channel) {\n      await this.channel.close();\n    }\n    if (this.connection) {\n      await this.connection.close();\n    }\n  }\n\n  private async initQueue(): Promise {\n    if (this.channel) return this.channel;\n\n    try {\n      const amqp = await import(\"amqplib\");\n      this.connection = await amqp.connect(RABBITMQ_URL);\n      this.channel = await this.connection.createChannel();\n\n      // Assert all exchanges\n      for (const exchange of exchangeOptions) {\n        await this.channel.assertExchange(exchange.name, exchange.type, {\n          durable: exchange.durable,\n        });\n      }\n\n      // Assert all queues\n      for (const queue of queueOptions) {\n        await this.channel.assertQueue(queue.name, queue.options);\n      }\n\n      // Set prefetch count\n      const prefetchCount = parseInt(process.env.QUEUE_PREFETCH_COUNT || \"1\");\n      await this.channel.prefetch(prefetchCount);\n\n      console.log(\"Queue service initialized successfully\");\n      return this.channel;\n    } catch (error) {\n      console.error(\"Failed to initialize queue service:\", error);\n      throw error;\n    }\n  }\n\n  async addExecutionJob(\n    executionId: string,\n    workflowId: string,\n    userId: string\n  ): Promise {\n    try {\n      const ch = await this.initQueue();\n      const payload = { executionId, workflowId, userId };\n\n      console.log(\"[Queue] Enqueue job:\", payload);\n\n      await ch.sendToQueue(\n        EXECUTION_QUEUE,\n        Buffer.from(JSON.stringify(payload)),\n        {\n          persistent: true,\n        }\n      );\n    } catch (error) {\n      console.error(\"Failed to add execution job to queue:\", error);\n      throw error;\n    }\n  }\n\n  async addScheduledExecutionJob(\n    executionId: string,\n    workflowId: string,\n    userId: string,\n    scheduledTime: Date\n  ): Promise {\n    try {\n      const ch = await this.initQueue();\n      const payload = {\n        executionId,\n        workflowId,\n        userId,\n        scheduledTime: scheduledTime.toISOString(),\n      };\n\n      const now = new Date();\n      const delay = scheduledTime.getTime() - now.getTime();\n\n      if (delay  {\n    try {\n      const ch = await this.initQueue();\n      const payload = {\n        executionId,\n        workflowId,\n        userId,\n        cronExpression,\n        type: \"cron\",\n      };\n\n      console.log(\"[Queue] Enqueue cron job:\", payload);\n\n      // For cron jobs, we'll need a separate cron processor\n      // This is a placeholder - you'd typically use a cron library\n      await ch.publish(\n        EXECUTION_SCHEDULED_EXCHANGE,\n        \"cron\",\n        Buffer.from(JSON.stringify(payload)),\n        {\n          persistent: true,\n        }\n      );\n    } catch (error) {\n      console.error(\"Failed to add cron execution job to queue:\", error);\n      throw error;\n    }\n  }\n\n  async cancelScheduledJob(executionId: string): Promise {\n    try {\n      // This is a simplified implementation\n      // In a real system, you'd need to track scheduled jobs and remove them\n      console.log(`[Queue] Cancelling scheduled job: ${executionId}`);\n\n      // You could implement this by:\n      // 1. Storing scheduled jobs in Redis with their message IDs\n      // 2. Using RabbitMQ management API to remove specific messages\n      // 3. Using a job scheduler like Bull or Agenda\n\n      return true;\n    } catch (error) {\n      console.error(\"Failed to cancel scheduled job:\", error);\n      return false;\n    }\n  }\n\n  async getQueueStats(): Promise {\n    try {\n      const ch = await this.initQueue();\n\n      const executionQueue = await ch.checkQueue(EXECUTION_QUEUE);\n      const retryQueue = await ch.checkQueue(EXECUTION_RETRY_QUEUE);\n      const dlqQueue = await ch.checkQueue(EXECUTION_DLQ);\n      const delayedQueue = await ch.checkQueue(EXECUTION_DELAYED_QUEUE);\n\n      return {\n        execution: executionQueue.messageCount,\n        retry: retryQueue.messageCount,\n        dlq: dlqQueue.messageCount,\n        delayed: delayedQueue.messageCount,\n      };\n    } catch (error) {\n      console.error(\"Failed to get queue stats:\", error);\n      return { execution: 0, retry: 0, dlq: 0, delayed: 0 };\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefineWorkflowDto.html":{"url":"classes/RefineWorkflowDto.html","title":"class - RefineWorkflowDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefineWorkflowDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/dto/workflow-generation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                edges\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                nodes\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                options\n                            \n                            \n                                    \n                                    \n                                prompt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkflowEdgeDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Current workflow edges'})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkflowNodeDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Current workflow nodes'})@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refinement options', required: false})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        prompt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Refinement prompt'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:98\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsString,\n  IsOptional,\n  IsArray,\n  IsBoolean,\n  ValidateNested,\n} from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class GenerationOptionsDto {\n  @ApiProperty({ description: \"Enable detailed mode for generation\" })\n  @IsBoolean()\n  detailedMode: boolean;\n\n  @ApiProperty({ description: \"Enable prefill configuration\" })\n  @IsBoolean()\n  prefillConfig: boolean;\n\n  @ApiProperty({\n    description: \"Domain hint for better generation\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  domainHint?: string;\n}\n\nexport class WorkflowNodeDto {\n  @ApiProperty({ description: \"Node ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Node type\" })\n  @IsString()\n  type: string;\n\n  @ApiProperty({ description: \"Node position\" })\n  position: { x: number; y: number };\n\n  @ApiProperty({ description: \"Node data\" })\n  data: Record;\n}\n\nexport class WorkflowEdgeDto {\n  @ApiProperty({ description: \"Edge ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Source node ID\" })\n  @IsString()\n  source: string;\n\n  @ApiProperty({ description: \"Target node ID\" })\n  @IsString()\n  target: string;\n\n  @ApiProperty({ description: \"Source handle\", required: false })\n  @IsOptional()\n  @IsString()\n  sourceHandle?: string;\n\n  @ApiProperty({ description: \"Target handle\", required: false })\n  @IsOptional()\n  @IsString()\n  targetHandle?: string;\n}\n\nexport class GenerateWorkflowDto {\n  @ApiProperty({ description: \"Natural language description of the workflow\" })\n  @IsString()\n  description: string;\n\n  @ApiProperty({ description: \"Generation options\", required: false })\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => GenerationOptionsDto)\n  options?: GenerationOptionsDto;\n\n  @ApiProperty({ description: \"Existing workflow nodes\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  existingNodes?: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Existing workflow edges\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  existingEdges?: WorkflowEdgeDto[];\n}\n\nexport class RefineWorkflowDto {\n  @ApiProperty({ description: \"Refinement prompt\" })\n  @IsString()\n  prompt: string;\n\n  @ApiProperty({ description: \"Refinement options\", required: false })\n  @IsOptional()\n  options?: {\n    preserveConnections?: boolean;\n    focusArea?: string;\n    intensity?: \"light\" | \"medium\" | \"heavy\";\n  };\n\n  @ApiProperty({ description: \"Current workflow nodes\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Current workflow edges\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  edges: WorkflowEdgeDto[];\n}\n\nexport class WorkflowResponseDto {\n  @ApiProperty({ description: \"Generated workflow nodes\" })\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Generated workflow edges\" })\n  edges: WorkflowEdgeDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RefreshToken.html":{"url":"interfaces/RefreshToken.html","title":"interface - RefreshToken","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RefreshToken\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            expiresAt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import * as jwt from \"jsonwebtoken\";\nimport type { Secret, SignOptions } from \"jsonwebtoken\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { JwtPayload } from \"./types\";\nimport prisma from \"../client\";\n\n// Define RefreshToken interface until Prisma generates it\ninterface RefreshToken {\n  id: string;\n  userId: string;\n  token: string;\n  expiresAt: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport class JwtService {\n  private readonly JWT_SECRET: string;\n  private readonly JWT_EXPIRES_IN: string;\n  private readonly REFRESH_TOKEN_EXPIRES_IN: number; // In days\n\n  constructor() {\n    this.JWT_SECRET =\n      process.env.JWT_SECRET || \"your-jwt-secret-key-change-in-production\";\n    this.JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"1d\";\n    this.REFRESH_TOKEN_EXPIRES_IN = parseInt(\n      process.env.REFRESH_TOKEN_EXPIRES_IN || \"7\",\n      10\n    );\n  }\n\n  /**\n   * Generate a JWT token for a user\n   * @param payload The JWT payload\n   * @returns The signed JWT token\n   */\n  generateToken(payload: JwtPayload): string {\n    return jwt.sign(\n      payload,\n      this.JWT_SECRET as Secret,\n      {\n        expiresIn: this.JWT_EXPIRES_IN,\n      } as SignOptions\n    );\n  }\n\n  /**\n   * Verify a JWT token\n   * @param token The JWT token to verify\n   * @returns The decoded payload or null if invalid\n   */\n  verifyToken(token: string): JwtPayload | null {\n    try {\n      return jwt.verify(token, this.JWT_SECRET) as JwtPayload;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Generate a refresh token for a user\n   * @param userId The user ID\n   * @returns The refresh token data\n   */\n  async generateRefreshToken(userId: string): Promise {\n    const token = uuidv4();\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + this.REFRESH_TOKEN_EXPIRES_IN);\n\n    // Delete any existing refresh tokens for this user\n    await prisma.$executeRaw`DELETE FROM refresh_tokens WHERE user_id = ${userId}`;\n\n    // Create new refresh token with raw SQL until Prisma client is regenerated\n    const result = await prisma.$executeRaw`\n      INSERT INTO refresh_tokens (id, user_id, token, expires_at, created_at, updated_at)\n      VALUES (${uuidv4()}, ${userId}, ${token}, ${expiresAt}, NOW(), NOW())\n      RETURNING id, user_id, token, expires_at, created_at, updated_at\n    `;\n\n    // Return a structured refresh token object\n    return {\n      id: uuidv4(), // This will be different from the actual DB ID until client is regenerated\n      userId,\n      token,\n      expiresAt,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n  }\n\n  /**\n   * Verify a refresh token\n   * @param token The refresh token to verify\n   * @returns The refresh token data or null if invalid\n   */\n  async verifyRefreshToken(token: string): Promise {\n    // Query refresh token using raw SQL\n    const tokens = await prisma.$queryRaw`\n      SELECT id, user_id as \"userId\", token, expires_at as \"expiresAt\", \n             created_at as \"createdAt\", updated_at as \"updatedAt\"\n      FROM refresh_tokens\n      WHERE token = ${token}\n      LIMIT 1\n    `;\n\n    const refreshToken = tokens && tokens.length > 0 ? tokens[0] : null;\n    if (!refreshToken) return null;\n\n    // Check if the token has expired\n    if (new Date() > refreshToken.expiresAt) {\n      // Delete the expired token\n      await prisma.$executeRaw`DELETE FROM refresh_tokens WHERE id = ${refreshToken.id}`;\n      return null;\n    }\n\n    return refreshToken;\n  }\n\n  /**\n   * Refresh a JWT token using a refresh token\n   * @param token The refresh token\n   * @returns The new JWT token and refresh token or null if invalid\n   */\n  async refreshToken(\n    token: string\n  ): Promise {\n    const verifiedToken = await this.verifyRefreshToken(token);\n    if (!verifiedToken) return null;\n\n    // Get the user\n    const user = await prisma.user.findUnique({\n      where: { id: verifiedToken.userId },\n    });\n\n    if (!user) return null;\n\n    // Generate a new JWT token\n    const payload: JwtPayload = {\n      userId: user.id,\n      email: user.email || undefined,\n    };\n\n    const newToken = this.generateToken(payload);\n\n    // Generate a new refresh token\n    const newRefreshToken = await this.generateRefreshToken(user.id);\n\n    // Delete the old refresh token\n    await prisma.$executeRaw`DELETE FROM refresh_tokens WHERE id = ${verifiedToken.id}`;\n\n    return {\n      token: newToken,\n      refreshToken: newRefreshToken,\n    };\n  }\n\n  /**\n   * Invalidate all refresh tokens for a user\n   * @param userId The user ID\n   */\n  async invalidateAllTokens(userId: string): Promise {\n    await prisma.$executeRaw`DELETE FROM refresh_tokens WHERE user_id = ${userId}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                fullName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User full name'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/auth.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({ description: 'User email' })\n  email: string;\n\n  @ApiProperty({ description: 'User password' })\n  password: string;\n}\n\nexport class RegisterDto {\n  @ApiProperty({ description: 'User email' })\n  email: string;\n\n  @ApiProperty({ description: 'User password' })\n  password: string;\n\n  @ApiProperty({ description: 'User full name' })\n  fullName: string;\n}\n\nexport class AuthResponseDto {\n  @ApiProperty({ description: 'JWT access token' })\n  accessToken: string;\n\n  @ApiProperty({ description: 'User information' })\n  user: {\n    id: string;\n    email: string;\n    fullName: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Session.html":{"url":"interfaces/Session.html","title":"interface - Session","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/auth/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Session information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            expiresAt\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresAt:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User, Profile, UserWallet } from \"@prisma/client\";\n\n/**\n * JWT Payload structure\n */\nexport interface JwtPayload {\n  userId: string;\n  email?: string;\n  walletAddress?: string;\n  iat?: number;\n  exp?: number;\n}\n\n/**\n * Session information\n */\nexport interface Session {\n  user: {\n    id: string;\n    email?: string;\n    walletAddress?: string;\n  };\n  accessToken: string;\n  refreshToken: string;\n  expiresAt: number;\n}\n\n/**\n * Auth user with profile\n */\nexport type AuthUser = User & {\n  profile?: Profile | null;\n  userWallets?: UserWallet[];\n};\n\n/**\n * Magic link authentication payload\n */\nexport interface MagicAuthPayload {\n  didToken: string;\n  provider?: string;\n  email?: string;\n  isOAuth?: boolean;\n  oauthProvider?: string;\n  oauthUserInfo?: Record;\n}\n\n/**\n * Authentication result\n */\nexport interface AuthResult {\n  user: AuthUser;\n  session: Session;\n}\n\n/**\n * Authentication error\n */\nexport class AuthError extends Error {\n  code: string;\n\n  constructor(message: string, code: string) {\n    super(message);\n    this.code = code;\n    this.name = \"AuthError\";\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenResponse.html":{"url":"interfaces/TokenResponse.html","title":"interface - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            expiresIn\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { UserRepository } from \"@zyra/database\";\n\ninterface JwtPayload {\n  sub: string;\n  email: string;\n  name?: string;\n}\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  name?: string;\n}\n\ninterface TokenResponse {\n  accessToken: string;\n  expiresIn: number;\n}\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userRepository: UserRepository\n  ) {}\n\n  async validateUser(payload: JwtPayload): Promise {\n    const user = await this.userRepository.findById(payload.sub);\n    if (user) {\n      return {\n        id: user.id,\n        email: user.email || \"\",\n        name: user.email ? user.email.split(\"@\")[0] : \"User\",\n      };\n    }\n    return null;\n  }\n\n  async generateToken(user: AuthUser): Promise {\n    const payload: JwtPayload = {\n      sub: user.id,\n      email: user.email,\n      name: user.name,\n    };\n\n    const accessToken = this.jwtService.sign(payload);\n\n    return {\n      accessToken,\n      expiresIn: 3600, // 1 hour\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TransactionParams.html":{"url":"interfaces/TransactionParams.html","title":"interface - TransactionParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TransactionParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts\n        \n\n\n            \n                Description\n            \n            \n                Transaction parameters for sending transactions\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum ChainType {\n  EVM = \"evm\",\n  SOLANA = \"solana\",\n}\n\n/**\n * Wallet information including address and chain details\n */\nexport interface WalletInfo {\n  // Standard fields used by the wallet adapter\n  address: string;\n  chainType: ChainType;\n  chainId: string | number;\n  provider: string;\n\n  // Database compatibility fields\n  network_id?: string; // Maps to chain_id in database\n  smart_wallet_address?: string; // Maps to address in database\n  userInfo?: {\n    email?: string;\n    name?: string;\n    profileImage?: string;\n    oauthProvider?: string;\n    phoneNumber?: string;\n  };\n}\n\n/**\n * Wallet balance information\n */\nexport interface WalletBalance {\n  raw: string;\n  formatted: string;\n  symbol: string;\n}\n\n/**\n * Transaction parameters for sending transactions\n */\nexport interface TransactionParams {\n  to: string;\n  value: string;\n  data?: string;\n}\n\n/**\n * Common interface for all wallet providers\n */\nexport interface WalletProvider {\n  connect(email: string): Promise;\n  getBalance(address: string): Promise;\n  sendTransaction(params: TransactionParams): Promise;\n  disconnect(): Promise;\n  isConnected(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateExecutionDto.html":{"url":"classes/UpdateExecutionDto.html","title":"class - UpdateExecutionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateExecutionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                error\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                output\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Error message if execution failed', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        output\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Output data from the execution', required: false})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'New status for the execution', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                dark_mode\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                discord_webhook\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                email_notifications\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                full_name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                telegram_handle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        dark_mode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Dark mode preference', required: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        discord_webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Discord webhook URL', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        email_notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Enable email notifications', required: false})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        full_name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User full name', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        telegram_handle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Telegram handle', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsBoolean,\n  IsNumber,\n} from \"class-validator\";\n\nexport class UpdateProfileDto {\n  @ApiProperty({ description: \"User full name\", required: false })\n  @IsOptional()\n  @IsString()\n  full_name?: string;\n\n  @ApiProperty({ description: \"Enable email notifications\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  email_notifications?: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\", required: false })\n  @IsOptional()\n  @IsString()\n  telegram_handle?: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\", required: false })\n  @IsOptional()\n  @IsString()\n  discord_webhook?: string;\n\n  @ApiProperty({ description: \"Dark mode preference\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  dark_mode?: boolean;\n}\n\nexport class ProfileResponseDto {\n  @ApiProperty({ description: \"User ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User full name\" })\n  full_name: string;\n\n  @ApiProperty({ description: \"Email notifications enabled\" })\n  email_notifications: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\" })\n  telegram_handle: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\" })\n  discord_webhook: string;\n\n  @ApiProperty({ description: \"Dark mode enabled\" })\n  dark_mode: boolean;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n\n  @ApiProperty({ description: \"Subscription status\" })\n  subscription_status: string;\n\n  @ApiProperty({ description: \"Subscription expiry date\" })\n  subscription_expires_at: string | null;\n\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updated_at: string;\n}\n\nexport class UsageResponseDto {\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n}\n\nexport class CreateWalletDto {\n  @ApiProperty({ description: \"Wallet address\" })\n  @IsString()\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  @IsNumber()\n  chainId: number;\n\n  @ApiProperty({ description: \"Wallet type\", required: false })\n  @IsOptional()\n  @IsString()\n  walletType?: string;\n\n  @ApiProperty({ description: \"Chain type\", required: false })\n  @IsOptional()\n  @IsString()\n  chainType?: string;\n\n  @ApiProperty({ description: \"Additional metadata\", required: false })\n  @IsOptional()\n  metadata?: Record;\n}\n\nexport class WalletResponseDto {\n  @ApiProperty({ description: \"Wallet ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Wallet type\" })\n  walletType: string;\n\n  @ApiProperty({ description: \"Chain type\" })\n  chainType: string;\n\n  @ApiProperty({ description: \"Additional metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updatedAt: string;\n}\n\nexport class WalletTransactionResponseDto {\n  @ApiProperty({ description: \"Transaction ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Transaction hash\" })\n  transactionHash: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Transaction type\" })\n  type: string;\n\n  @ApiProperty({ description: \"Amount\" })\n  amount: string;\n\n  @ApiProperty({ description: \"Token symbol\" })\n  symbol: string;\n\n  @ApiProperty({ description: \"Transaction metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateWorkflowDto.html":{"url":"classes/UpdateWorkflowDto.html","title":"class - UpdateWorkflowDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateWorkflowDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workflows/dto/workflow.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                edges\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                nodes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the workflow', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Workflow edges configuration', required: false})@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the workflow', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Workflow nodes configuration', required: false})@IsOptional()@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class CreateWorkflowDto {\n  @ApiProperty({ description: \"Name of the workflow\" })\n  @IsString()\n  name: string;\n\n  @ApiProperty({ description: \"Description of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\" })\n  @IsArray()\n  nodes: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\" })\n  @IsArray()\n  edges: Record[];\n}\n\nexport class UpdateWorkflowDto {\n  @ApiProperty({ description: \"Name of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ description: \"Description of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\", required: false })\n  @IsOptional()\n  @IsArray()\n  nodes?: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\", required: false })\n  @IsOptional()\n  @IsArray()\n  edges?: Record[];\n}\n\nexport class WorkflowDto {\n  @ApiProperty({ description: \"Unique identifier for the workflow\" })\n  id: string;\n\n  @ApiProperty({ description: \"Name of the workflow\" })\n  name: string;\n\n  @ApiProperty({ description: \"Description of the workflow\" })\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\" })\n  nodes: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\" })\n  edges: Record[];\n\n  @ApiProperty({ description: \"User ID who created the workflow\" })\n  userId: string;\n}\n\nexport class PaginatedWorkflowsResponseDto {\n  @ApiProperty({ type: [WorkflowDto] })\n  data: WorkflowDto[];\n\n  @ApiProperty()\n  total: number;\n\n  @ApiProperty()\n  page: number;\n\n  @ApiProperty()\n  limit: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsageResponseDto.html":{"url":"classes/UsageResponseDto.html","title":"class - UsageResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsageResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                monthly_execution_quota\n                            \n                            \n                                    \n                                monthly_executions_used\n                            \n                            \n                                    \n                                subscription_tier\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        monthly_execution_quota\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Monthly execution quota'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        monthly_executions_used\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Monthly executions used'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        subscription_tier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Subscription tier'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsBoolean,\n  IsNumber,\n} from \"class-validator\";\n\nexport class UpdateProfileDto {\n  @ApiProperty({ description: \"User full name\", required: false })\n  @IsOptional()\n  @IsString()\n  full_name?: string;\n\n  @ApiProperty({ description: \"Enable email notifications\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  email_notifications?: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\", required: false })\n  @IsOptional()\n  @IsString()\n  telegram_handle?: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\", required: false })\n  @IsOptional()\n  @IsString()\n  discord_webhook?: string;\n\n  @ApiProperty({ description: \"Dark mode preference\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  dark_mode?: boolean;\n}\n\nexport class ProfileResponseDto {\n  @ApiProperty({ description: \"User ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User full name\" })\n  full_name: string;\n\n  @ApiProperty({ description: \"Email notifications enabled\" })\n  email_notifications: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\" })\n  telegram_handle: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\" })\n  discord_webhook: string;\n\n  @ApiProperty({ description: \"Dark mode enabled\" })\n  dark_mode: boolean;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n\n  @ApiProperty({ description: \"Subscription status\" })\n  subscription_status: string;\n\n  @ApiProperty({ description: \"Subscription expiry date\" })\n  subscription_expires_at: string | null;\n\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updated_at: string;\n}\n\nexport class UsageResponseDto {\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n}\n\nexport class CreateWalletDto {\n  @ApiProperty({ description: \"Wallet address\" })\n  @IsString()\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  @IsNumber()\n  chainId: number;\n\n  @ApiProperty({ description: \"Wallet type\", required: false })\n  @IsOptional()\n  @IsString()\n  walletType?: string;\n\n  @ApiProperty({ description: \"Chain type\", required: false })\n  @IsOptional()\n  @IsString()\n  chainType?: string;\n\n  @ApiProperty({ description: \"Additional metadata\", required: false })\n  @IsOptional()\n  metadata?: Record;\n}\n\nexport class WalletResponseDto {\n  @ApiProperty({ description: \"Wallet ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Wallet type\" })\n  walletType: string;\n\n  @ApiProperty({ description: \"Chain type\" })\n  chainType: string;\n\n  @ApiProperty({ description: \"Additional metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updatedAt: string;\n}\n\nexport class WalletTransactionResponseDto {\n  @ApiProperty({ description: \"Transaction ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Transaction hash\" })\n  transactionHash: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Transaction type\" })\n  type: string;\n\n  @ApiProperty({ description: \"Amount\" })\n  amount: string;\n\n  @ApiProperty({ description: \"Token symbol\" })\n  symbol: string;\n\n  @ApiProperty({ description: \"Transaction metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getUsage\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('profile')@ApiOperation({summary: 'Get user profile'})@ApiResponse({status: 200, description: 'Returns user profile', type: ProfileResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getUsage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsage(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('usage')@ApiOperation({summary: 'Get user usage statistics'})@ApiResponse({status: 200, description: 'Returns user usage data', type: UsageResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(data: literal type, req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile')@ApiOperation({summary: 'Update user profile'})@ApiResponse({status: 200, description: 'Profile updated successfully', type: ProfileResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Put,\n  Body,\n  Request,\n  HttpException,\n  HttpStatus,\n} from \"@nestjs/common\";\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from \"@nestjs/swagger\";\nimport { UserService } from \"./user.service\";\nimport {\n  UpdateProfileDto,\n  ProfileResponseDto,\n  UsageResponseDto,\n} from \"./dto/user.dto\";\n\n@ApiTags(\"user\")\n@Controller(\"user\")\n@ApiBearerAuth()\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get(\"profile\")\n  @ApiOperation({ summary: \"Get user profile\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Returns user profile\",\n    type: ProfileResponseDto,\n  })\n  async getProfile(@Request() req: any) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        throw new HttpException(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n      }\n\n      const profile = await this.userService.getProfile(userId);\n      return profile;\n    } catch (error) {\n      console.error(\"Error fetching user profile:\", error);\n      throw new HttpException(\n        \"Failed to fetch user profile\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Put(\"profile\")\n  @ApiOperation({ summary: \"Update user profile\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Profile updated successfully\",\n    type: ProfileResponseDto,\n  })\n  async updateProfile(\n    @Body()\n    data: {\n      full_name?: string;\n      email_notifications?: boolean;\n      telegram_handle?: string;\n      discord_webhook?: string;\n      dark_mode?: boolean;\n    },\n    @Request() req: any\n  ) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        throw new HttpException(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n      }\n\n      const profile = await this.userService.updateProfile(userId, data);\n      return profile;\n    } catch (error) {\n      console.error(\"Error updating user profile:\", error);\n      throw new HttpException(\n        \"Failed to update user profile\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n\n  @Get(\"usage\")\n  @ApiOperation({ summary: \"Get user usage statistics\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Returns user usage data\",\n    type: UsageResponseDto,\n  })\n  async getUsage(@Request() req: any) {\n    try {\n      const userId = req.user?.id;\n      if (!userId) {\n        throw new HttpException(\"Unauthorized\", HttpStatus.UNAUTHORIZED);\n      }\n\n      const usage = await this.userService.getUsage(userId);\n      return usage;\n    } catch (error) {\n      console.error(\"Error fetching usage data:\", error);\n      throw new HttpException(\n        \"Failed to fetch usage data\",\n        HttpStatus.INTERNAL_SERVER_ERROR\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nWalletsService \n\nWalletsService \n\nWalletsService  -->\n\nUserModule->WalletsService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nWalletsService\n\nWalletsService\n\nUserModule -->\n\nWalletsService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                        \n                            WalletsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                        \n                            WalletsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                        \n                            WalletsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { DatabaseModule } from \"../database/database.module\";\nimport { UserController } from \"./user.controller\";\nimport { UserService } from \"./user.service\";\nimport { WalletsController } from \"./wallets.controller\";\nimport { WalletsService } from \"./wallets.service\";\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [UserController, WalletsController],\n  providers: [UserService, WalletsService],\n  exports: [UserService, WalletsService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/repositories/user.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/database/repositories/user.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/user.repository.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/user.repository.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/user.repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/user.repository.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(userId: string, data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/user.repository.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport { User } from \"@zyra/database\";\n\n@Injectable()\nexport class UserRepository {\n  constructor(private prisma: PrismaService) {}\n\n  async findById(id: string): Promise {\n    return this.prisma.client.user.findUnique({\n      where: { id },\n      include: { profile: true },\n    });\n  }\n\n  async findByEmail(email: string): Promise {\n    return this.prisma.client.user.findUnique({\n      where: { email },\n      include: { profile: true },\n    });\n  }\n\n  async create(data: { email: string; fullName?: string }): Promise {\n    return this.prisma.client.user.create({\n      data: {\n        email: data.email,\n        profile: {\n          create: {\n            email: data.email,\n            fullName: data.fullName,\n          },\n        },\n      },\n      include: { profile: true },\n    });\n  }\n\n  async update(id: string, data: Partial): Promise {\n    return this.prisma.client.user.update({\n      where: { id },\n      data,\n      include: { profile: true },\n    });\n  }\n\n  async updateProfile(\n    userId: string,\n    data: {\n      fullName?: string;\n      avatarUrl?: string;\n      subscriptionTier?: string;\n      subscriptionStatus?: string;\n      subscriptionExpiresAt?: Date;\n      monthlyExecutionQuota?: number;\n      monthlyExecutionsUsed?: number;\n      stripeCustomerId?: string;\n      stripeSubscriptionId?: string;\n      telegramChatId?: string;\n      discordWebhookUrl?: string;\n      emailNotifications?: boolean;\n      telegramHandle?: string;\n      discordWebhook?: string;\n      darkMode?: boolean;\n    }\n  ): Promise {\n    // Map the frontend field names to database field names\n    const profileData: any = {};\n\n    if (data.fullName !== undefined) profileData.fullName = data.fullName;\n    if (data.avatarUrl !== undefined) profileData.avatarUrl = data.avatarUrl;\n    if (data.subscriptionTier !== undefined)\n      profileData.subscriptionTier = data.subscriptionTier;\n    if (data.subscriptionStatus !== undefined)\n      profileData.subscriptionStatus = data.subscriptionStatus;\n    if (data.subscriptionExpiresAt !== undefined)\n      profileData.subscriptionExpiresAt = data.subscriptionExpiresAt;\n    if (data.monthlyExecutionQuota !== undefined)\n      profileData.monthlyExecutionQuota = data.monthlyExecutionQuota;\n    if (data.monthlyExecutionsUsed !== undefined)\n      profileData.monthlyExecutionsUsed = data.monthlyExecutionsUsed;\n    if (data.stripeCustomerId !== undefined)\n      profileData.stripeCustomerId = data.stripeCustomerId;\n    if (data.stripeSubscriptionId !== undefined)\n      profileData.stripeSubscriptionId = data.stripeSubscriptionId;\n    if (data.telegramChatId !== undefined)\n      profileData.telegramChatId = data.telegramChatId;\n    if (data.discordWebhookUrl !== undefined)\n      profileData.discordWebhookUrl = data.discordWebhookUrl;\n\n    // Map frontend fields to database fields\n    if (data.telegramHandle !== undefined)\n      profileData.telegramChatId = data.telegramHandle;\n    if (data.discordWebhook !== undefined)\n      profileData.discordWebhookUrl = data.discordWebhook;\n\n    return this.prisma.client.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          upsert: {\n            create: {\n              email: \"\", // Will be populated if needed\n              ...profileData,\n              updatedAt: new Date(),\n            },\n            update: {\n              ...profileData,\n              updatedAt: new Date(),\n            },\n          },\n        },\n      },\n      include: { profile: true },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                getUsage\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUsage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsage(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(userId: string, updateData: UpdateProfileDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateData\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport { UserRepository } from \"@zyra/database\";\nimport {\n  UpdateProfileDto,\n  ProfileResponseDto,\n  UsageResponseDto,\n} from \"./dto/user.dto\";\n\n@Injectable()\nexport class UserService {\n  constructor(private readonly userRepository: UserRepository) {}\n\n  async getProfile(userId: string): Promise {\n    const user = await this.userRepository.findWithProfileAndWallets(userId);\n\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n\n    // Return default profile if no profile exists\n    if (!user.profile) {\n      return {\n        id: userId,\n        full_name: \"\",\n        email_notifications: true,\n        telegram_handle: \"\",\n        discord_webhook: \"\",\n        dark_mode: false,\n        subscription_tier: \"free\",\n        subscription_status: \"active\",\n        subscription_expires_at: null,\n        monthly_execution_quota: 100,\n        monthly_executions_used: 0,\n        updated_at: new Date().toISOString(),\n      };\n    }\n\n    return {\n      id: user.id,\n      full_name: user.profile.fullName || \"\",\n      email_notifications: true,\n      telegram_handle: user.profile.telegramChatId || \"\",\n      discord_webhook: user.profile.discordWebhookUrl || \"\",\n      dark_mode: false,\n      subscription_tier: user.profile.subscriptionTier || \"free\",\n      subscription_status: user.profile.subscriptionStatus || \"active\",\n      subscription_expires_at:\n        user.profile.subscriptionExpiresAt?.toISOString() || null,\n      monthly_execution_quota: user.profile.monthlyExecutionQuota || 100,\n      monthly_executions_used: user.profile.monthlyExecutionsUsed || 0,\n      updated_at:\n        user.profile.updatedAt?.toISOString() || new Date().toISOString(),\n    };\n  }\n\n  async updateProfile(\n    userId: string,\n    updateData: UpdateProfileDto\n  ): Promise {\n    await this.userRepository.updateProfile(userId, {\n      fullName: updateData.full_name,\n      telegramChatId: updateData.telegram_handle,\n      discordWebhookUrl: updateData.discord_webhook,\n    });\n\n    return this.getProfile(userId);\n  }\n\n  async getUsage(userId: string): Promise {\n    const user = await this.userRepository.findWithProfileAndWallets(userId);\n\n    if (!user) {\n      throw new NotFoundException(\"User not found\");\n    }\n\n    return {\n      monthly_execution_quota: user.profile?.monthlyExecutionQuota || 100,\n      monthly_executions_used: user.profile?.monthlyExecutionsUsed || 0,\n      subscription_tier: user.profile?.subscriptionTier || \"free\",\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WalletBalance.html":{"url":"interfaces/WalletBalance.html","title":"interface - WalletBalance","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WalletBalance\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts\n        \n\n\n            \n                Description\n            \n            \n                Wallet balance information\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            formatted\n                                        \n                                \n                                \n                                        \n                                            raw\n                                        \n                                \n                                \n                                        \n                                            symbol\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        formatted\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formatted:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        raw\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        raw:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        symbol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum ChainType {\n  EVM = \"evm\",\n  SOLANA = \"solana\",\n}\n\n/**\n * Wallet information including address and chain details\n */\nexport interface WalletInfo {\n  // Standard fields used by the wallet adapter\n  address: string;\n  chainType: ChainType;\n  chainId: string | number;\n  provider: string;\n\n  // Database compatibility fields\n  network_id?: string; // Maps to chain_id in database\n  smart_wallet_address?: string; // Maps to address in database\n  userInfo?: {\n    email?: string;\n    name?: string;\n    profileImage?: string;\n    oauthProvider?: string;\n    phoneNumber?: string;\n  };\n}\n\n/**\n * Wallet balance information\n */\nexport interface WalletBalance {\n  raw: string;\n  formatted: string;\n  symbol: string;\n}\n\n/**\n * Transaction parameters for sending transactions\n */\nexport interface TransactionParams {\n  to: string;\n  value: string;\n  data?: string;\n}\n\n/**\n * Common interface for all wallet providers\n */\nexport interface WalletProvider {\n  connect(email: string): Promise;\n  getBalance(address: string): Promise;\n  sendTransaction(params: TransactionParams): Promise;\n  disconnect(): Promise;\n  isConnected(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WalletCreateInput.html":{"url":"interfaces/WalletCreateInput.html","title":"interface - WalletCreateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WalletCreateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/wallet.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            chainId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            chainType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                        \n                                            walletAddress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            walletType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chainId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chainId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chainType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chainType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        walletAddress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        walletAddress:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        walletType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        walletType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  UserWallet,\n  WalletTransaction,\n  BlockchainTransaction,\n  Prisma,\n} from \"@prisma/client\";\n// No need for custom interfaces; use Prisma-generated types for type safety.\nimport { BaseRepository } from \"./base.repository\";\nimport { validateWallet } from \"../utils/validation\";\n\n// Type definitions for wallet operations\nexport interface WalletCreateInput {\n  userId: string;\n  chainId: string;\n  walletAddress: string;\n  walletType?: string;\n  chainType?: string;\n  metadata?: any;\n}\n\nexport interface WalletUpdateInput {\n  chainId?: string;\n  walletAddress?: string;\n  walletType?: string;\n  chainType?: string;\n  metadata?: any;\n}\n\nexport type WalletTransactionCreateInput = Prisma.WalletTransactionCreateInput;\nexport type BlockchainTransactionCreateInput =\n  Prisma.BlockchainTransactionCreateInput;\n\nexport interface WalletTransactionFindManyInput {\n  skip?: number;\n  take?: number;\n  orderBy?: { [key: string]: \"asc\" | \"desc\" };\n}\nexport type WalletWithTransactions = UserWallet & {\n  transactions: WalletTransaction[];\n};\n\nexport class WalletRepository extends BaseRepository {\n  protected tableName = \"user_wallets\";\n  protected model = this.prisma.userWallet;\n\n  /**\n   * Saves (creates or updates) a wallet.\n   * Ensures the wallet is associated with the correct user.\n   * @param userId The user's ID.\n   * @param walletAddress The wallet's blockchain address.\n   * @param chainId The numeric chain ID.\n   * @param walletType The type of the wallet (e.g., 'magic', 'metamask').\n   * @param chainType The type of the chain (e.g., 'ethereum', 'mumbai').\n   * @returns The created or updated wallet.\n   */\n  async saveWallet(\n    userId: string,\n    walletAddress: string,\n    chainId: number, // Received as number\n    walletType: string,\n    chainType: string\n  ): Promise {\n    if (\n      !userId ||\n      !walletAddress ||\n      chainId === undefined ||\n      !walletType ||\n      !chainType\n    ) {\n      throw new Error(\"Missing required fields for saving wallet.\");\n    }\n\n    const chainIdString = chainId.toString();\n\n    // Use findFirst if findUnique({ where: { walletAddress } }) causes type errors.\n    // This assumes walletAddress should be unique; ensure @unique in schema.prisma.\n    const existingWallet = await this.prisma.userWallet.findFirst({\n      where: { walletAddress: walletAddress },\n    });\n\n    if (existingWallet) {\n      // Wallet exists, update it.\n      // Consider business logic for when existingWallet.userId !== userId.\n      // For this example, we update the wallet and ensure it's linked to the provided userId.\n      return this.prisma.userWallet.update({\n        where: { id: existingWallet.id }, // Use the ID of the found wallet for the update's where clause\n        data: {\n          chainId: chainIdString,\n          walletType,\n          chainType,\n          // If you want to allow changing the user associated with this wallet address:\n          user: { connect: { id: userId } },\n          // If userId is a direct scalar field on UserWallet and you also want to update it:\n          // userId: userId,\n        },\n      });\n    } else {\n      // Wallet doesn't exist, create it\n      return this.prisma.userWallet.create({\n        data: {\n          walletAddress,\n          chainId: chainIdString,\n          walletType,\n          chainType,\n          user: { connect: { id: userId } },\n          // If userId is also a direct scalar field that needs to be set:\n          // userId: userId,\n        },\n      });\n    }\n  }\n\n  /**\n   * Find a wallet by address\n   * @param walletAddress The wallet address to find\n   * @returns The wallet or null\n   */\n  async findByAddress(walletAddress: string): Promise {\n    return this.prisma.userWallet.findFirst({\n      where: { walletAddress },\n    });\n  }\n\n  /**\n   * Find wallets by user ID\n   * @param userId The user ID to filter by\n   * @returns An array of wallets\n   */\n  async findByUserId(userId: string): Promise {\n    return this.prisma.userWallet.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  }\n\n  /**\n   * Find a wallet with its transactions\n   * @param id The wallet ID\n   * @returns The wallet with transactions or null\n   */\n  async findWithTransactions(\n    id: string\n  ): Promise {\n    const wallet = await this.prisma.userWallet.findUnique({\n      where: { id },\n    });\n    if (!wallet) return null;\n    const transactions = await this.prisma.walletTransaction.findMany({\n      where: { walletAddress: wallet.walletAddress },\n      orderBy: { createdAt: \"desc\" },\n    });\n    return { ...wallet, transactions };\n  }\n\n  /**\n   * Create a wallet for a user\n   * @param userId The user ID\n   * @param data The wallet data\n   * @returns The created wallet\n   */\n  async createForUser(\n    userId: string,\n    data: Omit\n  ): Promise {\n    // Validate wallet data\n    validateWallet(data);\n\n    // Check if wallet already exists\n    const existingWallet = await this.findByAddress(\n      data.walletAddress as string\n    );\n    if (existingWallet) {\n      throw new Error(\n        `Wallet with address ${data.walletAddress} already exists`\n      );\n    }\n\n    const { userId: _userId, ...walletData } = data;\n    return this.prisma.userWallet.create({\n      data: {\n        ...walletData,\n        user: {\n          connect: { id: userId },\n        },\n      },\n    });\n  }\n\n  /**\n   * Create a wallet transaction\n   * @param data The transaction data\n   * @returns The created transaction\n   */\n  async createTransaction(\n    data: WalletTransactionCreateInput\n  ): Promise {\n    return this.prisma.walletTransaction.create({\n      data,\n    });\n  }\n\n  /**\n   * Find transactions by wallet ID\n   * @param walletId The wallet ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async findTransactionsByWalletId(\n    walletId: string,\n    limit = 10\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { walletAddress: walletId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Find transactions by user ID\n   * @param userId The user ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async findTransactionsByUserId(\n    userId: string,\n    limit = 10\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Find transactions by wallet address\n   * @param walletAddress The wallet address\n   * @param options Options for the query\n   * @returns An array of transactions\n   */\n  async findTransactionsByWalletAddress(\n    walletAddress: string,\n    options?: WalletTransactionFindManyInput\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { walletAddress },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      ...options,\n    });\n  }\n\n  /**\n   * Create a blockchain transaction\n   * @param data The blockchain transaction data\n   * @returns The created blockchain transaction\n   */\n  async createBlockchainTransaction(\n    data: BlockchainTransactionCreateInput\n  ): Promise {\n    return this.prisma.blockchainTransaction.create({\n      data,\n    });\n  }\n\n  /**\n   * Find blockchain transactions by execution ID\n   * @param executionId The execution ID\n   * @returns An array of blockchain transactions\n   */\n  async findBlockchainTransactionsByExecutionId(\n    executionId: string\n  ): Promise {\n    return this.prisma.blockchainTransaction.findMany({\n      where: { executionId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  }\n\n  /**\n   * Update a blockchain transaction status\n   * @param id The blockchain transaction ID\n   * @param status The new status\n   * @param txHash The transaction hash\n   * @param blockNumber The block number\n   * @returns The updated blockchain transaction\n   */\n  async updateBlockchainTransactionStatus(\n    id: string,\n    status: string,\n    txHash?: string,\n    blockNumber?: number\n  ): Promise {\n    const data: Prisma.BlockchainTransactionUpdateInput = {\n      status,\n      updatedAt: new Date(),\n    };\n\n    if (txHash) {\n      data.txHash = txHash;\n    }\n\n    if (blockNumber) {\n      data.blockNumber = blockNumber;\n    }\n\n    return this.prisma.blockchainTransaction.update({\n      where: { id },\n      data,\n    });\n  }\n\n  /**\n   * Get wallet balance from blockchain\n   * This is a placeholder for integration with blockchain APIs\n   * @param walletAddress The wallet address\n   * @param chainId The chain ID\n   * @returns The wallet balance\n   */\n  async getWalletBalance(\n    walletAddress: string,\n    chainId: string\n  ): Promise {\n    // This would be implemented with blockchain API integration\n    // For now, return a placeholder\n    return \"0\";\n  }\n\n  /**\n   * Alias for findTransactionsByUserId for backward compatibility\n   * @param userId The user ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async getTransactions(\n    userId: string,\n    limit = 10\n  ): Promise {\n    return this.findTransactionsByUserId(userId, limit);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WalletInfo.html":{"url":"interfaces/WalletInfo.html","title":"interface - WalletInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WalletInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts\n        \n\n\n            \n                Description\n            \n            \n                Wallet information including address and chain details\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            address\n                                        \n                                \n                                \n                                        \n                                            chainId\n                                        \n                                \n                                \n                                        \n                                            chainType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            network_id\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            smart_wallet_address\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            userInfo\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chainId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chainId:     string | number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chainType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chainType:         ChainType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ChainType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        network_id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        network_id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        smart_wallet_address\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        smart_wallet_address:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userInfo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userInfo:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export enum ChainType {\n  EVM = \"evm\",\n  SOLANA = \"solana\",\n}\n\n/**\n * Wallet information including address and chain details\n */\nexport interface WalletInfo {\n  // Standard fields used by the wallet adapter\n  address: string;\n  chainType: ChainType;\n  chainId: string | number;\n  provider: string;\n\n  // Database compatibility fields\n  network_id?: string; // Maps to chain_id in database\n  smart_wallet_address?: string; // Maps to address in database\n  userInfo?: {\n    email?: string;\n    name?: string;\n    profileImage?: string;\n    oauthProvider?: string;\n    phoneNumber?: string;\n  };\n}\n\n/**\n * Wallet balance information\n */\nexport interface WalletBalance {\n  raw: string;\n  formatted: string;\n  symbol: string;\n}\n\n/**\n * Transaction parameters for sending transactions\n */\nexport interface TransactionParams {\n  to: string;\n  value: string;\n  data?: string;\n}\n\n/**\n * Common interface for all wallet providers\n */\nexport interface WalletProvider {\n  connect(email: string): Promise;\n  getBalance(address: string): Promise;\n  sendTransaction(params: TransactionParams): Promise;\n  disconnect(): Promise;\n  isConnected(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WalletProvider.html":{"url":"interfaces/WalletProvider.html","title":"interface - WalletProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WalletProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts\n        \n\n\n            \n                Description\n            \n            \n                Common interface for all wallet providers\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        connect\n                                    \n                                \n                                \n                                    \n                                        disconnect\n                                    \n                                \n                                \n                                    \n                                        getBalance\n                                    \n                                \n                                \n                                    \n                                        isConnected\n                                    \n                                \n                                \n                                    \n                                        sendTransaction\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        connect\n                        \n                    \n                \n            \n            \n                \nconnect(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        disconnect\n                        \n                    \n                \n            \n            \n                \ndisconnect()\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBalance\n                        \n                    \n                \n            \n            \n                \ngetBalance(address: string)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                address\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isConnected\n                        \n                    \n                \n            \n            \n                \nisConnected()\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sendTransaction\n                        \n                    \n                \n            \n            \n                \nsendTransaction(params: TransactionParams)\n                \n            \n\n\n                    \n                        \n                            Defined in /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            TransactionParams\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export enum ChainType {\n  EVM = \"evm\",\n  SOLANA = \"solana\",\n}\n\n/**\n * Wallet information including address and chain details\n */\nexport interface WalletInfo {\n  // Standard fields used by the wallet adapter\n  address: string;\n  chainType: ChainType;\n  chainId: string | number;\n  provider: string;\n\n  // Database compatibility fields\n  network_id?: string; // Maps to chain_id in database\n  smart_wallet_address?: string; // Maps to address in database\n  userInfo?: {\n    email?: string;\n    name?: string;\n    profileImage?: string;\n    oauthProvider?: string;\n    phoneNumber?: string;\n  };\n}\n\n/**\n * Wallet balance information\n */\nexport interface WalletBalance {\n  raw: string;\n  formatted: string;\n  symbol: string;\n}\n\n/**\n * Transaction parameters for sending transactions\n */\nexport interface TransactionParams {\n  to: string;\n  value: string;\n  data?: string;\n}\n\n/**\n * Common interface for all wallet providers\n */\nexport interface WalletProvider {\n  connect(email: string): Promise;\n  getBalance(address: string): Promise;\n  sendTransaction(params: TransactionParams): Promise;\n  disconnect(): Promise;\n  isConnected(): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WalletResponseDto.html":{"url":"classes/WalletResponseDto.html","title":"class - WalletResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WalletResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                chainId\n                            \n                            \n                                    \n                                chainType\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metadata\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                userId\n                            \n                            \n                                    \n                                walletAddress\n                            \n                            \n                                    \n                                walletType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chainId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Chain ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chainType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Chain type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:127\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Creation timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Wallet ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Additional metadata'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Last updated timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:136\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:115\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        walletAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Wallet address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        walletType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Wallet type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:124\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsBoolean,\n  IsNumber,\n} from \"class-validator\";\n\nexport class UpdateProfileDto {\n  @ApiProperty({ description: \"User full name\", required: false })\n  @IsOptional()\n  @IsString()\n  full_name?: string;\n\n  @ApiProperty({ description: \"Enable email notifications\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  email_notifications?: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\", required: false })\n  @IsOptional()\n  @IsString()\n  telegram_handle?: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\", required: false })\n  @IsOptional()\n  @IsString()\n  discord_webhook?: string;\n\n  @ApiProperty({ description: \"Dark mode preference\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  dark_mode?: boolean;\n}\n\nexport class ProfileResponseDto {\n  @ApiProperty({ description: \"User ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User full name\" })\n  full_name: string;\n\n  @ApiProperty({ description: \"Email notifications enabled\" })\n  email_notifications: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\" })\n  telegram_handle: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\" })\n  discord_webhook: string;\n\n  @ApiProperty({ description: \"Dark mode enabled\" })\n  dark_mode: boolean;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n\n  @ApiProperty({ description: \"Subscription status\" })\n  subscription_status: string;\n\n  @ApiProperty({ description: \"Subscription expiry date\" })\n  subscription_expires_at: string | null;\n\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updated_at: string;\n}\n\nexport class UsageResponseDto {\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n}\n\nexport class CreateWalletDto {\n  @ApiProperty({ description: \"Wallet address\" })\n  @IsString()\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  @IsNumber()\n  chainId: number;\n\n  @ApiProperty({ description: \"Wallet type\", required: false })\n  @IsOptional()\n  @IsString()\n  walletType?: string;\n\n  @ApiProperty({ description: \"Chain type\", required: false })\n  @IsOptional()\n  @IsString()\n  chainType?: string;\n\n  @ApiProperty({ description: \"Additional metadata\", required: false })\n  @IsOptional()\n  metadata?: Record;\n}\n\nexport class WalletResponseDto {\n  @ApiProperty({ description: \"Wallet ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Wallet type\" })\n  walletType: string;\n\n  @ApiProperty({ description: \"Chain type\" })\n  chainType: string;\n\n  @ApiProperty({ description: \"Additional metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updatedAt: string;\n}\n\nexport class WalletTransactionResponseDto {\n  @ApiProperty({ description: \"Transaction ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Transaction hash\" })\n  transactionHash: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Transaction type\" })\n  type: string;\n\n  @ApiProperty({ description: \"Amount\" })\n  amount: string;\n\n  @ApiProperty({ description: \"Token symbol\" })\n  symbol: string;\n\n  @ApiProperty({ description: \"Transaction metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WalletTransactionFindManyInput.html":{"url":"interfaces/WalletTransactionFindManyInput.html","title":"interface - WalletTransactionFindManyInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WalletTransactionFindManyInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/wallet.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            orderBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            skip\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            take\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        orderBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        orderBy:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skip:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        take\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        take:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  UserWallet,\n  WalletTransaction,\n  BlockchainTransaction,\n  Prisma,\n} from \"@prisma/client\";\n// No need for custom interfaces; use Prisma-generated types for type safety.\nimport { BaseRepository } from \"./base.repository\";\nimport { validateWallet } from \"../utils/validation\";\n\n// Type definitions for wallet operations\nexport interface WalletCreateInput {\n  userId: string;\n  chainId: string;\n  walletAddress: string;\n  walletType?: string;\n  chainType?: string;\n  metadata?: any;\n}\n\nexport interface WalletUpdateInput {\n  chainId?: string;\n  walletAddress?: string;\n  walletType?: string;\n  chainType?: string;\n  metadata?: any;\n}\n\nexport type WalletTransactionCreateInput = Prisma.WalletTransactionCreateInput;\nexport type BlockchainTransactionCreateInput =\n  Prisma.BlockchainTransactionCreateInput;\n\nexport interface WalletTransactionFindManyInput {\n  skip?: number;\n  take?: number;\n  orderBy?: { [key: string]: \"asc\" | \"desc\" };\n}\nexport type WalletWithTransactions = UserWallet & {\n  transactions: WalletTransaction[];\n};\n\nexport class WalletRepository extends BaseRepository {\n  protected tableName = \"user_wallets\";\n  protected model = this.prisma.userWallet;\n\n  /**\n   * Saves (creates or updates) a wallet.\n   * Ensures the wallet is associated with the correct user.\n   * @param userId The user's ID.\n   * @param walletAddress The wallet's blockchain address.\n   * @param chainId The numeric chain ID.\n   * @param walletType The type of the wallet (e.g., 'magic', 'metamask').\n   * @param chainType The type of the chain (e.g., 'ethereum', 'mumbai').\n   * @returns The created or updated wallet.\n   */\n  async saveWallet(\n    userId: string,\n    walletAddress: string,\n    chainId: number, // Received as number\n    walletType: string,\n    chainType: string\n  ): Promise {\n    if (\n      !userId ||\n      !walletAddress ||\n      chainId === undefined ||\n      !walletType ||\n      !chainType\n    ) {\n      throw new Error(\"Missing required fields for saving wallet.\");\n    }\n\n    const chainIdString = chainId.toString();\n\n    // Use findFirst if findUnique({ where: { walletAddress } }) causes type errors.\n    // This assumes walletAddress should be unique; ensure @unique in schema.prisma.\n    const existingWallet = await this.prisma.userWallet.findFirst({\n      where: { walletAddress: walletAddress },\n    });\n\n    if (existingWallet) {\n      // Wallet exists, update it.\n      // Consider business logic for when existingWallet.userId !== userId.\n      // For this example, we update the wallet and ensure it's linked to the provided userId.\n      return this.prisma.userWallet.update({\n        where: { id: existingWallet.id }, // Use the ID of the found wallet for the update's where clause\n        data: {\n          chainId: chainIdString,\n          walletType,\n          chainType,\n          // If you want to allow changing the user associated with this wallet address:\n          user: { connect: { id: userId } },\n          // If userId is a direct scalar field on UserWallet and you also want to update it:\n          // userId: userId,\n        },\n      });\n    } else {\n      // Wallet doesn't exist, create it\n      return this.prisma.userWallet.create({\n        data: {\n          walletAddress,\n          chainId: chainIdString,\n          walletType,\n          chainType,\n          user: { connect: { id: userId } },\n          // If userId is also a direct scalar field that needs to be set:\n          // userId: userId,\n        },\n      });\n    }\n  }\n\n  /**\n   * Find a wallet by address\n   * @param walletAddress The wallet address to find\n   * @returns The wallet or null\n   */\n  async findByAddress(walletAddress: string): Promise {\n    return this.prisma.userWallet.findFirst({\n      where: { walletAddress },\n    });\n  }\n\n  /**\n   * Find wallets by user ID\n   * @param userId The user ID to filter by\n   * @returns An array of wallets\n   */\n  async findByUserId(userId: string): Promise {\n    return this.prisma.userWallet.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  }\n\n  /**\n   * Find a wallet with its transactions\n   * @param id The wallet ID\n   * @returns The wallet with transactions or null\n   */\n  async findWithTransactions(\n    id: string\n  ): Promise {\n    const wallet = await this.prisma.userWallet.findUnique({\n      where: { id },\n    });\n    if (!wallet) return null;\n    const transactions = await this.prisma.walletTransaction.findMany({\n      where: { walletAddress: wallet.walletAddress },\n      orderBy: { createdAt: \"desc\" },\n    });\n    return { ...wallet, transactions };\n  }\n\n  /**\n   * Create a wallet for a user\n   * @param userId The user ID\n   * @param data The wallet data\n   * @returns The created wallet\n   */\n  async createForUser(\n    userId: string,\n    data: Omit\n  ): Promise {\n    // Validate wallet data\n    validateWallet(data);\n\n    // Check if wallet already exists\n    const existingWallet = await this.findByAddress(\n      data.walletAddress as string\n    );\n    if (existingWallet) {\n      throw new Error(\n        `Wallet with address ${data.walletAddress} already exists`\n      );\n    }\n\n    const { userId: _userId, ...walletData } = data;\n    return this.prisma.userWallet.create({\n      data: {\n        ...walletData,\n        user: {\n          connect: { id: userId },\n        },\n      },\n    });\n  }\n\n  /**\n   * Create a wallet transaction\n   * @param data The transaction data\n   * @returns The created transaction\n   */\n  async createTransaction(\n    data: WalletTransactionCreateInput\n  ): Promise {\n    return this.prisma.walletTransaction.create({\n      data,\n    });\n  }\n\n  /**\n   * Find transactions by wallet ID\n   * @param walletId The wallet ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async findTransactionsByWalletId(\n    walletId: string,\n    limit = 10\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { walletAddress: walletId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Find transactions by user ID\n   * @param userId The user ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async findTransactionsByUserId(\n    userId: string,\n    limit = 10\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Find transactions by wallet address\n   * @param walletAddress The wallet address\n   * @param options Options for the query\n   * @returns An array of transactions\n   */\n  async findTransactionsByWalletAddress(\n    walletAddress: string,\n    options?: WalletTransactionFindManyInput\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { walletAddress },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      ...options,\n    });\n  }\n\n  /**\n   * Create a blockchain transaction\n   * @param data The blockchain transaction data\n   * @returns The created blockchain transaction\n   */\n  async createBlockchainTransaction(\n    data: BlockchainTransactionCreateInput\n  ): Promise {\n    return this.prisma.blockchainTransaction.create({\n      data,\n    });\n  }\n\n  /**\n   * Find blockchain transactions by execution ID\n   * @param executionId The execution ID\n   * @returns An array of blockchain transactions\n   */\n  async findBlockchainTransactionsByExecutionId(\n    executionId: string\n  ): Promise {\n    return this.prisma.blockchainTransaction.findMany({\n      where: { executionId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  }\n\n  /**\n   * Update a blockchain transaction status\n   * @param id The blockchain transaction ID\n   * @param status The new status\n   * @param txHash The transaction hash\n   * @param blockNumber The block number\n   * @returns The updated blockchain transaction\n   */\n  async updateBlockchainTransactionStatus(\n    id: string,\n    status: string,\n    txHash?: string,\n    blockNumber?: number\n  ): Promise {\n    const data: Prisma.BlockchainTransactionUpdateInput = {\n      status,\n      updatedAt: new Date(),\n    };\n\n    if (txHash) {\n      data.txHash = txHash;\n    }\n\n    if (blockNumber) {\n      data.blockNumber = blockNumber;\n    }\n\n    return this.prisma.blockchainTransaction.update({\n      where: { id },\n      data,\n    });\n  }\n\n  /**\n   * Get wallet balance from blockchain\n   * This is a placeholder for integration with blockchain APIs\n   * @param walletAddress The wallet address\n   * @param chainId The chain ID\n   * @returns The wallet balance\n   */\n  async getWalletBalance(\n    walletAddress: string,\n    chainId: string\n  ): Promise {\n    // This would be implemented with blockchain API integration\n    // For now, return a placeholder\n    return \"0\";\n  }\n\n  /**\n   * Alias for findTransactionsByUserId for backward compatibility\n   * @param userId The user ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async getTransactions(\n    userId: string,\n    limit = 10\n  ): Promise {\n    return this.findTransactionsByUserId(userId, limit);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WalletTransactionResponseDto.html":{"url":"classes/WalletTransactionResponseDto.html","title":"class - WalletTransactionResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WalletTransactionResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                chainId\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metadata\n                            \n                            \n                                    \n                                symbol\n                            \n                            \n                                    \n                                transactionHash\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                userId\n                            \n                            \n                                    \n                                walletAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Amount'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:159\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        chainId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Chain ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:153\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Creation timestamp'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Transaction ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Transaction metadata'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:165\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        symbol\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Token symbol'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        transactionHash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Transaction hash'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:150\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Transaction type'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:156\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        walletAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Wallet address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/user.dto.ts:147\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsEmail,\n  IsOptional,\n  IsString,\n  IsBoolean,\n  IsNumber,\n} from \"class-validator\";\n\nexport class UpdateProfileDto {\n  @ApiProperty({ description: \"User full name\", required: false })\n  @IsOptional()\n  @IsString()\n  full_name?: string;\n\n  @ApiProperty({ description: \"Enable email notifications\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  email_notifications?: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\", required: false })\n  @IsOptional()\n  @IsString()\n  telegram_handle?: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\", required: false })\n  @IsOptional()\n  @IsString()\n  discord_webhook?: string;\n\n  @ApiProperty({ description: \"Dark mode preference\", required: false })\n  @IsOptional()\n  @IsBoolean()\n  dark_mode?: boolean;\n}\n\nexport class ProfileResponseDto {\n  @ApiProperty({ description: \"User ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User full name\" })\n  full_name: string;\n\n  @ApiProperty({ description: \"Email notifications enabled\" })\n  email_notifications: boolean;\n\n  @ApiProperty({ description: \"Telegram handle\" })\n  telegram_handle: string;\n\n  @ApiProperty({ description: \"Discord webhook URL\" })\n  discord_webhook: string;\n\n  @ApiProperty({ description: \"Dark mode enabled\" })\n  dark_mode: boolean;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n\n  @ApiProperty({ description: \"Subscription status\" })\n  subscription_status: string;\n\n  @ApiProperty({ description: \"Subscription expiry date\" })\n  subscription_expires_at: string | null;\n\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updated_at: string;\n}\n\nexport class UsageResponseDto {\n  @ApiProperty({ description: \"Monthly execution quota\" })\n  monthly_execution_quota: number;\n\n  @ApiProperty({ description: \"Monthly executions used\" })\n  monthly_executions_used: number;\n\n  @ApiProperty({ description: \"Subscription tier\" })\n  subscription_tier: string;\n}\n\nexport class CreateWalletDto {\n  @ApiProperty({ description: \"Wallet address\" })\n  @IsString()\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  @IsNumber()\n  chainId: number;\n\n  @ApiProperty({ description: \"Wallet type\", required: false })\n  @IsOptional()\n  @IsString()\n  walletType?: string;\n\n  @ApiProperty({ description: \"Chain type\", required: false })\n  @IsOptional()\n  @IsString()\n  chainType?: string;\n\n  @ApiProperty({ description: \"Additional metadata\", required: false })\n  @IsOptional()\n  metadata?: Record;\n}\n\nexport class WalletResponseDto {\n  @ApiProperty({ description: \"Wallet ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Wallet type\" })\n  walletType: string;\n\n  @ApiProperty({ description: \"Chain type\" })\n  chainType: string;\n\n  @ApiProperty({ description: \"Additional metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n\n  @ApiProperty({ description: \"Last updated timestamp\" })\n  updatedAt: string;\n}\n\nexport class WalletTransactionResponseDto {\n  @ApiProperty({ description: \"Transaction ID\" })\n  id: string;\n\n  @ApiProperty({ description: \"User ID\" })\n  userId: string;\n\n  @ApiProperty({ description: \"Wallet address\" })\n  walletAddress: string;\n\n  @ApiProperty({ description: \"Transaction hash\" })\n  transactionHash: string;\n\n  @ApiProperty({ description: \"Chain ID\" })\n  chainId: string;\n\n  @ApiProperty({ description: \"Transaction type\" })\n  type: string;\n\n  @ApiProperty({ description: \"Amount\" })\n  amount: string;\n\n  @ApiProperty({ description: \"Token symbol\" })\n  symbol: string;\n\n  @ApiProperty({ description: \"Transaction metadata\" })\n  metadata: Record;\n\n  @ApiProperty({ description: \"Creation timestamp\" })\n  createdAt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WalletUpdateInput.html":{"url":"interfaces/WalletUpdateInput.html","title":"interface - WalletUpdateInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WalletUpdateInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/wallet.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            chainId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            chainType\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            metadata\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            walletAddress\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            walletType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        chainId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chainId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        chainType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        chainType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        walletAddress\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        walletAddress:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        walletType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        walletType:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  UserWallet,\n  WalletTransaction,\n  BlockchainTransaction,\n  Prisma,\n} from \"@prisma/client\";\n// No need for custom interfaces; use Prisma-generated types for type safety.\nimport { BaseRepository } from \"./base.repository\";\nimport { validateWallet } from \"../utils/validation\";\n\n// Type definitions for wallet operations\nexport interface WalletCreateInput {\n  userId: string;\n  chainId: string;\n  walletAddress: string;\n  walletType?: string;\n  chainType?: string;\n  metadata?: any;\n}\n\nexport interface WalletUpdateInput {\n  chainId?: string;\n  walletAddress?: string;\n  walletType?: string;\n  chainType?: string;\n  metadata?: any;\n}\n\nexport type WalletTransactionCreateInput = Prisma.WalletTransactionCreateInput;\nexport type BlockchainTransactionCreateInput =\n  Prisma.BlockchainTransactionCreateInput;\n\nexport interface WalletTransactionFindManyInput {\n  skip?: number;\n  take?: number;\n  orderBy?: { [key: string]: \"asc\" | \"desc\" };\n}\nexport type WalletWithTransactions = UserWallet & {\n  transactions: WalletTransaction[];\n};\n\nexport class WalletRepository extends BaseRepository {\n  protected tableName = \"user_wallets\";\n  protected model = this.prisma.userWallet;\n\n  /**\n   * Saves (creates or updates) a wallet.\n   * Ensures the wallet is associated with the correct user.\n   * @param userId The user's ID.\n   * @param walletAddress The wallet's blockchain address.\n   * @param chainId The numeric chain ID.\n   * @param walletType The type of the wallet (e.g., 'magic', 'metamask').\n   * @param chainType The type of the chain (e.g., 'ethereum', 'mumbai').\n   * @returns The created or updated wallet.\n   */\n  async saveWallet(\n    userId: string,\n    walletAddress: string,\n    chainId: number, // Received as number\n    walletType: string,\n    chainType: string\n  ): Promise {\n    if (\n      !userId ||\n      !walletAddress ||\n      chainId === undefined ||\n      !walletType ||\n      !chainType\n    ) {\n      throw new Error(\"Missing required fields for saving wallet.\");\n    }\n\n    const chainIdString = chainId.toString();\n\n    // Use findFirst if findUnique({ where: { walletAddress } }) causes type errors.\n    // This assumes walletAddress should be unique; ensure @unique in schema.prisma.\n    const existingWallet = await this.prisma.userWallet.findFirst({\n      where: { walletAddress: walletAddress },\n    });\n\n    if (existingWallet) {\n      // Wallet exists, update it.\n      // Consider business logic for when existingWallet.userId !== userId.\n      // For this example, we update the wallet and ensure it's linked to the provided userId.\n      return this.prisma.userWallet.update({\n        where: { id: existingWallet.id }, // Use the ID of the found wallet for the update's where clause\n        data: {\n          chainId: chainIdString,\n          walletType,\n          chainType,\n          // If you want to allow changing the user associated with this wallet address:\n          user: { connect: { id: userId } },\n          // If userId is a direct scalar field on UserWallet and you also want to update it:\n          // userId: userId,\n        },\n      });\n    } else {\n      // Wallet doesn't exist, create it\n      return this.prisma.userWallet.create({\n        data: {\n          walletAddress,\n          chainId: chainIdString,\n          walletType,\n          chainType,\n          user: { connect: { id: userId } },\n          // If userId is also a direct scalar field that needs to be set:\n          // userId: userId,\n        },\n      });\n    }\n  }\n\n  /**\n   * Find a wallet by address\n   * @param walletAddress The wallet address to find\n   * @returns The wallet or null\n   */\n  async findByAddress(walletAddress: string): Promise {\n    return this.prisma.userWallet.findFirst({\n      where: { walletAddress },\n    });\n  }\n\n  /**\n   * Find wallets by user ID\n   * @param userId The user ID to filter by\n   * @returns An array of wallets\n   */\n  async findByUserId(userId: string): Promise {\n    return this.prisma.userWallet.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  }\n\n  /**\n   * Find a wallet with its transactions\n   * @param id The wallet ID\n   * @returns The wallet with transactions or null\n   */\n  async findWithTransactions(\n    id: string\n  ): Promise {\n    const wallet = await this.prisma.userWallet.findUnique({\n      where: { id },\n    });\n    if (!wallet) return null;\n    const transactions = await this.prisma.walletTransaction.findMany({\n      where: { walletAddress: wallet.walletAddress },\n      orderBy: { createdAt: \"desc\" },\n    });\n    return { ...wallet, transactions };\n  }\n\n  /**\n   * Create a wallet for a user\n   * @param userId The user ID\n   * @param data The wallet data\n   * @returns The created wallet\n   */\n  async createForUser(\n    userId: string,\n    data: Omit\n  ): Promise {\n    // Validate wallet data\n    validateWallet(data);\n\n    // Check if wallet already exists\n    const existingWallet = await this.findByAddress(\n      data.walletAddress as string\n    );\n    if (existingWallet) {\n      throw new Error(\n        `Wallet with address ${data.walletAddress} already exists`\n      );\n    }\n\n    const { userId: _userId, ...walletData } = data;\n    return this.prisma.userWallet.create({\n      data: {\n        ...walletData,\n        user: {\n          connect: { id: userId },\n        },\n      },\n    });\n  }\n\n  /**\n   * Create a wallet transaction\n   * @param data The transaction data\n   * @returns The created transaction\n   */\n  async createTransaction(\n    data: WalletTransactionCreateInput\n  ): Promise {\n    return this.prisma.walletTransaction.create({\n      data,\n    });\n  }\n\n  /**\n   * Find transactions by wallet ID\n   * @param walletId The wallet ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async findTransactionsByWalletId(\n    walletId: string,\n    limit = 10\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { walletAddress: walletId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Find transactions by user ID\n   * @param userId The user ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async findTransactionsByUserId(\n    userId: string,\n    limit = 10\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: limit,\n    });\n  }\n\n  /**\n   * Find transactions by wallet address\n   * @param walletAddress The wallet address\n   * @param options Options for the query\n   * @returns An array of transactions\n   */\n  async findTransactionsByWalletAddress(\n    walletAddress: string,\n    options?: WalletTransactionFindManyInput\n  ): Promise {\n    return this.prisma.walletTransaction.findMany({\n      where: { walletAddress },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      ...options,\n    });\n  }\n\n  /**\n   * Create a blockchain transaction\n   * @param data The blockchain transaction data\n   * @returns The created blockchain transaction\n   */\n  async createBlockchainTransaction(\n    data: BlockchainTransactionCreateInput\n  ): Promise {\n    return this.prisma.blockchainTransaction.create({\n      data,\n    });\n  }\n\n  /**\n   * Find blockchain transactions by execution ID\n   * @param executionId The execution ID\n   * @returns An array of blockchain transactions\n   */\n  async findBlockchainTransactionsByExecutionId(\n    executionId: string\n  ): Promise {\n    return this.prisma.blockchainTransaction.findMany({\n      where: { executionId },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n  }\n\n  /**\n   * Update a blockchain transaction status\n   * @param id The blockchain transaction ID\n   * @param status The new status\n   * @param txHash The transaction hash\n   * @param blockNumber The block number\n   * @returns The updated blockchain transaction\n   */\n  async updateBlockchainTransactionStatus(\n    id: string,\n    status: string,\n    txHash?: string,\n    blockNumber?: number\n  ): Promise {\n    const data: Prisma.BlockchainTransactionUpdateInput = {\n      status,\n      updatedAt: new Date(),\n    };\n\n    if (txHash) {\n      data.txHash = txHash;\n    }\n\n    if (blockNumber) {\n      data.blockNumber = blockNumber;\n    }\n\n    return this.prisma.blockchainTransaction.update({\n      where: { id },\n      data,\n    });\n  }\n\n  /**\n   * Get wallet balance from blockchain\n   * This is a placeholder for integration with blockchain APIs\n   * @param walletAddress The wallet address\n   * @param chainId The chain ID\n   * @returns The wallet balance\n   */\n  async getWalletBalance(\n    walletAddress: string,\n    chainId: string\n  ): Promise {\n    // This would be implemented with blockchain API integration\n    // For now, return a placeholder\n    return \"0\";\n  }\n\n  /**\n   * Alias for findTransactionsByUserId for backward compatibility\n   * @param userId The user ID\n   * @param limit The maximum number of transactions to return\n   * @returns An array of transactions\n   */\n  async getTransactions(\n    userId: string,\n    limit = 10\n  ): Promise {\n    return this.findTransactionsByUserId(userId, limit);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WalletsController.html":{"url":"controllers/WalletsController.html","title":"controller - WalletsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WalletsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/wallets.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user/wallets\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                createWallet\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                deleteWallet\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getUserWallets\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getWalletTransactions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        createWallet\n                        \n                    \n                \n            \n            \n                \n                        \n                    createWallet(req: literal type, createData: CreateWalletDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create or update wallet'})@ApiResponse({status: 201, description: 'Wallet created/updated successfully', type: WalletResponseDto})\n                \n            \n\n                    \n                        \n                            Defined in src/user/wallets.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createData\n                                            \n                                                            CreateWalletDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        deleteWallet\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteWallet(req: literal type, walletId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':walletId')@ApiOperation({summary: 'Delete wallet'})@ApiResponse({status: 200, description: 'Wallet deleted successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/user/wallets.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                walletId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getUserWallets\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserWallets(req: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get user wallets'})@ApiResponse({status: 200, description: 'Returns user wallets', type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/user/wallets.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getWalletTransactions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalletTransactions(req: literal type, walletAddress?: string, limit?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('transactions')@ApiOperation({summary: 'Get wallet transactions'})@ApiResponse({status: 200, description: 'Returns wallet transactions', type: undefined})\n                \n            \n\n                    \n                        \n                            Defined in src/user/wallets.controller.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                walletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Delete,\n  Body,\n  UseGuards,\n  Request,\n  Param,\n  Query,\n} from \"@nestjs/common\";\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from \"@nestjs/swagger\";\nimport { WalletsService } from \"./wallets.service\";\nimport {\n  CreateWalletDto,\n  WalletResponseDto,\n  WalletTransactionResponseDto,\n} from \"./dto/user.dto\";\n\n@ApiTags(\"user/wallets\")\n@Controller(\"user/wallets\")\n@ApiBearerAuth()\nexport class WalletsController {\n  constructor(private readonly walletsService: WalletsService) {}\n\n  @Get()\n  @ApiOperation({ summary: \"Get user wallets\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Returns user wallets\",\n    type: [WalletResponseDto],\n  })\n  async getUserWallets(\n    @Request() req: { user?: { id: string } }\n  ): Promise {\n    const userId = req.user?.id || \"user1\";\n    return this.walletsService.getUserWallets(userId);\n  }\n\n  @Post()\n  @ApiOperation({ summary: \"Create or update wallet\" })\n  @ApiResponse({\n    status: 201,\n    description: \"Wallet created/updated successfully\",\n    type: WalletResponseDto,\n  })\n  async createWallet(\n    @Request() req: { user?: { id: string } },\n    @Body() createData: CreateWalletDto\n  ): Promise {\n    const userId = req.user?.id || \"user1\";\n    return this.walletsService.createWallet(userId, createData);\n  }\n\n  @Delete(\":walletId\")\n  @ApiOperation({ summary: \"Delete wallet\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Wallet deleted successfully\",\n  })\n  async deleteWallet(\n    @Request() req: { user?: { id: string } },\n    @Param(\"walletId\") walletId: string\n  ): Promise {\n    const userId = req.user?.id || \"user1\";\n    return this.walletsService.deleteWallet(userId, walletId);\n  }\n\n  @Get(\"transactions\")\n  @ApiOperation({ summary: \"Get wallet transactions\" })\n  @ApiResponse({\n    status: 200,\n    description: \"Returns wallet transactions\",\n    type: [WalletTransactionResponseDto],\n  })\n  async getWalletTransactions(\n    @Request() req: { user?: { id: string } },\n    @Query(\"walletAddress\") walletAddress?: string,\n    @Query(\"limit\") limit?: string\n  ): Promise {\n    const userId = req.user?.id || \"user1\";\n    const parsedLimit = limit ? parseInt(limit, 10) : 10;\n    return this.walletsService.getWalletTransactions(\n      userId,\n      walletAddress,\n      parsedLimit\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WalletsService.html":{"url":"injectables/WalletsService.html","title":"injectable - WalletsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WalletsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/wallets.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createWallet\n                            \n                            \n                                    Async\n                                deleteWallet\n                            \n                            \n                                    Async\n                                getUserWallets\n                            \n                            \n                                    Async\n                                getWalletTransactions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(walletRepository: WalletRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/wallets.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        walletRepository\n                                                  \n                                                        \n                                                                        WalletRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createWallet\n                        \n                    \n                \n            \n            \n                \n                        \n                    createWallet(userId: string, createData: CreateWalletDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/wallets.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createData\n                                            \n                                                            CreateWalletDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteWallet\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteWallet(userId: string, walletId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/wallets.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                walletId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUserWallets\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserWallets(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/wallets.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getWalletTransactions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getWalletTransactions(userId: string, walletAddress?: string, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/wallets.service.ts:121\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                walletAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  ConflictException,\n  NotFoundException,\n} from \"@nestjs/common\";\nimport { WalletRepository } from \"@zyra/database\";\nimport {\n  CreateWalletDto,\n  WalletResponseDto,\n  WalletTransactionResponseDto,\n} from \"./dto/user.dto\";\n\n@Injectable()\nexport class WalletsService {\n  constructor(private readonly walletRepository: WalletRepository) {}\n\n  async getUserWallets(userId: string): Promise {\n    const wallets = await this.walletRepository.findByUserId(userId);\n\n    return wallets.map((wallet) => ({\n      id: wallet.id,\n      userId: wallet.userId,\n      walletAddress: wallet.walletAddress,\n      chainId: wallet.chainId,\n      walletType: wallet.walletType || \"unknown\",\n      chainType: wallet.chainType || \"evm\",\n      metadata: (wallet.metadata as Record) || {},\n      createdAt: wallet.createdAt.toISOString(),\n      updatedAt: wallet.updatedAt.toISOString(),\n    }));\n  }\n\n  async createWallet(\n    userId: string,\n    createData: CreateWalletDto\n  ): Promise {\n    try {\n      // Check if wallet already exists\n      const existingWallet = await this.walletRepository.findByAddress(\n        createData.walletAddress\n      );\n\n      if (existingWallet && existingWallet.userId !== userId) {\n        throw new ConflictException(\n          \"This wallet is already connected to another account\"\n        );\n      }\n\n      if (existingWallet && existingWallet.userId === userId) {\n        // Update existing wallet\n        const updatedWallet = await this.walletRepository.saveWallet(\n          userId,\n          createData.walletAddress,\n          createData.chainId,\n          createData.walletType || \"unknown\",\n          createData.chainType || \"evm\"\n        );\n\n        return {\n          id: updatedWallet.id,\n          userId: updatedWallet.userId,\n          walletAddress: updatedWallet.walletAddress,\n          chainId: updatedWallet.chainId,\n          walletType: updatedWallet.walletType || \"unknown\",\n          chainType: updatedWallet.chainType || \"evm\",\n          metadata: (updatedWallet.metadata as Record) || {},\n          createdAt: updatedWallet.createdAt.toISOString(),\n          updatedAt: updatedWallet.updatedAt.toISOString(),\n        };\n      }\n\n      // Create new wallet\n      const wallet = await this.walletRepository.saveWallet(\n        userId,\n        createData.walletAddress,\n        createData.chainId,\n        createData.walletType || \"unknown\",\n        createData.chainType || \"evm\"\n      );\n\n      return {\n        id: wallet.id,\n        userId: wallet.userId,\n        walletAddress: wallet.walletAddress,\n        chainId: wallet.chainId,\n        walletType: wallet.walletType || \"unknown\",\n        chainType: wallet.chainType || \"evm\",\n        metadata: (wallet.metadata as Record) || {},\n        createdAt: wallet.createdAt.toISOString(),\n        updatedAt: wallet.updatedAt.toISOString(),\n      };\n    } catch (error: any) {\n      if (error instanceof ConflictException) {\n        throw error;\n      }\n      throw new Error(`Failed to save wallet: ${error.message}`);\n    }\n  }\n\n  async deleteWallet(\n    userId: string,\n    walletId: string\n  ): Promise {\n    // Find wallet to verify ownership\n    const wallet = await this.walletRepository.findById(walletId);\n\n    if (!wallet) {\n      throw new NotFoundException(\"Wallet not found\");\n    }\n\n    if (wallet.userId !== userId) {\n      throw new NotFoundException(\"Wallet not found or not owned by user\");\n    }\n\n    // Delete wallet\n    await this.walletRepository.delete(walletId);\n\n    return { success: true, walletId };\n  }\n\n  async getWalletTransactions(\n    userId: string,\n    walletAddress?: string,\n    limit = 10\n  ): Promise {\n    let transactions;\n\n    if (walletAddress) {\n      // Verify user owns this wallet\n      const wallet = await this.walletRepository.findByAddress(walletAddress);\n      if (!wallet || wallet.userId !== userId) {\n        throw new NotFoundException(\"Wallet not found or access denied\");\n      }\n\n      transactions =\n        await this.walletRepository.findTransactionsByWalletAddress(\n          walletAddress,\n          { take: limit }\n        );\n    } else {\n      transactions = await this.walletRepository.findTransactionsByUserId(\n        userId,\n        limit\n      );\n    }\n\n    return transactions.map((tx) => ({\n      id: tx.id,\n      userId: tx.userId,\n      walletAddress: tx.walletAddress,\n      transactionHash: tx.txHash,\n      chainId: tx.chainId.toString(),\n      type: \"transaction\",\n      amount: tx.value,\n      symbol: \"ETH\",\n      metadata: {},\n      createdAt: tx.createdAt.toISOString(),\n    }));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Workflow.html":{"url":"interfaces/Workflow.html","title":"interface - Workflow","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Workflow\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/workflow.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            createdBy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            definition\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isPublic\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nodes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tags\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                        \n                                            userId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdBy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdBy:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        definition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        definition:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isPublic\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isPublic:     boolean | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tags\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tags:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:     Date | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date | null\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Prisma, WorkflowExecution } from \"@prisma/client\";\nimport type { Prisma as PrismaNamespace } from \"@prisma/client\";\nimport { AccessDeniedError, BaseRepository } from \"./base.repository\";\nimport prisma from \"../client\";\nimport {\n  createAccessWhereClause,\n  enforcePolicy,\n  createPolicyContext,\n} from \"../policies/policy-utils\";\nimport { PolicyContext } from \"../policies/policy.service\";\n\n// Define the Workflow interface based on the Prisma schema\ninterface Workflow {\n  id: string;\n  userId: string;\n  name: string;\n  description?: string | null;\n  nodes?: any;\n  edges?: any;\n  isPublic?: boolean | null; // Updated to match Prisma's schema where isPublic is nullable\n  tags?: string[];\n  version?: number;\n  createdAt?: Date | null;\n  updatedAt?: Date | null;\n  definition?: any;\n  createdBy?: string | null;\n}\n\n// Type definitions for workflow operations\nexport type WorkflowCreateInput = Prisma.WorkflowCreateInput;\nexport type WorkflowUpdateInput = Prisma.WorkflowUpdateInput;\nexport type WorkflowWithExecutions = Workflow & {\n  executions: WorkflowExecution[];\n};\n\nexport class WorkflowRepository extends BaseRepository {\n  protected tableName = \"workflows\";\n  protected model = this.prisma.workflow;\n  \n  /**\n   * Map a Prisma workflow to our Workflow interface\n   * This ensures type safety when converting between Prisma types and our interface\n   */\n  private mapToWorkflow(workflow: any): Workflow {\n    return {\n      id: workflow.id,\n      userId: workflow.userId,\n      name: workflow.name,\n      description: workflow.description,\n      nodes: workflow.nodes ?? Prisma.JsonNull,\n      edges: workflow.edges ?? Prisma.JsonNull,\n      isPublic: workflow.isPublic,\n      tags: workflow.tags,\n      version: workflow.version,\n      createdAt: workflow.createdAt,\n      updatedAt: workflow.updatedAt,\n      definition: workflow.definition ?? Prisma.JsonNull,\n      createdBy: workflow.createdBy,\n    };\n  }\n\n  /**\n   * Find workflows by user ID with policy enforcement\n   * @param userId The user ID to filter by\n   * @param includeShared Whether to include workflows shared with the user\n   * @returns An array of workflows\n   */\n  async findByUserId(\n    userId: string,\n    includeShared: boolean = true\n  ): Promise {\n    const context = await createPolicyContext(userId);\n\n    // Create where clause based on user access\n    let whereClause: any = { userId };\n\n    // Include shared workflows if requested\n    if (includeShared) {\n      whereClause = createAccessWhereClause(userId, context.isAdmin);\n    }\n\n    const workflows = await this.prisma.workflow.findMany({\n      where: whereClause,\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      // No additional includes needed\n      // Previously included team, but that relation no longer exists\n    });\n\n    return workflows.map(workflow => this.mapToWorkflow(workflow));\n  }\n\n  /**\n   * Find a workflow by ID with policy enforcement\n   * @param id The workflow ID\n   * @param userId The user ID for policy enforcement\n   * @returns The workflow or null\n   */\n  async findById(id: string, userId?: string): Promise {\n    // If no userId provided, use the base implementation\n    if (!userId) {\n      return super.findById(id);\n    }\n\n    // Create policy context\n    const context = await createPolicyContext(userId);\n\n    // If admin, return the workflow without restrictions\n    if (context.isAdmin) {\n      const workflow = await this.prisma.workflow.findUnique({\n        where: { id },\n        // No additional includes needed\n        // Previously included team, but that relation no longer exists\n      });\n      \n      return workflow ? this.mapToWorkflow(workflow) : null;\n    }\n\n    // Otherwise, check if the user has access to the workflow\n    const workflow = await this.prisma.workflow.findFirst({\n      where: {\n        id,\n        OR: [\n          { userId },\n          { isPublic: true },\n          // Team-related access has been removed as team relation no longer exists\n        ],\n      },\n      // No additional includes needed\n      // Previously included team, but that relation no longer exists\n    });\n    \n    return workflow ? this.mapToWorkflow(workflow) : null;\n  }\n\n  /**\n   * Find a workflow with its executions\n   * @param id The workflow ID\n   * @returns The workflow with executions or null\n   */\n  async findWithExecutions(id: string): Promise {\n    const result = await this.prisma.workflow.findUnique({\n      where: { id },\n      include: {\n        executions: {\n          orderBy: {\n            createdAt: \"desc\",\n          },\n        },\n      },\n    });\n    \n    if (!result) return null;\n    \n    // Map to our interface with executions included\n    const workflow = this.mapToWorkflow(result);\n    return {\n      ...workflow,\n      executions: result.executions,\n    };\n  }\n\n  /**\n   * Create a new workflow with policy enforcement\n   * @param data The workflow data\n   * @param userId The user ID for policy enforcement\n   * @returns The created workflow\n   */\n  async create(data: WorkflowCreateInput, userId?: string): Promise {\n    // If no userId provided, use the base implementation\n    if (!userId) {\n      return super.create(data);\n    }\n\n    // Ensure the workflow belongs to the user using relation connection\n    const workflowData: any = { ...data };\n    // Use relation connection instead of direct userId field\n    workflowData.user = { connect: { id: userId } };\n    \n    // Remove userId if it exists to avoid conflict\n    delete workflowData.userId;\n\n    // Create the workflow with audit logging\n    return this.executeWithTransaction(\n      async (tx: PrismaNamespace.TransactionClient) => {\n        const result = await tx.workflow.create({\n          data: workflowData,\n        });\n        return this.mapToWorkflow(result);\n      },\n      \"CREATE\",\n      \"new\", // Will be replaced with the actual ID\n      userId\n    );\n  }\n\n  /**\n   * Create a workflow with nodes and edges\n   * @param data The workflow data\n   * @returns The created workflow\n   */\n  async createWithNodesAndEdges(\n    data: WorkflowCreateInput & {\n      nodes?: any[];\n      edges?: any[];\n    }\n  ): Promise {\n    const { nodes, edges, ...workflowData } = data;\n\n    // Convert nodes and edges to JSON if provided\n    const result = await this.prisma.workflow.create({\n      data: {\n        ...workflowData,\n        nodes: nodes ? JSON.stringify(nodes) : \"[]\",\n        edges: edges ? JSON.stringify(edges) : \"[]\",\n      },\n    });\n\n    return this.mapToWorkflow(result);\n  }\n\n  /**\n   * Update a workflow's definition\n   * @param id The workflow ID\n   * @param definition The new definition\n   * @returns The updated workflow\n   */\n  async updateDefinition(id: string, definition: any): Promise {\n    const result = await this.prisma.workflow.update({\n      where: { id },\n      data: {\n        definition,\n        updatedAt: new Date(),\n      },\n    });\n    \n    return this.mapToWorkflow(result);\n  }\n\n  /**\n   * Find public workflows\n   * @param limit The maximum number of workflows to return\n   * @returns An array of public workflows\n   */\n  async findPublic(limit: number = 10): Promise {\n    const workflows = await this.prisma.workflow.findMany({\n      where: { isPublic: true },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n      take: limit,\n    });\n    \n    return workflows.map(workflow => this.mapToWorkflow(workflow));\n  }\n\n  /**\n   * Find workflows by organization (replaces team-based filtering)\n   * @param organizationId The organization ID\n   * @param userId The user ID for policy enforcement\n   * @returns An array of workflows\n   */\n  async findByOrganization(organizationId: string, userId: string): Promise {\n    // Check policy context for authorization\n    const context = await createPolicyContext(userId);\n    \n    // This would normally check organization membership, but for now\n    // we'll just check if the user has access based on the context\n    if (!context.isAdmin) {\n      // In a real implementation, there would be a check for organization membership\n      // For now, we'll just enforce that the user ID matches\n      if (!userId) {\n        throw new AccessDeniedError(\"Access denied\");\n      }\n    }\n\n    // Find workflows for the user in this organization\n    // Note: organization filtering would be implemented differently\n    // once that relationship is established in the schema\n    const workflows = await this.prisma.workflow.findMany({\n      where: {\n        userId,\n        // In the future: organizationId field would be used here\n      },\n      orderBy: {\n        createdAt: \"desc\",\n      },\n    });\n    \n    return workflows.map(workflow => this.mapToWorkflow(workflow));\n  }\n\n  /**\n   * Duplicate a workflow\n   * @param id The workflow ID to duplicate\n   * @param userId The user ID who will own the duplicate\n   * @param newName The name for the duplicate\n   * @returns The duplicated workflow\n   */\n  async duplicate(\n    id: string,\n    userId: string,\n    newName?: string\n  ): Promise {\n    const workflow = await this.prisma.workflow.findUnique({\n      where: { id },\n    });\n\n    if (!workflow) {\n      throw new Error(`Workflow with ID ${id} not found`);\n    }\n\n    const result = await this.prisma.workflow.create({\n      data: {\n        name: newName || `${workflow.name} (Copy)`,\n        description: workflow.description,\n        nodes: workflow.nodes ?? Prisma.JsonNull,\n        edges: workflow.edges ?? Prisma.JsonNull,\n        definition: workflow.definition ?? Prisma.JsonNull,\n        isPublic: false,\n        userId,\n        version: 1,\n      },\n    });\n    \n    return this.mapToWorkflow(result);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkflowDto.html":{"url":"classes/WorkflowDto.html","title":"class - WorkflowDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkflowDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workflows/dto/workflow.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                edges\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                nodes\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Description of the workflow'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Workflow edges configuration'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier for the workflow'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the workflow'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Workflow nodes configuration'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'User ID who created the workflow'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/workflows/dto/workflow.dto.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsOptional, IsArray, ValidateNested } from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class CreateWorkflowDto {\n  @ApiProperty({ description: \"Name of the workflow\" })\n  @IsString()\n  name: string;\n\n  @ApiProperty({ description: \"Description of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\" })\n  @IsArray()\n  nodes: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\" })\n  @IsArray()\n  edges: Record[];\n}\n\nexport class UpdateWorkflowDto {\n  @ApiProperty({ description: \"Name of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  name?: string;\n\n  @ApiProperty({ description: \"Description of the workflow\", required: false })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\", required: false })\n  @IsOptional()\n  @IsArray()\n  nodes?: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\", required: false })\n  @IsOptional()\n  @IsArray()\n  edges?: Record[];\n}\n\nexport class WorkflowDto {\n  @ApiProperty({ description: \"Unique identifier for the workflow\" })\n  id: string;\n\n  @ApiProperty({ description: \"Name of the workflow\" })\n  name: string;\n\n  @ApiProperty({ description: \"Description of the workflow\" })\n  description?: string;\n\n  @ApiProperty({ description: \"Workflow nodes configuration\" })\n  nodes: Record[];\n\n  @ApiProperty({ description: \"Workflow edges configuration\" })\n  edges: Record[];\n\n  @ApiProperty({ description: \"User ID who created the workflow\" })\n  userId: string;\n}\n\nexport class PaginatedWorkflowsResponseDto {\n  @ApiProperty({ type: [WorkflowDto] })\n  data: WorkflowDto[];\n\n  @ApiProperty()\n  total: number;\n\n  @ApiProperty()\n  page: number;\n\n  @ApiProperty()\n  limit: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WorkflowEdge.html":{"url":"interfaces/WorkflowEdge.html","title":"interface - WorkflowEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WorkflowEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sourceHandle\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            targetHandle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sourceHandle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sourceHandle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        targetHandle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        targetHandle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { createOpenRouter } from \"@openrouter/ai-sdk-provider\";\nimport { generateText } from \"ai\";\nimport { z } from \"zod\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Import types from the types package\nimport { BlockType, DataType, NodeCategory } from \"@zyra/types\";\n\nconst MODEL_TO_USE = \"gpt-4o-mini\";\n\ninterface WorkflowNode {\n  id: string;\n  type: string;\n  position: { x: number; y: number };\n  data: Record;\n}\n\ninterface WorkflowEdge {\n  id: string;\n  source: string;\n  target: string;\n  sourceHandle?: string;\n  targetHandle?: string;\n}\n\ninterface GenerationOptions {\n  detailedMode: boolean;\n  prefillConfig: boolean;\n  domainHint?: string;\n}\n\nconst WorkflowResponseSchema = z.object({\n  nodes: z.array(\n    z.object({\n      id: z.string(),\n      type: z.string().default(\"custom\"),\n      position: z.object({ x: z.number(), y: z.number() }),\n      data: z.object({\n        blockType: z.nativeEnum(BlockType),\n        label: z.string(),\n        description: z.string().optional(),\n        nodeType: z.enum([\"TRIGGER\", \"ACTION\", \"LOGIC\"]),\n        iconName: z.string(),\n        isEnabled: z.boolean().default(true),\n        config: z.record(z.unknown()).optional(),\n        inputs: z.array(z.unknown()).default([]),\n        outputs: z.array(z.unknown()).default([]),\n      }),\n    })\n  ),\n  edges: z.array(\n    z.object({\n      id: z.string(),\n      source: z.string(),\n      target: z.string(),\n      sourceHandle: z.string().optional(),\n      targetHandle: z.string().optional(),\n      type: z.string().default(\"custom\"),\n      animated: z.boolean().default(false),\n    })\n  ),\n});\n\n@Injectable()\nexport class AiService {\n  private readonly openrouter;\n\n  constructor() {\n    this.openrouter = createOpenRouter({\n      apiKey: process.env.OPENROUTER_API_KEY ?? \"\",\n      baseURL: \"https://openrouter.ai/api/v1\",\n    });\n  }\n\n  async generateBlock(prompt: string): Promise;\n      outputs: Array;\n      configFields: Array;\n    };\n  }> {\n    try {\n      const systemPrompt = `You are an AI that creates custom workflow blocks for Zzyra platform.\n\nAvailable Data Types: ${JSON.stringify(Object.values(DataType), null, 2)}\n\nGenerate a complete custom block definition based on user requirements.\n\nREQUIRED OUTPUT STRUCTURE:\n{\n  \"name\": \"Block Name\",\n  \"description\": \"What this block does\",\n  \"category\": \"Utility|Integration|AI|Data|Analytics|Communication\",\n  \"code\": \"async function execute(inputs, context) { /* Complete implementation */ return { outputName: result }; }\",\n  \"inputs\": [{\"name\": \"input\", \"dataType\": \"string\", \"required\": true, \"description\": \"Input description\"}],\n  \"outputs\": [{\"name\": \"output\", \"dataType\": \"string\", \"required\": true, \"description\": \"Output description\"}],\n  \"configFields\": [{\"name\": \"config\", \"label\": \"Config Label\", \"type\": \"string\", \"required\": false, \"description\": \"Config help\"}]\n}\n\nRequirements:\n1. Analyze user request to understand functionality\n2. Design appropriate inputs, outputs, and config fields\n3. Implement complete, working JavaScript code\n4. Handle errors gracefully\n5. Use async/await for any asynchronous operations\n6. Access config via context.config.fieldName\n7. Return object with named outputs matching the outputs array\n\nReturn ONLY the JSON object.`;\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: prompt },\n        ],\n        temperature: 0.3,\n        maxTokens: 4000,\n      });\n\n      const cleanedText = text.replace(/```json|```/g, \"\").trim();\n      const parsedResponse = JSON.parse(cleanedText);\n\n      return {\n        success: true,\n        block: parsedResponse,\n      };\n    } catch (error) {\n      console.error(\"AI Custom Block Generation Error:\", error);\n      throw new Error(\"Failed to generate custom block\");\n    }\n  }\n\n  async generateWorkflow(\n    description: string,\n    options: GenerationOptions = { detailedMode: true, prefillConfig: true },\n    existingNodes: WorkflowNode[] = [],\n    existingEdges: WorkflowEdge[] = []\n  ): Promise {\n    try {\n      const systemPrompt = this.generateSystemPrompt();\n\n      const userContext =\n        existingNodes.length > 0\n          ? this.generateExistingContext(\n              description,\n              existingNodes,\n              existingEdges\n            )\n          : this.generateNewContext(description);\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userContext },\n        ],\n        temperature: 0.1,\n        maxTokens: 12000,\n      });\n\n      const parsedResponse = await this.parseAndValidateResponse(text);\n      const enhancedNodes = this.enhanceNodes(parsedResponse.nodes);\n      const enhancedEdges = this.enhanceEdges(parsedResponse.edges);\n\n      const finalWorkflow = this.mergeWorkflows(\n        existingNodes,\n        existingEdges,\n        enhancedNodes,\n        enhancedEdges\n      );\n\n      return this.deduplicateWorkflow(finalWorkflow);\n    } catch (error) {\n      console.error(\"AI Workflow Generation Error:\", error);\n      throw error;\n    }\n  }\n\n  async refineWorkflow(\n    prompt: string,\n    options: {\n      preserveConnections?: boolean;\n      focusArea?: string;\n      intensity?: \"light\" | \"medium\" | \"heavy\";\n    } = {},\n    nodes: WorkflowNode[],\n    edges: WorkflowEdge[]\n  ): Promise {\n    try {\n      const systemPrompt = this.generateRefinementSystemPrompt();\n\n      const userContext = `\nWORKFLOW REFINEMENT REQUEST:\n\n**CURRENT WORKFLOW**:\nNodes: ${JSON.stringify(nodes, null, 2)}\nEdges: ${JSON.stringify(edges, null, 2)}\n\n**REFINEMENT REQUEST**: \"${prompt}\"\n**OPTIONS**: ${JSON.stringify(options, null, 2)}\n\n**TASK**: Refine the existing workflow based on the user's request while maintaining the core functionality.\n`;\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userContext },\n        ],\n        temperature: 0.1,\n        maxTokens: 12000,\n      });\n\n      const parsedResponse = await this.parseAndValidateResponse(text);\n      return {\n        nodes: this.enhanceNodes(parsedResponse.nodes),\n        edges: this.enhanceEdges(parsedResponse.edges),\n      };\n    } catch (error) {\n      console.error(\"AI Workflow Refinement Error:\", error);\n      throw error;\n    }\n  }\n\n  private generateSystemPrompt(): string {\n    return `You are an EXPERT WORKFLOW AI for Zzyra automation platform with deep understanding of blockchain, crypto, and automation workflows.\n\n🎯 **CORE MISSION**: Transform ANY natural language into sophisticated, executable workflows using our comprehensive block system.\n\n🔥 **AVAILABLE BLOCK TYPES**:\n${JSON.stringify(Object.values(BlockType), null, 2)}\n\n📊 **AVAILABLE DATA TYPES**: \n${JSON.stringify(Object.values(DataType), null, 2)}\n\n🔥 **BLOCK SYSTEM OVERVIEW**:\n- **PRICE_MONITOR**: Monitor cryptocurrency prices with conditions\n- **EMAIL**: Send email notifications\n- **NOTIFICATION**: Send various types of notifications\n- **CONDITION**: Add conditional logic and branching\n- **DELAY**: Add time delays between actions\n- **SCHEDULE**: Schedule recurring tasks\n- **WEBHOOK**: Handle webhook integrations\n- **HTTP_REQUEST**: Make HTTP calls to external APIs\n- **CALCULATOR**: Perform arithmetic calculations\n- **COMPARATOR**: Compare values with logical conditions\n- **BLOCKCHAIN_READ**: Read blockchain data (balances, transactions)\n- **DATABASE_QUERY/WRITE**: Database operations\n- **FILE_READ/WRITE**: File system operations\n- **TRANSFORMER**: Transform and manipulate data\n- **AGGREGATOR**: Aggregate and analyze data\n- **LOOP**: Repeat operations with iteration logic\n- **HTTP_CALL**: Call external services\n- **MESSAGE_SEND**: Send messages via various channels\n\n🎯 **OUTPUT SPECIFICATION**:\n\n**Node Structure** (STRICT FORMAT):\n{\n  \"id\": \"node-{{uuid}}\",\n  \"type\": \"custom\",\n  \"position\": {\"x\": intelligent_x, \"y\": intelligent_y},\n  \"data\": {\n    \"blockType\": \"EXACT_UPPERCASE_ENUM_VALUE\",\n    \"label\": \"User-friendly descriptive name\",\n    \"description\": \"Clear description of functionality\",\n    \"nodeType\": \"TRIGGER|ACTION|LOGIC\",\n    \"iconName\": \"appropriate-icon-name\",\n    \"isEnabled\": true,\n    \"config\": {\n      /* Intelligent configuration based on user request */\n    },\n    \"inputs\": [],\n    \"outputs\": []\n  }\n}\n\n**Edge Structure**:\n{\n  \"id\": \"edge-{{uuid}}\",\n  \"source\": \"source-node-id\",\n  \"target\": \"target-node-id\",\n  \"type\": \"custom\",\n  \"animated\": false\n}\n\n**CRITICAL REQUIREMENTS**:\n- Return ONLY valid JSON: {\"nodes\": [...], \"edges\": [...]}\n- Use exact BlockType enum values (UPPERCASE format)\n- Generate unique UUIDs for all IDs\n- Create intelligent positioning based on flow order\n- Generate proper configurations for each block type\n- Ensure logical execution flow (TRIGGER → LOGIC → ACTION)\n\nGenerate workflows that users can execute immediately.`;\n  }\n\n  private generateRefinementSystemPrompt(): string {\n    return `You are an EXPERT WORKFLOW REFINEMENT AI for Zzyra automation platform.\n\nYour task is to intelligently refine existing workflows based on user requests while preserving core functionality.\n\n**REFINEMENT CAPABILITIES**:\n- Add new nodes and connections\n- Modify existing configurations\n- Optimize workflow structure\n- Enhance error handling\n- Improve efficiency\n\n**OUTPUT**: Return the complete refined workflow as JSON with \"nodes\" and \"edges\" arrays.`;\n  }\n\n  private generateExistingContext(\n    prompt: string,\n    existingNodes: WorkflowNode[],\n    existingEdges: WorkflowEdge[]\n  ): string {\n    return `WORKFLOW ENHANCEMENT REQUEST:\n\n**CURRENT WORKFLOW**:\nNodes: ${JSON.stringify(existingNodes, null, 2)}\nEdges: ${JSON.stringify(existingEdges, null, 2)}\n\n**USER ENHANCEMENT REQUEST**: \"${prompt}\"\n\n**TASK**: Enhance the existing workflow by adding new functionality while maintaining existing capabilities.`;\n  }\n\n  private generateNewContext(prompt: string): string {\n    return `NEW WORKFLOW CREATION REQUEST:\n\n**USER REQUEST**: \"${prompt}\"\n\n**TASK**: Create a complete workflow from scratch that accomplishes the user's automation goal.`;\n  }\n\n  private async parseAndValidateResponse(\n    text: string\n  ): Promise> {\n    const cleanedText = text.replace(/```json|```/g, \"\").trim();\n\n    let parsedResponse: unknown;\n    try {\n      parsedResponse = JSON.parse(cleanedText);\n    } catch (parseError) {\n      throw new Error(\"AI generated invalid JSON format\");\n    }\n\n    const validationResult = WorkflowResponseSchema.safeParse(parsedResponse);\n    if (!validationResult.success) {\n      throw new Error(\n        `AI workflow validation failed: ${validationResult.error.message}`\n      );\n    }\n\n    return validationResult.data;\n  }\n\n  private enhanceNodes(nodes: Record[]): WorkflowNode[] {\n    return nodes.map((nodeData) => {\n      const nodeId = (nodeData.id as string) || `node-${uuidv4()}`;\n\n      return {\n        id: nodeId,\n        type: \"custom\",\n        position: nodeData.position as { x: number; y: number },\n        data: {\n          blockType: (nodeData.data as any)?.blockType,\n          label: (nodeData.data as any)?.label,\n          description: (nodeData.data as any)?.description || \"\",\n          nodeType: (nodeData.data as any)?.nodeType || \"ACTION\",\n          iconName: (nodeData.data as any)?.iconName || \"block\",\n          isEnabled: true,\n          config: (nodeData.data as any)?.config || {},\n          inputs: [],\n          outputs: [],\n          inputCount: 1,\n          outputCount: 1,\n          status: \"idle\",\n          nodeStatus: \"idle\",\n          isCompleted: false,\n          isFailed: false,\n          isExecuting: false,\n          isActive: false,\n        },\n      };\n    });\n  }\n\n  private enhanceEdges(edges: Record[]): WorkflowEdge[] {\n    return edges.map((edge) => ({\n      id: (edge.id as string) || `edge-${uuidv4()}`,\n      source: edge.source as string,\n      target: edge.target as string,\n      sourceHandle: edge.sourceHandle as string,\n      targetHandle: edge.targetHandle as string,\n      type: (edge.type as string) || \"custom\",\n      animated: (edge.animated as boolean) || false,\n    }));\n  }\n\n  private mergeWorkflows(\n    existingNodes: WorkflowNode[],\n    existingEdges: WorkflowEdge[],\n    newNodes: WorkflowNode[],\n    newEdges: WorkflowEdge[]\n  ): { nodes: WorkflowNode[]; edges: WorkflowEdge[] } {\n    if (existingNodes.length === 0) {\n      return { nodes: newNodes, edges: newEdges };\n    }\n\n    // Adjust positions to avoid overlap\n    const maxX = Math.max(...existingNodes.map((n) => n.position.x), 0);\n    const adjustedNewNodes = newNodes.map((node, index) => ({\n      ...node,\n      position: {\n        x: node.position.x + maxX + 200,\n        y: node.position.y + index * 50,\n      },\n    }));\n\n    return {\n      nodes: [...existingNodes, ...adjustedNewNodes],\n      edges: [...existingEdges, ...newEdges],\n    };\n  }\n\n  private deduplicateWorkflow(workflow: {\n    nodes: WorkflowNode[];\n    edges: WorkflowEdge[];\n  }): {\n    nodes: WorkflowNode[];\n    edges: WorkflowEdge[];\n  } {\n    const usedIds = new Set();\n    const deduplicatedNodes: WorkflowNode[] = [];\n    const deduplicatedEdges: WorkflowEdge[] = [];\n\n    workflow.nodes.forEach((node) => {\n      if (!usedIds.has(node.id)) {\n        usedIds.add(node.id);\n        deduplicatedNodes.push(node);\n      }\n    });\n\n    workflow.edges.forEach((edge) => {\n      if (!usedIds.has(edge.id)) {\n        usedIds.add(edge.id);\n        deduplicatedEdges.push(edge);\n      }\n    });\n\n    return { nodes: deduplicatedNodes, edges: deduplicatedEdges };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkflowEdgeDto.html":{"url":"classes/WorkflowEdgeDto.html","title":"class - WorkflowEdgeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkflowEdgeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/dto/workflow-generation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                source\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                sourceHandle\n                            \n                            \n                                    \n                                    \n                                target\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                targetHandle\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Edge ID'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        source\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Source node ID'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        sourceHandle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Source handle', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Target node ID'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        targetHandle\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Target handle', required: false})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:66\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsString,\n  IsOptional,\n  IsArray,\n  IsBoolean,\n  ValidateNested,\n} from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class GenerationOptionsDto {\n  @ApiProperty({ description: \"Enable detailed mode for generation\" })\n  @IsBoolean()\n  detailedMode: boolean;\n\n  @ApiProperty({ description: \"Enable prefill configuration\" })\n  @IsBoolean()\n  prefillConfig: boolean;\n\n  @ApiProperty({\n    description: \"Domain hint for better generation\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  domainHint?: string;\n}\n\nexport class WorkflowNodeDto {\n  @ApiProperty({ description: \"Node ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Node type\" })\n  @IsString()\n  type: string;\n\n  @ApiProperty({ description: \"Node position\" })\n  position: { x: number; y: number };\n\n  @ApiProperty({ description: \"Node data\" })\n  data: Record;\n}\n\nexport class WorkflowEdgeDto {\n  @ApiProperty({ description: \"Edge ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Source node ID\" })\n  @IsString()\n  source: string;\n\n  @ApiProperty({ description: \"Target node ID\" })\n  @IsString()\n  target: string;\n\n  @ApiProperty({ description: \"Source handle\", required: false })\n  @IsOptional()\n  @IsString()\n  sourceHandle?: string;\n\n  @ApiProperty({ description: \"Target handle\", required: false })\n  @IsOptional()\n  @IsString()\n  targetHandle?: string;\n}\n\nexport class GenerateWorkflowDto {\n  @ApiProperty({ description: \"Natural language description of the workflow\" })\n  @IsString()\n  description: string;\n\n  @ApiProperty({ description: \"Generation options\", required: false })\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => GenerationOptionsDto)\n  options?: GenerationOptionsDto;\n\n  @ApiProperty({ description: \"Existing workflow nodes\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  existingNodes?: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Existing workflow edges\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  existingEdges?: WorkflowEdgeDto[];\n}\n\nexport class RefineWorkflowDto {\n  @ApiProperty({ description: \"Refinement prompt\" })\n  @IsString()\n  prompt: string;\n\n  @ApiProperty({ description: \"Refinement options\", required: false })\n  @IsOptional()\n  options?: {\n    preserveConnections?: boolean;\n    focusArea?: string;\n    intensity?: \"light\" | \"medium\" | \"heavy\";\n  };\n\n  @ApiProperty({ description: \"Current workflow nodes\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Current workflow edges\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  edges: WorkflowEdgeDto[];\n}\n\nexport class WorkflowResponseDto {\n  @ApiProperty({ description: \"Generated workflow nodes\" })\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Generated workflow edges\" })\n  edges: WorkflowEdgeDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkflowExecutionDto.html":{"url":"classes/WorkflowExecutionDto.html","title":"class - WorkflowExecutionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkflowExecutionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/executions/dto/execution.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                completed_at\n                            \n                            \n                                    \n                                    Optional\n                                error\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                input_data\n                            \n                            \n                                    \n                                    Optional\n                                output_data\n                            \n                            \n                                    \n                                started_at\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                workflow_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(partial?: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/executions/dto/execution.dto.ts:102\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        partial\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        completed_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'When the execution completed', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Error message if execution failed', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique identifier for the execution'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        input_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Input data for the workflow execution', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:96\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        output_data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Output data from the workflow execution', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:102\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        started_at\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'When the execution started'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\"\n\n                    \n                \n                \n                    \n                        Default value : \"pending\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Current status of the execution', enum: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        workflow_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'ID of the workflow being executed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/executions/dto/execution.dto.ts:72\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsOptional, IsString, IsObject } from \"class-validator\";\n\nexport class CreateExecutionDto {\n  @ApiProperty({ description: \"ID of the workflow to execute\" })\n  @IsString()\n  workflowId: string;\n\n  @ApiProperty({ description: \"Input data for the execution\", required: false })\n  @IsOptional()\n  @IsObject()\n  input?: any;\n\n  @ApiProperty({\n    description: \"Type of trigger that started this execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  triggerType?: string;\n}\n\nexport class UpdateExecutionDto {\n  @ApiProperty({ description: \"New status for the execution\", required: false })\n  @IsOptional()\n  @IsString()\n  status?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  error?: string;\n\n  @ApiProperty({\n    description: \"Output data from the execution\",\n    required: false,\n  })\n  @IsOptional()\n  @IsObject()\n  output?: any;\n}\n\nexport class PaginationMetaDto {\n  @ApiProperty({ description: \"Total number of items\" })\n  total: number = 0;\n\n  @ApiProperty({ description: \"Current page number\" })\n  page: number = 1;\n\n  @ApiProperty({ description: \"Number of items per page\" })\n  limit: number = 10;\n\n  @ApiProperty({ description: \"Total number of pages\" })\n  totalPages: number = 0;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n// Move WorkflowExecutionDto before PaginatedExecutionsResponseDto\nexport class WorkflowExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the execution\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the workflow being executed\" })\n  workflow_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({ description: \"When the execution completed\", required: false })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the workflow execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the workflow execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class PaginatedExecutionsResponseDto {\n  @ApiProperty({\n    description: \"Array of workflow executions\",\n    type: [WorkflowExecutionDto],\n  })\n  data: WorkflowExecutionDto[] = [];\n\n  @ApiProperty({ description: \"Pagination metadata\", type: PaginationMetaDto })\n  meta: PaginationMetaDto = new PaginationMetaDto();\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n      if (partial.meta) {\n        this.meta = new PaginationMetaDto(partial.meta);\n      }\n    }\n  }\n}\n\nexport class NodeExecutionDto {\n  @ApiProperty({ description: \"Unique identifier for the node execution\" })\n  id: string = \"\";\n\n  @ApiProperty({\n    description: \"ID of the workflow execution this node belongs to\",\n  })\n  execution_id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node in the workflow\" })\n  node_id: string = \"\";\n\n  @ApiProperty({\n    description: \"Current status of the node execution\",\n    enum: [\"pending\", \"running\", \"completed\", \"failed\", \"paused\"],\n  })\n  status: \"pending\" | \"running\" | \"completed\" | \"failed\" | \"paused\" = \"pending\";\n\n  @ApiProperty({ description: \"When the node execution started\" })\n  started_at: string = \"\";\n\n  @ApiProperty({\n    description: \"When the node execution completed\",\n    required: false,\n  })\n  completed_at?: string;\n\n  @ApiProperty({\n    description: \"Error message if node execution failed\",\n    required: false,\n  })\n  error?: string;\n\n  @ApiProperty({\n    description: \"Input data for the node execution\",\n    required: false,\n  })\n  input_data?: Record;\n\n  @ApiProperty({\n    description: \"Output data from the node execution\",\n    required: false,\n  })\n  output_data?: Record;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class NodeLogDto {\n  @ApiProperty({ description: \"Unique identifier for the log entry\" })\n  id: string = \"\";\n\n  @ApiProperty({ description: \"ID of the node execution this log belongs to\" })\n  node_execution_id: string = \"\";\n\n  @ApiProperty({ description: \"Log message content\" })\n  message: string = \"\";\n\n  @ApiProperty({\n    description: \"Log level\",\n    enum: [\"info\", \"warn\", \"error\", \"debug\"],\n  })\n  level: \"info\" | \"warn\" | \"error\" | \"debug\" = \"info\";\n\n  @ApiProperty({ description: \"When the log was created\" })\n  created_at: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionDto {\n  @ApiProperty({\n    description: \"Optional node ID for targeted actions\",\n    required: false,\n  })\n  nodeId?: string;\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\nexport class ExecutionActionResponseDto {\n  @ApiProperty({ description: \"Whether the action was successful\" })\n  success: boolean = false;\n\n  @ApiProperty({ description: \"Response message\" })\n  message: string = \"\";\n\n  constructor(partial?: Partial) {\n    if (partial) {\n      Object.assign(this, partial);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/WorkflowNode.html":{"url":"interfaces/WorkflowNode.html","title":"interface - WorkflowNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  WorkflowNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/ai.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            position\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        position\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        position:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { createOpenRouter } from \"@openrouter/ai-sdk-provider\";\nimport { generateText } from \"ai\";\nimport { z } from \"zod\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Import types from the types package\nimport { BlockType, DataType, NodeCategory } from \"@zyra/types\";\n\nconst MODEL_TO_USE = \"gpt-4o-mini\";\n\ninterface WorkflowNode {\n  id: string;\n  type: string;\n  position: { x: number; y: number };\n  data: Record;\n}\n\ninterface WorkflowEdge {\n  id: string;\n  source: string;\n  target: string;\n  sourceHandle?: string;\n  targetHandle?: string;\n}\n\ninterface GenerationOptions {\n  detailedMode: boolean;\n  prefillConfig: boolean;\n  domainHint?: string;\n}\n\nconst WorkflowResponseSchema = z.object({\n  nodes: z.array(\n    z.object({\n      id: z.string(),\n      type: z.string().default(\"custom\"),\n      position: z.object({ x: z.number(), y: z.number() }),\n      data: z.object({\n        blockType: z.nativeEnum(BlockType),\n        label: z.string(),\n        description: z.string().optional(),\n        nodeType: z.enum([\"TRIGGER\", \"ACTION\", \"LOGIC\"]),\n        iconName: z.string(),\n        isEnabled: z.boolean().default(true),\n        config: z.record(z.unknown()).optional(),\n        inputs: z.array(z.unknown()).default([]),\n        outputs: z.array(z.unknown()).default([]),\n      }),\n    })\n  ),\n  edges: z.array(\n    z.object({\n      id: z.string(),\n      source: z.string(),\n      target: z.string(),\n      sourceHandle: z.string().optional(),\n      targetHandle: z.string().optional(),\n      type: z.string().default(\"custom\"),\n      animated: z.boolean().default(false),\n    })\n  ),\n});\n\n@Injectable()\nexport class AiService {\n  private readonly openrouter;\n\n  constructor() {\n    this.openrouter = createOpenRouter({\n      apiKey: process.env.OPENROUTER_API_KEY ?? \"\",\n      baseURL: \"https://openrouter.ai/api/v1\",\n    });\n  }\n\n  async generateBlock(prompt: string): Promise;\n      outputs: Array;\n      configFields: Array;\n    };\n  }> {\n    try {\n      const systemPrompt = `You are an AI that creates custom workflow blocks for Zzyra platform.\n\nAvailable Data Types: ${JSON.stringify(Object.values(DataType), null, 2)}\n\nGenerate a complete custom block definition based on user requirements.\n\nREQUIRED OUTPUT STRUCTURE:\n{\n  \"name\": \"Block Name\",\n  \"description\": \"What this block does\",\n  \"category\": \"Utility|Integration|AI|Data|Analytics|Communication\",\n  \"code\": \"async function execute(inputs, context) { /* Complete implementation */ return { outputName: result }; }\",\n  \"inputs\": [{\"name\": \"input\", \"dataType\": \"string\", \"required\": true, \"description\": \"Input description\"}],\n  \"outputs\": [{\"name\": \"output\", \"dataType\": \"string\", \"required\": true, \"description\": \"Output description\"}],\n  \"configFields\": [{\"name\": \"config\", \"label\": \"Config Label\", \"type\": \"string\", \"required\": false, \"description\": \"Config help\"}]\n}\n\nRequirements:\n1. Analyze user request to understand functionality\n2. Design appropriate inputs, outputs, and config fields\n3. Implement complete, working JavaScript code\n4. Handle errors gracefully\n5. Use async/await for any asynchronous operations\n6. Access config via context.config.fieldName\n7. Return object with named outputs matching the outputs array\n\nReturn ONLY the JSON object.`;\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: prompt },\n        ],\n        temperature: 0.3,\n        maxTokens: 4000,\n      });\n\n      const cleanedText = text.replace(/```json|```/g, \"\").trim();\n      const parsedResponse = JSON.parse(cleanedText);\n\n      return {\n        success: true,\n        block: parsedResponse,\n      };\n    } catch (error) {\n      console.error(\"AI Custom Block Generation Error:\", error);\n      throw new Error(\"Failed to generate custom block\");\n    }\n  }\n\n  async generateWorkflow(\n    description: string,\n    options: GenerationOptions = { detailedMode: true, prefillConfig: true },\n    existingNodes: WorkflowNode[] = [],\n    existingEdges: WorkflowEdge[] = []\n  ): Promise {\n    try {\n      const systemPrompt = this.generateSystemPrompt();\n\n      const userContext =\n        existingNodes.length > 0\n          ? this.generateExistingContext(\n              description,\n              existingNodes,\n              existingEdges\n            )\n          : this.generateNewContext(description);\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userContext },\n        ],\n        temperature: 0.1,\n        maxTokens: 12000,\n      });\n\n      const parsedResponse = await this.parseAndValidateResponse(text);\n      const enhancedNodes = this.enhanceNodes(parsedResponse.nodes);\n      const enhancedEdges = this.enhanceEdges(parsedResponse.edges);\n\n      const finalWorkflow = this.mergeWorkflows(\n        existingNodes,\n        existingEdges,\n        enhancedNodes,\n        enhancedEdges\n      );\n\n      return this.deduplicateWorkflow(finalWorkflow);\n    } catch (error) {\n      console.error(\"AI Workflow Generation Error:\", error);\n      throw error;\n    }\n  }\n\n  async refineWorkflow(\n    prompt: string,\n    options: {\n      preserveConnections?: boolean;\n      focusArea?: string;\n      intensity?: \"light\" | \"medium\" | \"heavy\";\n    } = {},\n    nodes: WorkflowNode[],\n    edges: WorkflowEdge[]\n  ): Promise {\n    try {\n      const systemPrompt = this.generateRefinementSystemPrompt();\n\n      const userContext = `\nWORKFLOW REFINEMENT REQUEST:\n\n**CURRENT WORKFLOW**:\nNodes: ${JSON.stringify(nodes, null, 2)}\nEdges: ${JSON.stringify(edges, null, 2)}\n\n**REFINEMENT REQUEST**: \"${prompt}\"\n**OPTIONS**: ${JSON.stringify(options, null, 2)}\n\n**TASK**: Refine the existing workflow based on the user's request while maintaining the core functionality.\n`;\n\n      const { text } = await generateText({\n        model: this.openrouter(MODEL_TO_USE),\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: userContext },\n        ],\n        temperature: 0.1,\n        maxTokens: 12000,\n      });\n\n      const parsedResponse = await this.parseAndValidateResponse(text);\n      return {\n        nodes: this.enhanceNodes(parsedResponse.nodes),\n        edges: this.enhanceEdges(parsedResponse.edges),\n      };\n    } catch (error) {\n      console.error(\"AI Workflow Refinement Error:\", error);\n      throw error;\n    }\n  }\n\n  private generateSystemPrompt(): string {\n    return `You are an EXPERT WORKFLOW AI for Zzyra automation platform with deep understanding of blockchain, crypto, and automation workflows.\n\n🎯 **CORE MISSION**: Transform ANY natural language into sophisticated, executable workflows using our comprehensive block system.\n\n🔥 **AVAILABLE BLOCK TYPES**:\n${JSON.stringify(Object.values(BlockType), null, 2)}\n\n📊 **AVAILABLE DATA TYPES**: \n${JSON.stringify(Object.values(DataType), null, 2)}\n\n🔥 **BLOCK SYSTEM OVERVIEW**:\n- **PRICE_MONITOR**: Monitor cryptocurrency prices with conditions\n- **EMAIL**: Send email notifications\n- **NOTIFICATION**: Send various types of notifications\n- **CONDITION**: Add conditional logic and branching\n- **DELAY**: Add time delays between actions\n- **SCHEDULE**: Schedule recurring tasks\n- **WEBHOOK**: Handle webhook integrations\n- **HTTP_REQUEST**: Make HTTP calls to external APIs\n- **CALCULATOR**: Perform arithmetic calculations\n- **COMPARATOR**: Compare values with logical conditions\n- **BLOCKCHAIN_READ**: Read blockchain data (balances, transactions)\n- **DATABASE_QUERY/WRITE**: Database operations\n- **FILE_READ/WRITE**: File system operations\n- **TRANSFORMER**: Transform and manipulate data\n- **AGGREGATOR**: Aggregate and analyze data\n- **LOOP**: Repeat operations with iteration logic\n- **HTTP_CALL**: Call external services\n- **MESSAGE_SEND**: Send messages via various channels\n\n🎯 **OUTPUT SPECIFICATION**:\n\n**Node Structure** (STRICT FORMAT):\n{\n  \"id\": \"node-{{uuid}}\",\n  \"type\": \"custom\",\n  \"position\": {\"x\": intelligent_x, \"y\": intelligent_y},\n  \"data\": {\n    \"blockType\": \"EXACT_UPPERCASE_ENUM_VALUE\",\n    \"label\": \"User-friendly descriptive name\",\n    \"description\": \"Clear description of functionality\",\n    \"nodeType\": \"TRIGGER|ACTION|LOGIC\",\n    \"iconName\": \"appropriate-icon-name\",\n    \"isEnabled\": true,\n    \"config\": {\n      /* Intelligent configuration based on user request */\n    },\n    \"inputs\": [],\n    \"outputs\": []\n  }\n}\n\n**Edge Structure**:\n{\n  \"id\": \"edge-{{uuid}}\",\n  \"source\": \"source-node-id\",\n  \"target\": \"target-node-id\",\n  \"type\": \"custom\",\n  \"animated\": false\n}\n\n**CRITICAL REQUIREMENTS**:\n- Return ONLY valid JSON: {\"nodes\": [...], \"edges\": [...]}\n- Use exact BlockType enum values (UPPERCASE format)\n- Generate unique UUIDs for all IDs\n- Create intelligent positioning based on flow order\n- Generate proper configurations for each block type\n- Ensure logical execution flow (TRIGGER → LOGIC → ACTION)\n\nGenerate workflows that users can execute immediately.`;\n  }\n\n  private generateRefinementSystemPrompt(): string {\n    return `You are an EXPERT WORKFLOW REFINEMENT AI for Zzyra automation platform.\n\nYour task is to intelligently refine existing workflows based on user requests while preserving core functionality.\n\n**REFINEMENT CAPABILITIES**:\n- Add new nodes and connections\n- Modify existing configurations\n- Optimize workflow structure\n- Enhance error handling\n- Improve efficiency\n\n**OUTPUT**: Return the complete refined workflow as JSON with \"nodes\" and \"edges\" arrays.`;\n  }\n\n  private generateExistingContext(\n    prompt: string,\n    existingNodes: WorkflowNode[],\n    existingEdges: WorkflowEdge[]\n  ): string {\n    return `WORKFLOW ENHANCEMENT REQUEST:\n\n**CURRENT WORKFLOW**:\nNodes: ${JSON.stringify(existingNodes, null, 2)}\nEdges: ${JSON.stringify(existingEdges, null, 2)}\n\n**USER ENHANCEMENT REQUEST**: \"${prompt}\"\n\n**TASK**: Enhance the existing workflow by adding new functionality while maintaining existing capabilities.`;\n  }\n\n  private generateNewContext(prompt: string): string {\n    return `NEW WORKFLOW CREATION REQUEST:\n\n**USER REQUEST**: \"${prompt}\"\n\n**TASK**: Create a complete workflow from scratch that accomplishes the user's automation goal.`;\n  }\n\n  private async parseAndValidateResponse(\n    text: string\n  ): Promise> {\n    const cleanedText = text.replace(/```json|```/g, \"\").trim();\n\n    let parsedResponse: unknown;\n    try {\n      parsedResponse = JSON.parse(cleanedText);\n    } catch (parseError) {\n      throw new Error(\"AI generated invalid JSON format\");\n    }\n\n    const validationResult = WorkflowResponseSchema.safeParse(parsedResponse);\n    if (!validationResult.success) {\n      throw new Error(\n        `AI workflow validation failed: ${validationResult.error.message}`\n      );\n    }\n\n    return validationResult.data;\n  }\n\n  private enhanceNodes(nodes: Record[]): WorkflowNode[] {\n    return nodes.map((nodeData) => {\n      const nodeId = (nodeData.id as string) || `node-${uuidv4()}`;\n\n      return {\n        id: nodeId,\n        type: \"custom\",\n        position: nodeData.position as { x: number; y: number },\n        data: {\n          blockType: (nodeData.data as any)?.blockType,\n          label: (nodeData.data as any)?.label,\n          description: (nodeData.data as any)?.description || \"\",\n          nodeType: (nodeData.data as any)?.nodeType || \"ACTION\",\n          iconName: (nodeData.data as any)?.iconName || \"block\",\n          isEnabled: true,\n          config: (nodeData.data as any)?.config || {},\n          inputs: [],\n          outputs: [],\n          inputCount: 1,\n          outputCount: 1,\n          status: \"idle\",\n          nodeStatus: \"idle\",\n          isCompleted: false,\n          isFailed: false,\n          isExecuting: false,\n          isActive: false,\n        },\n      };\n    });\n  }\n\n  private enhanceEdges(edges: Record[]): WorkflowEdge[] {\n    return edges.map((edge) => ({\n      id: (edge.id as string) || `edge-${uuidv4()}`,\n      source: edge.source as string,\n      target: edge.target as string,\n      sourceHandle: edge.sourceHandle as string,\n      targetHandle: edge.targetHandle as string,\n      type: (edge.type as string) || \"custom\",\n      animated: (edge.animated as boolean) || false,\n    }));\n  }\n\n  private mergeWorkflows(\n    existingNodes: WorkflowNode[],\n    existingEdges: WorkflowEdge[],\n    newNodes: WorkflowNode[],\n    newEdges: WorkflowEdge[]\n  ): { nodes: WorkflowNode[]; edges: WorkflowEdge[] } {\n    if (existingNodes.length === 0) {\n      return { nodes: newNodes, edges: newEdges };\n    }\n\n    // Adjust positions to avoid overlap\n    const maxX = Math.max(...existingNodes.map((n) => n.position.x), 0);\n    const adjustedNewNodes = newNodes.map((node, index) => ({\n      ...node,\n      position: {\n        x: node.position.x + maxX + 200,\n        y: node.position.y + index * 50,\n      },\n    }));\n\n    return {\n      nodes: [...existingNodes, ...adjustedNewNodes],\n      edges: [...existingEdges, ...newEdges],\n    };\n  }\n\n  private deduplicateWorkflow(workflow: {\n    nodes: WorkflowNode[];\n    edges: WorkflowEdge[];\n  }): {\n    nodes: WorkflowNode[];\n    edges: WorkflowEdge[];\n  } {\n    const usedIds = new Set();\n    const deduplicatedNodes: WorkflowNode[] = [];\n    const deduplicatedEdges: WorkflowEdge[] = [];\n\n    workflow.nodes.forEach((node) => {\n      if (!usedIds.has(node.id)) {\n        usedIds.add(node.id);\n        deduplicatedNodes.push(node);\n      }\n    });\n\n    workflow.edges.forEach((edge) => {\n      if (!usedIds.has(edge.id)) {\n        usedIds.add(edge.id);\n        deduplicatedEdges.push(edge);\n      }\n    });\n\n    return { nodes: deduplicatedNodes, edges: deduplicatedEdges };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkflowNodeDto.html":{"url":"classes/WorkflowNodeDto.html","title":"class - WorkflowNodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkflowNodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/dto/workflow-generation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                position\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Node data'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Node ID'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        position\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Node position'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Node type'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsString,\n  IsOptional,\n  IsArray,\n  IsBoolean,\n  ValidateNested,\n} from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class GenerationOptionsDto {\n  @ApiProperty({ description: \"Enable detailed mode for generation\" })\n  @IsBoolean()\n  detailedMode: boolean;\n\n  @ApiProperty({ description: \"Enable prefill configuration\" })\n  @IsBoolean()\n  prefillConfig: boolean;\n\n  @ApiProperty({\n    description: \"Domain hint for better generation\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  domainHint?: string;\n}\n\nexport class WorkflowNodeDto {\n  @ApiProperty({ description: \"Node ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Node type\" })\n  @IsString()\n  type: string;\n\n  @ApiProperty({ description: \"Node position\" })\n  position: { x: number; y: number };\n\n  @ApiProperty({ description: \"Node data\" })\n  data: Record;\n}\n\nexport class WorkflowEdgeDto {\n  @ApiProperty({ description: \"Edge ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Source node ID\" })\n  @IsString()\n  source: string;\n\n  @ApiProperty({ description: \"Target node ID\" })\n  @IsString()\n  target: string;\n\n  @ApiProperty({ description: \"Source handle\", required: false })\n  @IsOptional()\n  @IsString()\n  sourceHandle?: string;\n\n  @ApiProperty({ description: \"Target handle\", required: false })\n  @IsOptional()\n  @IsString()\n  targetHandle?: string;\n}\n\nexport class GenerateWorkflowDto {\n  @ApiProperty({ description: \"Natural language description of the workflow\" })\n  @IsString()\n  description: string;\n\n  @ApiProperty({ description: \"Generation options\", required: false })\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => GenerationOptionsDto)\n  options?: GenerationOptionsDto;\n\n  @ApiProperty({ description: \"Existing workflow nodes\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  existingNodes?: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Existing workflow edges\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  existingEdges?: WorkflowEdgeDto[];\n}\n\nexport class RefineWorkflowDto {\n  @ApiProperty({ description: \"Refinement prompt\" })\n  @IsString()\n  prompt: string;\n\n  @ApiProperty({ description: \"Refinement options\", required: false })\n  @IsOptional()\n  options?: {\n    preserveConnections?: boolean;\n    focusArea?: string;\n    intensity?: \"light\" | \"medium\" | \"heavy\";\n  };\n\n  @ApiProperty({ description: \"Current workflow nodes\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Current workflow edges\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  edges: WorkflowEdgeDto[];\n}\n\nexport class WorkflowResponseDto {\n  @ApiProperty({ description: \"Generated workflow nodes\" })\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Generated workflow edges\" })\n  edges: WorkflowEdgeDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WorkflowRepository.html":{"url":"injectables/WorkflowRepository.html","title":"injectable - WorkflowRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WorkflowRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/repositories/workflow.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findByUserId\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/database/repositories/workflow.repository.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/workflow.repository.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/workflow.repository.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/workflow.repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/workflow.repository.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/workflow.repository.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, data: Partial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/repositories/workflow.repository.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                        Partial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { PrismaService } from \"../prisma.service\";\nimport { Workflow } from \"@zyra/database\";\n\n@Injectable()\nexport class WorkflowRepository {\n  constructor(private prisma: PrismaService) {}\n\n  async findAll(\n    userId: string,\n    page = 1,\n    limit = 10\n  ): Promise {\n    const skip = (page - 1) * limit;\n\n    const [workflows, total] = await Promise.all([\n      this.prisma.client.workflow.findMany({\n        where: { userId },\n        skip,\n        take: limit,\n        include: {\n          _count: {\n            select: {\n              executions: true,\n            },\n          },\n        },\n        orderBy: { updatedAt: \"desc\" },\n      }),\n      this.prisma.client.workflow.count({\n        where: { userId },\n      }),\n    ]);\n\n    return {\n      data: workflows,\n      total,\n      page,\n      limit,\n    };\n  }\n\n  async findById(id: string): Promise {\n    return this.prisma.client.workflow.findUnique({\n      where: { id },\n    });\n  }\n\n  async findByUserId(userId: string): Promise {\n    return this.prisma.client.workflow.findMany({\n      where: { userId },\n      include: {\n        _count: {\n          select: {\n            executions: true,\n          },\n        },\n      },\n    });\n  }\n\n  async create(data: {\n    name: string;\n    description?: string;\n    nodes: Record[];\n    edges: Record[];\n    userId: string;\n  }): Promise {\n    return this.prisma.client.workflow.create({\n      data: {\n        name: data.name,\n        description: data.description,\n        nodes: data.nodes as any,\n        edges: data.edges as any,\n        userId: data.userId,\n      },\n    });\n  }\n\n  async update(\n    id: string,\n    data: Partial[];\n      edges: Record[];\n    }>\n  ): Promise {\n    return this.prisma.client.workflow.update({\n      where: { id },\n      data: {\n        ...(data.name && { name: data.name }),\n        ...(data.description && { description: data.description }),\n        ...(data.nodes && { nodes: data.nodes as any }),\n        ...(data.edges && { edges: data.edges as any }),\n        updatedAt: new Date(),\n      },\n    });\n  }\n\n  async delete(id: string): Promise {\n    await this.prisma.client.workflow.delete({\n      where: { id },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkflowResponseDto.html":{"url":"classes/WorkflowResponseDto.html","title":"class - WorkflowResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkflowResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/ai/dto/workflow-generation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                edges\n                            \n                            \n                                    \n                                nodes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        edges\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkflowEdgeDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Generated workflow edges'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkflowNodeDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Generated workflow nodes'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/ai/dto/workflow-generation.dto.ts:123\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  IsString,\n  IsOptional,\n  IsArray,\n  IsBoolean,\n  ValidateNested,\n} from \"class-validator\";\nimport { Type } from \"class-transformer\";\n\nexport class GenerationOptionsDto {\n  @ApiProperty({ description: \"Enable detailed mode for generation\" })\n  @IsBoolean()\n  detailedMode: boolean;\n\n  @ApiProperty({ description: \"Enable prefill configuration\" })\n  @IsBoolean()\n  prefillConfig: boolean;\n\n  @ApiProperty({\n    description: \"Domain hint for better generation\",\n    required: false,\n  })\n  @IsOptional()\n  @IsString()\n  domainHint?: string;\n}\n\nexport class WorkflowNodeDto {\n  @ApiProperty({ description: \"Node ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Node type\" })\n  @IsString()\n  type: string;\n\n  @ApiProperty({ description: \"Node position\" })\n  position: { x: number; y: number };\n\n  @ApiProperty({ description: \"Node data\" })\n  data: Record;\n}\n\nexport class WorkflowEdgeDto {\n  @ApiProperty({ description: \"Edge ID\" })\n  @IsString()\n  id: string;\n\n  @ApiProperty({ description: \"Source node ID\" })\n  @IsString()\n  source: string;\n\n  @ApiProperty({ description: \"Target node ID\" })\n  @IsString()\n  target: string;\n\n  @ApiProperty({ description: \"Source handle\", required: false })\n  @IsOptional()\n  @IsString()\n  sourceHandle?: string;\n\n  @ApiProperty({ description: \"Target handle\", required: false })\n  @IsOptional()\n  @IsString()\n  targetHandle?: string;\n}\n\nexport class GenerateWorkflowDto {\n  @ApiProperty({ description: \"Natural language description of the workflow\" })\n  @IsString()\n  description: string;\n\n  @ApiProperty({ description: \"Generation options\", required: false })\n  @IsOptional()\n  @ValidateNested()\n  @Type(() => GenerationOptionsDto)\n  options?: GenerationOptionsDto;\n\n  @ApiProperty({ description: \"Existing workflow nodes\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  existingNodes?: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Existing workflow edges\", required: false })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  existingEdges?: WorkflowEdgeDto[];\n}\n\nexport class RefineWorkflowDto {\n  @ApiProperty({ description: \"Refinement prompt\" })\n  @IsString()\n  prompt: string;\n\n  @ApiProperty({ description: \"Refinement options\", required: false })\n  @IsOptional()\n  options?: {\n    preserveConnections?: boolean;\n    focusArea?: string;\n    intensity?: \"light\" | \"medium\" | \"heavy\";\n  };\n\n  @ApiProperty({ description: \"Current workflow nodes\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowNodeDto)\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Current workflow edges\" })\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => WorkflowEdgeDto)\n  edges: WorkflowEdgeDto[];\n}\n\nexport class WorkflowResponseDto {\n  @ApiProperty({ description: \"Generated workflow nodes\" })\n  nodes: WorkflowNodeDto[];\n\n  @ApiProperty({ description: \"Generated workflow edges\" })\n  edges: WorkflowEdgeDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WorkflowsController.html":{"url":"controllers/WorkflowsController.html","title":"controller - WorkflowsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WorkflowsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workflows/workflows.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                workflows\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                execute\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req: literal type, createWorkflowDto: CreateWorkflowDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Create a new workflow'})@ApiResponse({status: undefined, description: 'Workflow created successfully', type: WorkflowDto})\n                \n            \n\n                    \n                        \n                            Defined in src/workflows/workflows.controller.ts:82\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                createWorkflowDto\n                                            \n                                                            CreateWorkflowDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(req: literal type, id: string, executeDto: ExecuteWorkflowDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(':id/execute')@ApiOperation({summary: 'Execute a workflow immediately or schedule for later'})@ApiResponse({status: undefined, description: 'Workflow execution started or scheduled successfully', type: ExecuteWorkflowResponseDto})@ApiResponse({status: undefined, description: 'Workflow not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/workflows/workflows.controller.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                executeDto\n                                            \n                                                            ExecuteWorkflowDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: literal type, page: number, limit: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({summary: 'Get all workflows'})@ApiResponse({status: undefined, description: 'Return all workflows', type: PaginatedWorkflowsResponseDto})@ApiQuery({name: 'page', required: false, type: Number})@ApiQuery({name: 'limit', required: false, type: Number})\n                \n            \n\n                    \n                        \n                            Defined in src/workflows/workflows.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(req: literal type, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({summary: 'Get a workflow by ID'})@ApiResponse({status: undefined, description: 'Return a workflow', type: WorkflowDto})@ApiResponse({status: undefined, description: 'Workflow not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/workflows/workflows.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(req: literal type, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({summary: 'Delete a workflow'})@ApiResponse({status: undefined, description: 'Workflow deleted successfully'})@ApiResponse({status: undefined, description: 'Workflow not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/workflows/workflows.controller.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(req: literal type, id: string, updateWorkflowDto: UpdateWorkflowDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOperation({summary: 'Update a workflow'})@ApiResponse({status: undefined, description: 'Workflow updated successfully', type: WorkflowDto})@ApiResponse({status: undefined, description: 'Workflow not found'})\n                \n            \n\n                    \n                        \n                            Defined in src/workflows/workflows.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateWorkflowDto\n                                            \n                                                            UpdateWorkflowDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Put,\n  Delete,\n  Query,\n  HttpStatus,\n  UseGuards,\n  Request,\n} from \"@nestjs/common\";\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiQuery,\n  ApiBearerAuth,\n} from \"@nestjs/swagger\";\nimport {\n  CreateWorkflowDto,\n  UpdateWorkflowDto,\n  WorkflowDto,\n  PaginatedWorkflowsResponseDto,\n} from \"./dto/workflow.dto\";\nimport {\n  ExecuteWorkflowDto,\n  ExecuteWorkflowResponseDto,\n} from \"./dto/execute-workflow.dto\";\nimport { WorkflowsService } from \"./workflows.service\";\nimport { Public } from \"../auth/decorators/public.decorator\";\n\n@ApiTags(\"workflows\")\n@Controller(\"workflows\")\n@ApiBearerAuth()\nexport class WorkflowsController {\n  constructor(private readonly workflowsService: WorkflowsService) {}\n\n  @Get()\n  @ApiOperation({ summary: \"Get all workflows\" })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: \"Return all workflows\",\n    type: PaginatedWorkflowsResponseDto,\n  })\n  @ApiQuery({ name: \"page\", required: false, type: Number })\n  @ApiQuery({ name: \"limit\", required: false, type: Number })\n  async findAll(\n    @Request() req: { user: { id: string } },\n    @Query(\"page\") page = 1,\n    @Query(\"limit\") limit = 10\n  ): Promise {\n    return this.workflowsService.findAll(req.user.id, +page, +limit);\n  }\n\n  @Get(\":id\")\n  @ApiOperation({ summary: \"Get a workflow by ID\" })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: \"Return a workflow\",\n    type: WorkflowDto,\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: \"Workflow not found\",\n  })\n  async findOne(\n    @Request() req: { user: { id: string } },\n    @Param(\"id\") id: string\n  ): Promise {\n    return this.workflowsService.findOne(id, req.user.id);\n  }\n\n  @Post()\n  @ApiOperation({ summary: \"Create a new workflow\" })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: \"Workflow created successfully\",\n    type: WorkflowDto,\n  })\n  async create(\n    @Request() req: { user: { id: string } },\n    @Body() createWorkflowDto: CreateWorkflowDto\n  ): Promise {\n    return this.workflowsService.create(createWorkflowDto, req.user.id);\n  }\n\n  @Put(\":id\")\n  @ApiOperation({ summary: \"Update a workflow\" })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: \"Workflow updated successfully\",\n    type: WorkflowDto,\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: \"Workflow not found\",\n  })\n  async update(\n    @Request() req: { user: { id: string } },\n    @Param(\"id\") id: string,\n    @Body() updateWorkflowDto: UpdateWorkflowDto\n  ): Promise {\n    return this.workflowsService.update(id, updateWorkflowDto, req.user.id);\n  }\n\n  @Delete(\":id\")\n  @ApiOperation({ summary: \"Delete a workflow\" })\n  @ApiResponse({\n    status: HttpStatus.NO_CONTENT,\n    description: \"Workflow deleted successfully\",\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: \"Workflow not found\",\n  })\n  async remove(\n    @Request() req: { user: { id: string } },\n    @Param(\"id\") id: string\n  ): Promise {\n    return this.workflowsService.remove(id, req.user.id);\n  }\n\n  @Post(\":id/execute\")\n  @ApiOperation({\n    summary: \"Execute a workflow immediately or schedule for later\",\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: \"Workflow execution started or scheduled successfully\",\n    type: ExecuteWorkflowResponseDto,\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: \"Workflow not found\",\n  })\n  async execute(\n    @Request() req: { user: { id: string } },\n    @Param(\"id\") id: string,\n    @Body() executeDto: ExecuteWorkflowDto = {}\n  ): Promise {\n    const scheduledTime = executeDto.scheduledTime\n      ? new Date(executeDto.scheduledTime)\n      : undefined;\n\n    const result = await this.workflowsService.execute(\n      id,\n      req.user.id,\n      scheduledTime,\n      executeDto.input\n    );\n\n    return {\n      executionId: result.executionId,\n      status: scheduledTime ? \"scheduled\" : \"immediate\",\n      scheduledTime: scheduledTime?.toISOString(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WorkflowsModule.html":{"url":"modules/WorkflowsModule.html","title":"module - WorkflowsModule","body":"\n                   \n\n\n\n\n    Modules\n    WorkflowsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WorkflowsModule\n\n\n\ncluster_WorkflowsModule_imports\n\n\n\ncluster_WorkflowsModule_exports\n\n\n\ncluster_WorkflowsModule_providers\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nWorkflowsModule\n\nWorkflowsModule\n\nWorkflowsModule -->\n\nDatabaseModule->WorkflowsModule\n\n\n\n\n\nQueueModule\n\nQueueModule\n\nWorkflowsModule -->\n\nQueueModule->WorkflowsModule\n\n\n\n\n\nWorkflowsService \n\nWorkflowsService \n\nWorkflowsService  -->\n\nWorkflowsModule->WorkflowsService \n\n\n\n\n\nWorkflowsService\n\nWorkflowsService\n\nWorkflowsModule -->\n\nWorkflowsService->WorkflowsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/workflows/workflows.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WorkflowsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WorkflowsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                        \n                            QueueModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WorkflowsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { WorkflowsController } from \"./workflows.controller\";\nimport { WorkflowsService } from \"./workflows.service\";\nimport { DatabaseModule } from \"../database/database.module\";\nimport { QueueModule } from \"../queue/queue.module\";\n\n@Module({\n  imports: [DatabaseModule, QueueModule],\n  controllers: [WorkflowsController],\n  providers: [WorkflowsService],\n  exports: [WorkflowsService],\n})\nexport class WorkflowsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WorkflowsService.html":{"url":"injectables/WorkflowsService.html","title":"injectable - WorkflowsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WorkflowsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workflows/workflows.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                execute\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(workflowRepository: WorkflowRepository, executionRepository: ExecutionRepository, queueService: QueueService)\n                    \n                \n                        \n                            \n                                Defined in src/workflows/workflows.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        workflowRepository\n                                                  \n                                                        \n                                                                        WorkflowRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        executionRepository\n                                                  \n                                                        \n                                                                        ExecutionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        queueService\n                                                  \n                                                        \n                                                                        QueueService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createWorkflowDto: CreateWorkflowDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workflows/workflows.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createWorkflowDto\n                                            \n                                                            CreateWorkflowDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: string, userId: string, scheduledTime?: Date, input?: Record)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workflows/workflows.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                scheduledTime\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                input\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workflows/workflows.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workflows/workflows.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workflows/workflows.service.ts:117\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateWorkflowDto: UpdateWorkflowDto, userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/workflows/workflows.service.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateWorkflowDto\n                                            \n                                                            UpdateWorkflowDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from \"@nestjs/common\";\nimport {\n  CreateWorkflowDto,\n  PaginatedWorkflowsResponseDto,\n  UpdateWorkflowDto,\n  WorkflowDto,\n} from \"./dto/workflow.dto\";\nimport { QueueService } from \"../queue/queue.service\";\nimport { WorkflowRepository, ExecutionRepository } from \"@zyra/database\";\n\n@Injectable()\nexport class WorkflowsService {\n  constructor(\n    private workflowRepository: WorkflowRepository,\n    private executionRepository: ExecutionRepository,\n    private queueService: QueueService\n  ) {}\n\n  async findAll(\n    userId: string,\n    page = 1,\n    limit = 10\n  ): Promise {\n    const workflows = await this.workflowRepository.findByUserId(userId, true);\n\n    // Map Prisma model to DTO\n    const data = workflows.map((workflow) => ({\n      id: workflow.id,\n      name: workflow.name,\n      description: workflow.description || undefined,\n      nodes: workflow.nodes as Record[],\n      edges: workflow.edges as Record[],\n      userId: workflow.userId,\n      createdAt: workflow.createdAt || new Date(),\n      updatedAt: workflow.updatedAt || new Date(),\n    }));\n\n    // Simple pagination simulation\n    const startIndex = (page - 1) * limit;\n    const endIndex = startIndex + limit;\n    const paginatedData = data.slice(startIndex, endIndex);\n\n    return {\n      data: paginatedData,\n      total: data.length,\n      page,\n      limit,\n    };\n  }\n\n  async findOne(id: string, userId: string): Promise {\n    const workflow = await this.workflowRepository.findById(id, userId);\n    if (!workflow) {\n      throw new NotFoundException(`Workflow with ID ${id} not found`);\n    }\n\n    return {\n      id: workflow.id,\n      name: workflow.name,\n      description: workflow.description || undefined,\n      nodes: workflow.nodes as Record[],\n      edges: workflow.edges as Record[],\n      userId: workflow.userId,\n    };\n  }\n\n  async create(\n    createWorkflowDto: CreateWorkflowDto,\n    userId: string\n  ): Promise {\n    const workflow = await this.workflowRepository.create({\n      name: createWorkflowDto.name,\n      description: createWorkflowDto.description,\n      nodes: createWorkflowDto.nodes as any, // Type assertion for JSON compatibility\n      edges: createWorkflowDto.edges as any, // Type assertion for JSON compatibility\n      user: { connect: { id: userId } }, // Connect to user by ID instead of using userId directly\n    });\n\n    return {\n      id: workflow.id,\n      name: workflow.name,\n      description: workflow.description || undefined,\n      nodes: workflow.nodes as Record[],\n      edges: workflow.edges as Record[],\n      userId: workflow.userId,\n    };\n  }\n\n  async update(\n    id: string,\n    updateWorkflowDto: UpdateWorkflowDto,\n    userId: string\n  ): Promise {\n    // First verify the user owns this workflow\n    const existingWorkflow = await this.workflowRepository.findById(id, userId);\n    if (!existingWorkflow) {\n      throw new NotFoundException(`Workflow with ID ${id} not found`);\n    }\n\n    const workflow = await this.workflowRepository.update(id, {\n      name: updateWorkflowDto.name,\n      description: updateWorkflowDto.description,\n      nodes: updateWorkflowDto.nodes as any, // Type assertion for JSON compatibility\n      edges: updateWorkflowDto.edges as any, // Type assertion for JSON compatibility\n    });\n\n    return {\n      id: workflow.id,\n      name: workflow.name,\n      description: workflow.description || undefined,\n      nodes: workflow.nodes as Record[],\n      edges: workflow.edges as Record[],\n      userId: workflow.userId,\n    };\n  }\n\n  async remove(id: string, userId: string): Promise {\n    // First verify the user owns this workflow\n    const existingWorkflow = await this.workflowRepository.findById(id, userId);\n    if (!existingWorkflow) {\n      throw new NotFoundException(`Workflow with ID ${id} not found`);\n    }\n\n    await this.workflowRepository.delete(id);\n  }\n\n  async execute(\n    id: string,\n    userId: string,\n    scheduledTime?: Date,\n    input?: Record\n  ): Promise {\n    // First verify the user owns this workflow\n    const workflow = await this.workflowRepository.findById(id, userId);\n    if (!workflow) {\n      throw new NotFoundException(`Workflow with ID ${id} not found`);\n    }\n\n    // Create workflow execution using the execution repository\n    const execution = await this.executionRepository.createExecution(\n      id,\n      userId,\n      input || {}, // Use provided input or empty object\n      \"manual\" // Trigger type\n    );\n\n    if (!execution) {\n      throw new Error(\"Failed to create workflow execution\");\n    }\n\n    const executionId = execution.id;\n\n    console.log(\n      `Created execution ${executionId} for workflow ${id} by user ${userId}`\n    );\n\n    // Queue the execution job (immediate or scheduled)\n    try {\n      if (scheduledTime) {\n        await this.queueService.addScheduledExecutionJob(\n          executionId,\n          id,\n          userId,\n          scheduledTime\n        );\n        console.log(\n          `Successfully scheduled execution ${executionId} for ${scheduledTime.toISOString()}`\n        );\n      } else {\n        await this.queueService.addExecutionJob(executionId, id, userId);\n        console.log(`Successfully queued execution ${executionId}`);\n      }\n    } catch (error) {\n      console.error(`Failed to queue execution ${executionId}:`, error);\n      // Update execution status to failed\n      await this.executionRepository.updateStatus(\n        executionId,\n        \"failed\" as any,\n        \"Failed to queue execution\"\n      );\n      throw new Error(\"Failed to queue workflow execution\");\n    }\n\n    return { executionId };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^11.0.0\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.1.16\n        \n            @openrouter/ai-sdk-provider : ^0.7.2\n        \n            @zyra/database : workspace:*\n        \n            @zyra/types : workspace:*\n        \n            ai : ^4.3.0\n        \n            amqplib : ^0.10.3\n        \n            bcrypt : ^6.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-parser : ^1.4.7\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n        \n            uuid : ^9.0.0\n        \n            zod : ^3.22.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlockType   (/.../block-types.ts)\n                        \n                        \n                            ChainType   (/.../wallet.ts)\n                        \n                        \n                            DataType   (/.../custom-block.ts)\n                        \n                        \n                            ExecutionType   (/.../custom-block.ts)\n                        \n                        \n                            LogicType   (/.../custom-block.ts)\n                        \n                        \n                            NodeCategory   (/.../categories.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/block-types.ts\n    \n        \n            \n                \n                    \n                        \n                        BlockType\n                    \n                \n                    \n                        \n                            Defines all available block types for the workflow system\nThis serves as the single source of truth for block types\n\n                        \n                    \n                        \n                            \n                                 PRICE_MONITOR\n                            \n                        \n                        \n                            \n                                Value : PRICE_MONITOR\n                            \n                        \n                        \n                            \n                                 SCHEDULE\n                            \n                        \n                        \n                            \n                                Value : SCHEDULE\n                            \n                        \n                        \n                            \n                                 WEBHOOK\n                            \n                        \n                        \n                            \n                                Value : WEBHOOK\n                            \n                        \n                        \n                            \n                                 EMAIL\n                            \n                        \n                        \n                            \n                                Value : EMAIL\n                            \n                        \n                        \n                            \n                                 NOTIFICATION\n                            \n                        \n                        \n                            \n                                Value : NOTIFICATION\n                            \n                        \n                        \n                            \n                                 UNKNOWN\n                            \n                        \n                        \n                            \n                                Value : UNKNOWN\n                            \n                        \n                        \n                            \n                                 HTTP_REQUEST\n                            \n                        \n                        \n                            \n                                Value : HTTP_REQUEST\n                            \n                        \n                        \n                            \n                                 DATABASE_QUERY\n                            \n                        \n                        \n                            \n                                Value : DATABASE_QUERY\n                            \n                        \n                        \n                            \n                                 FILE_READ\n                            \n                        \n                        \n                            \n                                Value : FILE_READ\n                            \n                        \n                        \n                            \n                                 BLOCKCHAIN_READ\n                            \n                        \n                        \n                            \n                                Value : BLOCKCHAIN_READ\n                            \n                        \n                        \n                            \n                                 CALCULATOR\n                            \n                        \n                        \n                            \n                                Value : CALCULATOR\n                            \n                        \n                        \n                            \n                                 COMPARATOR\n                            \n                        \n                        \n                            \n                                Value : COMPARATOR\n                            \n                        \n                        \n                            \n                                 TRANSFORMER\n                            \n                        \n                        \n                            \n                                Value : TRANSFORMER\n                            \n                        \n                        \n                            \n                                 AGGREGATOR\n                            \n                        \n                        \n                            \n                                Value : AGGREGATOR\n                            \n                        \n                        \n                            \n                                 CONDITION\n                            \n                        \n                        \n                            \n                                Value : CONDITION\n                            \n                        \n                        \n                            \n                                 DELAY\n                            \n                        \n                        \n                            \n                                Value : DELAY\n                            \n                        \n                        \n                            \n                                 LOOP\n                            \n                        \n                        \n                            \n                                Value : LOOP\n                            \n                        \n                        \n                            \n                                 HTTP_CALL\n                            \n                        \n                        \n                            \n                                Value : HTTP_CALL\n                            \n                        \n                        \n                            \n                                 MESSAGE_SEND\n                            \n                        \n                        \n                            \n                                Value : MESSAGE_SEND\n                            \n                        \n                        \n                            \n                                 DATABASE_WRITE\n                            \n                        \n                        \n                            \n                                Value : DATABASE_WRITE\n                            \n                        \n                        \n                            \n                                 BLOCKCHAIN_WRITE\n                            \n                        \n                        \n                            \n                                Value : BLOCKCHAIN_WRITE\n                            \n                        \n                        \n                            \n                                 FILE_WRITE\n                            \n                        \n                        \n                            \n                                Value : FILE_WRITE\n                            \n                        \n                        \n                            \n                                 MAGIC_WALLET\n                            \n                        \n                        \n                            \n                                Value : MAGIC_WALLET\n                            \n                        \n            \n        \n\n    /Users/argahv/Projects/personal/zyra/packages/types/src/wallet.ts\n    \n        \n            \n                \n                    \n                        \n                        ChainType\n                    \n                \n                    \n                        \n                            Type definitions for wallet integration in Zzyra\nThese types are used across UI and worker components for consistency\n\n                        \n                    \n                        \n                            \n                                 EVM\n                            \n                        \n                        \n                            \n                                Value : evm\n                            \n                        \n                        \n                            \n                                 SOLANA\n                            \n                        \n                        \n                            \n                                Value : solana\n                            \n                        \n            \n        \n\n    /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/custom-block.ts\n    \n        \n            \n                \n                    \n                        \n                        DataType\n                    \n                \n                    \n                        \n                            Data types for inputs/outputs\n\n                        \n                    \n                        \n                            \n                                 STRING\n                            \n                        \n                        \n                            \n                                Value : string\n                            \n                        \n                        \n                            \n                                 NUMBER\n                            \n                        \n                        \n                            \n                                Value : number\n                            \n                        \n                        \n                            \n                                 BOOLEAN\n                            \n                        \n                        \n                            \n                                Value : boolean\n                            \n                        \n                        \n                            \n                                 OBJECT\n                            \n                        \n                        \n                            \n                                Value : object\n                            \n                        \n                        \n                            \n                                 ARRAY\n                            \n                        \n                        \n                            \n                                Value : array\n                            \n                        \n                        \n                            \n                                 ANY\n                            \n                        \n                        \n                            \n                                Value : any\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ExecutionType\n                    \n                \n                    \n                        \n                            Logic execution types for custom blocks\n\n                        \n                    \n                        \n                            \n                                 FUNCTION\n                            \n                        \n                        \n                            \n                                Value : function\n                            \n                        \n                        \n                            \n                                 CODE\n                            \n                        \n                        \n                            \n                                Value : code\n                            \n                        \n                        \n                            \n                                 WEBHOOK\n                            \n                        \n                        \n                            \n                                Value : webhook\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        LogicType\n                    \n                \n                    \n                        \n                            Logic types for custom block execution\n\n                        \n                    \n                        \n                            \n                                 JAVASCRIPT\n                            \n                        \n                        \n                            \n                                Value : javascript\n                            \n                        \n                        \n                            \n                                 TYPESCRIPT\n                            \n                        \n                        \n                            \n                                Value : typescript\n                            \n                        \n                        \n                            \n                                 PYTHON\n                            \n                        \n                        \n                            \n                                Value : python\n                            \n                        \n                        \n                            \n                                 REST_API\n                            \n                        \n                        \n                            \n                                Value : rest-api\n                            \n                        \n                        \n                            \n                                 JSON_TRANSFORM\n                            \n                        \n                        \n                            \n                                Value : json-transform\n                            \n                        \n                        \n                            \n                                 TEMPLATE\n                            \n                        \n                        \n                            \n                                Value : template\n                            \n                        \n                        \n                            \n                                 CONDITION\n                            \n                        \n                        \n                            \n                                Value : condition\n                            \n                        \n            \n        \n\n    /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/categories.ts\n    \n        \n            \n                \n                    \n                        \n                        NodeCategory\n                    \n                \n                    \n                        \n                            Shared node type categories for workflow blocks\nUsed by both UI and worker components\n\n                        \n                    \n                        \n                            \n                                 TRIGGER\n                            \n                        \n                        \n                            \n                                Value : trigger\n                            \n                        \n                        \n                            \n                                 ACTION\n                            \n                        \n                        \n                            \n                                Value : action\n                            \n                        \n                        \n                            \n                                 LOGIC\n                            \n                        \n                        \n                            \n                                Value : logic\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nZyra API\nNestJS backend for the Zyra application.\nSetup\n\nInstall dependencies:\n\nExample :cd apps/api\nnpm install\nCreate a .env file based on .env.example:\n\nExample :cp src/.env.example .env\nStart the development server:\n\nExample :npm run start:devAPI Endpoints\nWorkflow Executions\n\nGET /api/executions - Get workflow executions\nQuery parameters:\nworkflowId (required) - ID of the workflow\nlimit - Number of records to return (default: 10)\noffset - Number of records to skip (default: 0)\nstatus - Filter by status (default: 'all')\nsortKey - Field to sort by (default: 'started_at')\nsortOrder - Sort order (default: 'desc')\n\n\n\n\n\nNode Executions\n\nGET /api/executions/nodes - Get node executions for a workflow execution\nQuery parameters:\nexecutionId (required) - ID of the workflow execution\n\n\n\n\n\nNode Logs\n\nGET /api/executions/node-logs - Get logs for a node execution\nQuery parameters:\nnodeExecutionId (required) - ID of the node execution\n\n\n\n\n\nExecution Actions\n\nPOST /api/executions/:id/retry - Retry a workflow execution\nPOST /api/executions/:id/cancel - Cancel a workflow execution\nPOST /api/executions/:id/pause - Pause a workflow execution\nPOST /api/executions/:id/resume - Resume a workflow execution\n\nDocumentation\nAPI documentation is available at /api/docs when the server is running.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AiModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BillingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlocksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DashboardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExecutionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NotificationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QueueModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WorkflowsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AiModule\n\n\n\ncluster_AiModule_exports\n\n\n\ncluster_AiModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BillingModule\n\n\n\ncluster_BillingModule_exports\n\n\n\ncluster_BillingModule_providers\n\n\n\ncluster_BlocksModule\n\n\n\ncluster_BlocksModule_exports\n\n\n\ncluster_BlocksModule_providers\n\n\n\ncluster_DashboardModule\n\n\n\ncluster_DashboardModule_exports\n\n\n\ncluster_DashboardModule_providers\n\n\n\ncluster_DatabaseModule\n\n\n\ncluster_DatabaseModule_exports\n\n\n\ncluster_DatabaseModule_providers\n\n\n\ncluster_ExecutionsModule\n\n\n\ncluster_ExecutionsModule_exports\n\n\n\ncluster_ExecutionsModule_providers\n\n\n\ncluster_NotificationsModule\n\n\n\ncluster_NotificationsModule_exports\n\n\n\ncluster_NotificationsModule_providers\n\n\n\ncluster_QueueModule\n\n\n\ncluster_QueueModule_exports\n\n\n\ncluster_QueueModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_WorkflowsModule\n\n\n\ncluster_WorkflowsModule_exports\n\n\n\ncluster_WorkflowsModule_providers\n\n\n\n\nAiService \n\nAiService \n\n\n\nAiModule\n\nAiModule\n\nAiService  -->\n\nAiModule->AiService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAiModule->AppModule\n\n\n\n\n\nAiService\n\nAiService\n\nAiModule -->\n\nAiService->AiModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nDatabaseAuthService \n\nDatabaseAuthService \n\nDatabaseAuthService  -->\n\nAuthModule->DatabaseAuthService \n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nBillingModule\n\nBillingModule\n\nAppModule -->\n\nBillingModule->AppModule\n\n\n\n\n\nBillingService \n\nBillingService \n\nBillingService  -->\n\nBillingModule->BillingService \n\n\n\n\n\nBlocksModule\n\nBlocksModule\n\nAppModule -->\n\nBlocksModule->AppModule\n\n\n\n\n\nBlocksService \n\nBlocksService \n\nBlocksService  -->\n\nBlocksModule->BlocksService \n\n\n\n\n\nDashboardModule\n\nDashboardModule\n\nAppModule -->\n\nDashboardModule->AppModule\n\n\n\n\n\nDashboardService \n\nDashboardService \n\nDashboardService  -->\n\nDashboardModule->DashboardService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAuthModule -->\n\nDatabaseModule->AuthModule\n\n\n\nBlocksModule -->\n\nDatabaseModule->BlocksModule\n\n\n\n\n\nExecutionsModule\n\nExecutionsModule\n\nExecutionsModule -->\n\nDatabaseModule->ExecutionsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nWorkflowsModule\n\nWorkflowsModule\n\nWorkflowsModule -->\n\nDatabaseModule->WorkflowsModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nExecutionRepository \n\nExecutionRepository \n\nExecutionRepository  -->\n\nDatabaseModule->ExecutionRepository \n\n\n\n\n\nNotificationRepository \n\nNotificationRepository \n\nNotificationRepository  -->\n\nDatabaseModule->NotificationRepository \n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nDatabaseModule->PrismaService \n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nDatabaseModule->UserRepository \n\n\n\n\n\nWalletRepository \n\nWalletRepository \n\nWalletRepository  -->\n\nDatabaseModule->WalletRepository \n\n\n\n\n\nWorkflowRepository \n\nWorkflowRepository \n\nWorkflowRepository  -->\n\nDatabaseModule->WorkflowRepository \n\n\n\nAppModule -->\n\nExecutionsModule->AppModule\n\n\n\n\n\nExecutionsService \n\nExecutionsService \n\nExecutionsService  -->\n\nExecutionsModule->ExecutionsService \n\n\n\n\n\nNodeExecutionsService \n\nNodeExecutionsService \n\nNodeExecutionsService  -->\n\nExecutionsModule->NodeExecutionsService \n\n\n\n\n\nNodeLogsService \n\nNodeLogsService \n\nNodeLogsService  -->\n\nExecutionsModule->NodeLogsService \n\n\n\n\n\nNotificationsModule\n\nNotificationsModule\n\nAppModule -->\n\nNotificationsModule->AppModule\n\n\n\n\n\nNotificationsService \n\nNotificationsService \n\nNotificationsService  -->\n\nNotificationsModule->NotificationsService \n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nWalletsService \n\nWalletsService \n\nWalletsService  -->\n\nUserModule->WalletsService \n\n\n\nAppModule -->\n\nWorkflowsModule->AppModule\n\n\n\n\n\nWorkflowsService \n\nWorkflowsService \n\nWorkflowsService  -->\n\nWorkflowsModule->WorkflowsService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nBillingService\n\nBillingService\n\nBillingModule -->\n\nBillingService->BillingModule\n\n\n\n\n\nBlocksService\n\nBlocksService\n\nBlocksModule -->\n\nBlocksService->BlocksModule\n\n\n\n\n\nDashboardService\n\nDashboardService\n\nDashboardModule -->\n\nDashboardService->DashboardModule\n\n\n\n\n\nExecutionRepository\n\nExecutionRepository\n\nDatabaseModule -->\n\nExecutionRepository->DatabaseModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nDatabaseModule -->\n\nPrismaService->DatabaseModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nDatabaseModule -->\n\nUserRepository->DatabaseModule\n\n\n\n\n\nWorkflowRepository\n\nWorkflowRepository\n\nDatabaseModule -->\n\nWorkflowRepository->DatabaseModule\n\n\n\n\n\nExecutionsService\n\nExecutionsService\n\nExecutionsModule -->\n\nExecutionsService->ExecutionsModule\n\n\n\n\n\nNodeExecutionsService\n\nNodeExecutionsService\n\nExecutionsModule -->\n\nNodeExecutionsService->ExecutionsModule\n\n\n\n\n\nNodeLogsService\n\nNodeLogsService\n\nExecutionsModule -->\n\nNodeLogsService->ExecutionsModule\n\n\n\n\n\nNotificationsService\n\nNotificationsService\n\nNotificationsModule -->\n\nNotificationsService->NotificationsModule\n\n\n\n\n\nQueueService \n\nQueueService \n\n\n\nQueueModule\n\nQueueModule\n\nWorkflowsModule -->\n\nQueueModule->WorkflowsModule\n\n\n\nQueueService  -->\n\nQueueModule->QueueService \n\n\n\n\n\nQueueService\n\nQueueService\n\nQueueModule -->\n\nQueueService->QueueModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nWalletsService\n\nWalletsService\n\nUserModule -->\n\nWalletsService->UserModule\n\n\n\n\n\nWorkflowsService\n\nWorkflowsService\n\nWorkflowsModule -->\n\nWorkflowsService->WorkflowsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        12 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    42 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    46 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            Description : NestJS API for Zyra\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthUser   (/.../types.ts)\n                        \n                        \n                            BlockchainTransactionCreateInput   (/.../wallet.repository.ts)\n                        \n                        \n                            ExecutionCreateInput   (/.../execution.repository.ts)\n                        \n                        \n                            ExecutionStatus   (/.../execution.ts)\n                        \n                        \n                            ExecutionUpdateInput   (/.../execution.repository.ts)\n                        \n                        \n                            ExecutionWithNodes   (/.../execution.repository.ts)\n                        \n                        \n                            PolicyEnforcer   (/.../policy-utils.ts)\n                        \n                        \n                            UserCreateInput   (/.../user.repository.ts)\n                        \n                        \n                            UserUpdateInput   (/.../user.repository.ts)\n                        \n                        \n                            UserWithProfile   (/.../user.repository.ts)\n                        \n                        \n                            UserWithProfileAndWallets   (/.../user.repository.ts)\n                        \n                        \n                            UserWithWallets   (/.../user.repository.ts)\n                        \n                        \n                            WalletTransactionCreateInput   (/.../wallet.repository.ts)\n                        \n                        \n                            WalletWithTransactions   (/.../wallet.repository.ts)\n                        \n                        \n                            WorkflowCreateInput   (/.../workflow.repository.ts)\n                        \n                        \n                            WorkflowUpdateInput   (/.../workflow.repository.ts)\n                        \n                        \n                            WorkflowWithExecutions   (/.../workflow.repository.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    /Users/argahv/Projects/personal/zyra/packages/database/src/auth/types.ts\n    \n    \n        \n            \n                \n                    \n                    AuthUser\n                \n            \n            \n                \n                    Auth user with profile\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/wallet.repository.ts\n    \n    \n        \n            \n                \n                    \n                    BlockchainTransactionCreateInput\n                \n            \n            \n                \n                            Prisma.BlockchainTransactionCreateInput\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WalletTransactionCreateInput\n                \n            \n            \n                \n                            Prisma.WalletTransactionCreateInput\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WalletWithTransactions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/execution.repository.ts\n    \n    \n        \n            \n                \n                    \n                    ExecutionCreateInput\n                \n            \n            \n                \n                            Prisma.WorkflowExecutionCreateInput\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExecutionUpdateInput\n                \n            \n            \n                \n                            Prisma.WorkflowExecutionUpdateInput\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExecutionWithNodes\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/execution.ts\n    \n    \n        \n            \n                \n                    \n                    ExecutionStatus\n                \n            \n            \n                \n                    Workflow execution types shared between UI and worker\n\n                \n            \n            \n                \n                        \"pending\" | \"running\" | \"completed\" | \"failed\"\n\n                \n            \n        \n    \n    /Users/argahv/Projects/personal/zyra/packages/database/src/policies/policy-utils.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyEnforcer\n                \n            \n            \n                \n                    Policy enforcer function type\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/user.repository.ts\n    \n    \n        \n            \n                \n                    \n                    UserCreateInput\n                \n            \n            \n                \n                            Prisma.UserCreateInput\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserUpdateInput\n                \n            \n            \n                \n                            Prisma.UserUpdateInput\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserWithProfile\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserWithProfileAndWallets\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UserWithWallets\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    /Users/argahv/Projects/personal/zyra/packages/database/src/repositories/workflow.repository.ts\n    \n    \n        \n            \n                \n                    \n                    WorkflowCreateInput\n                \n            \n            \n                \n                            Prisma.WorkflowCreateInput\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WorkflowUpdateInput\n                \n            \n            \n                \n                            Prisma.WorkflowUpdateInput\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WorkflowWithExecutions\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            authService   (/.../ui-auth-example.ts)\n                        \n                        \n                            authService   (/.../middleware.ts)\n                        \n                        \n                            authService   (/.../auth.middleware.ts)\n                        \n                        \n                            BLOCK_CATALOG   (/.../metadata.ts)\n                        \n                        \n                            blockSchemas   (/.../blockSchemas.ts)\n                        \n                        \n                            channel   (src/.../queue.service.ts)\n                        \n                        \n                            config   (/.../ui-auth-example.ts)\n                        \n                        \n                            DEFAULT_LIMIT   (/.../pagination.ts)\n                        \n                        \n                            DEFAULT_PAGE   (/.../pagination.ts)\n                        \n                        \n                            exchangeOptions   (src/.../queue.service.ts)\n                        \n                        \n                            EXECUTION_DELAYED_QUEUE   (src/.../queue.service.ts)\n                        \n                        \n                            EXECUTION_DLQ   (src/.../queue.service.ts)\n                        \n                        \n                            EXECUTION_QUEUE   (src/.../queue.service.ts)\n                        \n                        \n                            EXECUTION_RETRY_QUEUE   (src/.../queue.service.ts)\n                        \n                        \n                            EXECUTION_SCHEDULED_EXCHANGE   (src/.../queue.service.ts)\n                        \n                        \n                            executionRepository   (/.../worker-auth-example.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            jwtService   (/.../worker-auth-example.ts)\n                        \n                        \n                            jwtService   (/.../middleware.ts)\n                        \n                        \n                            jwtService   (/.../auth.middleware.ts)\n                        \n                        \n                            MAGIC_SECRET_KEY   (/.../magic.service.ts)\n                        \n                        \n                            magicServiceInstance   (/.../magic.service.ts)\n                        \n                        \n                            MAX_LIMIT   (/.../pagination.ts)\n                        \n                        \n                            MODEL_TO_USE   (src/.../ai.service.ts)\n                        \n                        \n                            policyService   (/.../worker-auth-example.ts)\n                        \n                        \n                            prisma   (/.../client.ts)\n                        \n                        \n                            prisma   (/.../index.ts)\n                        \n                        \n                            prisma   (/.../index.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            queueOptions   (src/.../queue.service.ts)\n                        \n                        \n                            RABBITMQ_URL   (src/.../queue.service.ts)\n                        \n                        \n                            workflowRepository   (/.../ui-auth-example.ts)\n                        \n                        \n                            workflowRepository   (/.../worker-auth-example.ts)\n                        \n                        \n                            WorkflowResponseSchema   (src/.../ai.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    /Users/argahv/Projects/personal/zyra/packages/database/examples/ui-auth-example.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new AuthService()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  matcher: ['/api/workflows/:path*', '/api/executions/:path*'],\n}\n                    \n                \n\n            \n                \n                    Middleware configuration for protected routes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        workflowRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WorkflowRepository()\n                    \n                \n\n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/database/src/auth/middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new AuthService()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new JwtService()\n                    \n                \n\n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/database/src/middleware/auth.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        authService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new AuthService()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new JwtService()\n                    \n                \n\n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/types/src/workflow/metadata.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BLOCK_CATALOG\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  // Legacy blocks\n  [BlockType.PRICE_MONITOR]: {\n    type: BlockType.PRICE_MONITOR,\n    label: \"Price Monitor\",\n    description: \"Monitor cryptocurrency prices\",\n    category: NodeCategory.TRIGGER,\n    icon: \"trending-up\",\n    defaultConfig: {\n      asset: \"ETHEREUM\",\n      condition: \"above\",\n      targetPrice: \"2000\",\n      checkInterval: \"5\",\n    },\n  },\n\n  [BlockType.EMAIL]: {\n    type: BlockType.EMAIL,\n    label: \"Email\",\n    description: \"Send email notifications\",\n    category: NodeCategory.ACTION,\n    icon: \"mail\",\n    defaultConfig: {\n      to: \"\",\n      subject: \"\",\n      body: \"\",\n    },\n  },\n\n  [BlockType.NOTIFICATION]: {\n    type: BlockType.NOTIFICATION,\n    label: \"Notification\",\n    description: \"Send push notifications\",\n    category: NodeCategory.ACTION,\n    icon: \"bell\",\n    defaultConfig: {\n      channel: \"in_app\",\n      title: \"\",\n      message: \"\",\n    },\n  },\n\n  [BlockType.SCHEDULE]: {\n    type: BlockType.SCHEDULE,\n    label: \"Schedule\",\n    description: \"Trigger workflows on a schedule\",\n    category: NodeCategory.TRIGGER,\n    icon: \"calendar\",\n    defaultConfig: {\n      interval: \"daily\",\n      time: \"09:00\",\n    },\n  },\n\n  [BlockType.WEBHOOK]: {\n    type: BlockType.WEBHOOK,\n    label: \"Webhook\",\n    description: \"Trigger workflows via HTTP webhook\",\n    category: NodeCategory.TRIGGER,\n    icon: \"webhook\",\n    defaultConfig: {\n      url: \"\",\n      method: \"POST\",\n    },\n  },\n\n  [BlockType.CONDITION]: {\n    type: BlockType.CONDITION,\n    label: \"Condition\",\n    description: \"Add conditional logic to workflows\",\n    category: NodeCategory.LOGIC,\n    icon: \"filter\",\n    defaultConfig: {\n      condition: \"\",\n    },\n  },\n\n  [BlockType.DELAY]: {\n    type: BlockType.DELAY,\n    label: \"Delay\",\n    description: \"Add a delay to workflow execution\",\n    category: NodeCategory.LOGIC,\n    icon: \"clock\",\n    defaultConfig: {\n      duration: 5,\n      unit: \"minutes\",\n    },\n  },\n\n  // Generic blocks\n  [BlockType.HTTP_REQUEST]: {\n    type: BlockType.HTTP_REQUEST,\n    label: \"HTTP Request\",\n    description: \"Make HTTP requests to any API endpoint\",\n    category: NodeCategory.ACTION,\n    icon: \"globe\",\n    defaultConfig: {\n      url: \"\",\n      method: \"GET\",\n      headers: {},\n      retries: 3,\n      timeout: 10000,\n    },\n  },\n\n  [BlockType.CALCULATOR]: {\n    type: BlockType.CALCULATOR,\n    label: \"Calculator\",\n    description: \"Perform arithmetic operations and calculations\",\n    category: NodeCategory.LOGIC,\n    icon: \"calculator\",\n    defaultConfig: {\n      operation: \"add\",\n      inputs: {},\n      precision: 8,\n    },\n  },\n\n  [BlockType.COMPARATOR]: {\n    type: BlockType.COMPARATOR,\n    label: \"Comparator\",\n    description: \"Compare values with conditions and logical operators\",\n    category: NodeCategory.LOGIC,\n    icon: \"scale\",\n    defaultConfig: {\n      operation: \"equals\",\n      inputs: {\n        left: \"\",\n        right: \"\",\n      },\n    },\n  },\n\n  [BlockType.BLOCKCHAIN_READ]: {\n    type: BlockType.BLOCKCHAIN_READ,\n    label: \"Blockchain Read\",\n    description: \"Read data from blockchain networks\",\n    category: NodeCategory.ACTION,\n    icon: \"database\",\n    defaultConfig: {\n      operation: \"get_balance\",\n      network: \"ethereum\",\n      address: \"\",\n      retries: 3,\n    },\n  },\n\n  // Data Input/Output\n  [BlockType.DATABASE_QUERY]: {\n    type: BlockType.DATABASE_QUERY,\n    label: \"Database Query\",\n    description: \"Query database for information\",\n    category: NodeCategory.ACTION,\n    icon: \"database\",\n    defaultConfig: {\n      query: \"\",\n    },\n  },\n\n  [BlockType.FILE_READ]: {\n    type: BlockType.FILE_READ,\n    label: \"File Read\",\n    description: \"Read content from files\",\n    category: NodeCategory.ACTION,\n    icon: \"file-text\",\n    defaultConfig: {\n      path: \"\",\n      encoding: \"utf8\",\n    },\n  },\n\n  // Processing\n  [BlockType.TRANSFORMER]: {\n    type: BlockType.TRANSFORMER,\n    label: \"Transformer\",\n    description: \"Transform and manipulate data\",\n    category: NodeCategory.LOGIC,\n    icon: \"shuffle\",\n    defaultConfig: {\n      transformType: \"map\",\n      rules: [],\n      outputFormat: \"json\",\n    },\n  },\n\n  [BlockType.AGGREGATOR]: {\n    type: BlockType.AGGREGATOR,\n    label: \"Aggregator\",\n    description: \"Aggregate and analyze data\",\n    category: NodeCategory.LOGIC,\n    icon: \"pie-chart\",\n    defaultConfig: {\n      operation: \"count\",\n    },\n  },\n\n  // Logic\n  [BlockType.LOOP]: {\n    type: BlockType.LOOP,\n    label: \"Loop\",\n    description: \"Repeat actions with loop logic\",\n    category: NodeCategory.LOGIC,\n    icon: \"repeat\",\n    defaultConfig: {\n      loopType: \"for\",\n      iterations: 1,\n    },\n  },\n\n  // External Actions\n  [BlockType.HTTP_CALL]: {\n    type: BlockType.HTTP_CALL,\n    label: \"HTTP Call\",\n    description: \"Make HTTP calls to external services\",\n    category: NodeCategory.ACTION,\n    icon: \"send\",\n    defaultConfig: {\n      url: \"\",\n      method: \"POST\",\n      retries: 3,\n    },\n  },\n\n  [BlockType.MESSAGE_SEND]: {\n    type: BlockType.MESSAGE_SEND,\n    label: \"Message Send\",\n    description: \"Send messages via various channels\",\n    category: NodeCategory.ACTION,\n    icon: \"message-square\",\n    defaultConfig: {\n      channel: \"email\",\n      recipient: \"\",\n      message: \"\",\n    },\n  },\n\n  [BlockType.DATABASE_WRITE]: {\n    type: BlockType.DATABASE_WRITE,\n    label: \"Database Write\",\n    description: \"Write data to database\",\n    category: NodeCategory.ACTION,\n    icon: \"database\",\n    defaultConfig: {\n      operation: \"insert\",\n      table: \"\",\n      data: {},\n    },\n  },\n\n  [BlockType.BLOCKCHAIN_WRITE]: {\n    type: BlockType.BLOCKCHAIN_WRITE,\n    label: \"Blockchain Write\",\n    description: \"Write transactions to blockchain\",\n    category: NodeCategory.ACTION,\n    icon: \"link\",\n    defaultConfig: {\n      operation: \"send_transaction\",\n      network: \"ethereum\",\n    },\n  },\n\n  [BlockType.FILE_WRITE]: {\n    type: BlockType.FILE_WRITE,\n    label: \"File Write\",\n    description: \"Write content to files\",\n    category: NodeCategory.ACTION,\n    icon: \"file-plus\",\n    defaultConfig: {\n      path: \"\",\n      content: \"\",\n      encoding: \"utf8\",\n    },\n  },\n\n  // Unknown fallback\n  [BlockType.UNKNOWN]: {\n    type: BlockType.UNKNOWN,\n    label: \"Unknown\",\n    description: \"Unknown block type\",\n    category: NodeCategory.ACTION,\n    icon: \"help-circle\",\n    defaultConfig: {},\n  },\n}\n                    \n                \n\n            \n                \n                    Shared block catalog with common metadata for all block types\nThis serves as the single source of truth for block metadata\n\n                \n            \n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/types/src/schemas/blockSchemas.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        blockSchemas\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  [BlockType.PRICE_MONITOR]: z.object({\n    asset: z.string().min(1),\n    condition: z.enum([\"above\", \"below\", \"equals\", \"change\"]).optional(),\n    targetPrice: z.string().optional(),\n    checkInterval: z.string().optional(),\n    dataSource: z\n      .enum([\"coingecko\", \"coinmarketcap\", \"binance\"])\n      .default(\"coingecko\"),\n  }),\n\n  [BlockType.EMAIL]: z.object({\n    to: z.string().email(),\n    subject: z.string().min(1),\n    body: z.string().min(1),\n    cc: z.string().email().optional(),\n    template: z.string().optional(),\n  }),\n\n  [BlockType.NOTIFICATION]: z.object({\n    channel: z.enum([\"email\", \"push\", \"sms\", \"in_app\"]).default(\"in_app\"),\n    title: z.string().min(1),\n    message: z.string().min(1),\n  }),\n\n  [BlockType.CONDITION]: z.object({\n    condition: z.string().min(1),\n    description: z.string().optional(),\n  }),\n\n  [BlockType.DELAY]: z.object({\n    duration: z.number().positive(),\n    unit: z.enum([\"seconds\", \"minutes\", \"hours\", \"days\"]).default(\"minutes\"),\n  }),\n\n  [BlockType.SCHEDULE]: z.object({\n    interval: z\n      .enum([\"once\", \"minutely\", \"hourly\", \"daily\", \"weekly\", \"monthly\"])\n      .default(\"daily\"),\n    time: z.string().optional(),\n    cron: z.string().optional(),\n    timezone: z.string().optional(),\n  }),\n\n  [BlockType.WEBHOOK]: z.object({\n    url: z.string().url(),\n    method: z.enum([\"GET\", \"POST\", \"PUT\", \"DELETE\"]).default(\"POST\"),\n    headers: z.record(z.string()).optional(),\n    body: z.string().optional(),\n  }),\n\n  [BlockType.UNKNOWN]: z.any(),\n\n  // Generic block schemas\n  [BlockType.HTTP_REQUEST]: z.object({\n    url: z.string().url(),\n    method: z.enum([\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]).default(\"GET\"),\n    headers: z.record(z.string()).optional(),\n    body: z.any().optional(),\n    dataPath: z.string().optional(),\n    retries: z.number().default(3),\n    timeout: z.number().default(10000),\n  }),\n\n  [BlockType.CALCULATOR]: z.object({\n    operation: z\n      .enum([\n        \"add\",\n        \"subtract\",\n        \"multiply\",\n        \"divide\",\n        \"percentage\",\n        \"percentageOf\",\n        \"average\",\n        \"min\",\n        \"max\",\n        \"sum\",\n        \"round\",\n        \"floor\",\n        \"ceil\",\n        \"abs\",\n        \"sqrt\",\n        \"power\",\n      ])\n      .optional(),\n    inputs: z.record(z.any()).optional(),\n    formula: z.string().optional(),\n    precision: z.number().default(8),\n  }),\n\n  [BlockType.COMPARATOR]: z.object({\n    operation: z\n      .enum([\n        \"equals\",\n        \"eq\",\n        \"not_equals\",\n        \"neq\",\n        \"greater_than\",\n        \"gt\",\n        \"greater_than_or_equal\",\n        \"gte\",\n        \"less_than\",\n        \"lt\",\n        \"less_than_or_equal\",\n        \"lte\",\n        \"between\",\n        \"not_between\",\n        \"in\",\n        \"not_in\",\n        \"contains\",\n        \"not_contains\",\n        \"starts_with\",\n        \"ends_with\",\n        \"is_null\",\n        \"is_not_null\",\n        \"is_empty\",\n        \"is_not_empty\",\n        \"regex_match\",\n      ])\n      .optional(),\n    inputs: z.record(z.any()).optional(),\n    conditions: z\n      .array(\n        z.object({\n          operation: z.string(),\n          inputs: z.record(z.any()),\n          logicalOperator: z.enum([\"and\", \"or\", \"&&\", \"||\"]).optional(),\n        })\n      )\n      .optional(),\n  }),\n\n  [BlockType.BLOCKCHAIN_READ]: z.object({\n    operation: z.enum([\n      \"get_balance\",\n      \"get_token_balance\",\n      \"get_token_info\",\n      \"get_nft_balance\",\n      \"call_contract\",\n      \"get_transaction\",\n      \"get_transaction_receipt\",\n      \"get_block\",\n      \"get_logs\",\n    ]),\n    network: z\n      .enum([\n        \"ethereum\",\n        \"polygon\",\n        \"base\",\n        \"optimism\",\n        \"arbitrum\",\n        \"bsc\",\n        \"sepolia\",\n        \"base_sepolia\",\n        \"polygon-amoy\",\n      ])\n      .default(\"ethereum\"),\n    address: z.string().optional(),\n    tokenAddress: z.string().optional(),\n    contractAddress: z.string().optional(),\n    methodName: z.string().optional(),\n    methodParams: z.array(z.any()).optional(),\n    transactionHash: z.string().optional(),\n    txHash: z.string().optional(), // Alternative field name for compatibility\n    blockNumber: z.string().optional(),\n    tokenId: z.string().optional(),\n    retries: z.number().default(3),\n  }),\n\n  // Data Input/Output\n  [BlockType.DATABASE_QUERY]: z.object({\n    query: z.string().min(1),\n    parameters: z.record(z.any()).optional(),\n    database: z.string().optional(),\n  }),\n\n  [BlockType.FILE_READ]: z.object({\n    path: z.string().min(1),\n    encoding: z.enum([\"utf8\", \"base64\", \"binary\"]).default(\"utf8\"),\n    maxSize: z.number().optional(),\n  }),\n\n  // Processing\n  [BlockType.TRANSFORMER]: z.object({\n    transformType: z.enum([\"map\", \"filter\", \"reduce\", \"sort\", \"group\"]),\n    rules: z.array(z.any()),\n    outputFormat: z.enum([\"json\", \"array\", \"object\"]).default(\"json\"),\n  }),\n\n  [BlockType.AGGREGATOR]: z.object({\n    operation: z.enum([\"count\", \"sum\", \"average\", \"min\", \"max\", \"group_by\"]),\n    field: z.string().optional(),\n    groupBy: z.string().optional(),\n  }),\n\n  // Logic\n  [BlockType.LOOP]: z.object({\n    loopType: z.enum([\"for\", \"while\", \"forEach\"]),\n    condition: z.string().optional(),\n    iterations: z.number().optional(),\n    items: z.array(z.any()).optional(),\n  }),\n\n  // External Actions\n  [BlockType.HTTP_CALL]: z.object({\n    url: z.string().url(),\n    method: z.enum([\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"]).default(\"POST\"),\n    headers: z.record(z.string()).optional(),\n    body: z.any().optional(),\n    retries: z.number().default(3),\n  }),\n\n  [BlockType.MESSAGE_SEND]: z.object({\n    channel: z.enum([\"email\", \"sms\", \"push\", \"slack\", \"discord\", \"webhook\"]),\n    recipient: z.string().min(1),\n    subject: z.string().optional(),\n    message: z.string().min(1),\n    template: z.string().optional(),\n  }),\n\n  [BlockType.DATABASE_WRITE]: z.object({\n    operation: z.enum([\"insert\", \"update\", \"delete\", \"upsert\"]),\n    table: z.string().min(1),\n    data: z.record(z.any()),\n    conditions: z.record(z.any()).optional(),\n  }),\n\n  [BlockType.BLOCKCHAIN_WRITE]: z.object({\n    operation: z.enum([\"send_transaction\", \"deploy_contract\", \"call_contract\"]),\n    network: z\n      .enum([\"ethereum\", \"polygon\", \"base-sepolia\", \"sepolia\", \"polygon-amoy\"])\n      .default(\"ethereum\"),\n    to: z.string().optional(),\n    value: z.string().optional(),\n    data: z.string().optional(),\n    gasLimit: z.string().optional(),\n    gasPrice: z.string().optional(),\n  }),\n\n  [BlockType.FILE_WRITE]: z.object({\n    path: z.string().min(1),\n    content: z.string(),\n    encoding: z.enum([\"utf8\", \"base64\", \"binary\"]).default(\"utf8\"),\n    append: z.boolean().default(false),\n  }),\n  \n  // Wallet Operations\n  [BlockType.MAGIC_WALLET]: z.object({\n    operation: z.enum([\"get_balance\", \"prepare_transaction\"]),\n    parameters: z.object({\n      userId: z.string(),\n      asset: z.string(),\n      chainId: z.union([z.string(), z.number()]),\n      // Additional parameters for prepare_transaction\n      to: z.string().optional(),\n      value: z.union([z.string(), z.number()]).optional(),\n      data: z.string().optional(),\n      gasLimit: z.union([z.string(), z.number()]).optional(),\n    }),\n  }),\n}\n                    \n                \n\n            \n                \n                    Zod schemas for block configurations\nShared between UI and worker for consistent validation\n\n                \n            \n\n        \n    \n\n    src/queue/queue.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        channel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exchangeOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: EXECUTION_SCHEDULED_EXCHANGE,\n    type: \"direct\",\n    durable: true,\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXECUTION_DELAYED_QUEUE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"ZYRA.EXECUTION_QUEUE.DELAYED\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXECUTION_DLQ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"ZYRA.EXECUTION_QUEUE.DLQ\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXECUTION_QUEUE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"ZYRA.EXECUTION_QUEUE\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXECUTION_RETRY_QUEUE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"ZYRA.EXECUTION_QUEUE.RETRY\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXECUTION_SCHEDULED_EXCHANGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"ZYRA.EXECUTION_SCHEDULED\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        queueOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    name: EXECUTION_QUEUE,\n    durable: true,\n    options: {\n      deadLetterExchange: \"\",\n      deadLetterRoutingKey: EXECUTION_DLQ,\n    },\n  },\n  { name: EXECUTION_RETRY_QUEUE, durable: true },\n  { name: EXECUTION_DLQ, durable: true },\n  {\n    name: EXECUTION_DELAYED_QUEUE,\n    durable: true,\n    options: {\n      deadLetterExchange: \"\",\n      deadLetterRoutingKey: EXECUTION_QUEUE, // Route to main queue when TTL expires\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RABBITMQ_URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.RABBITMQ_URL || \"amqp://guest:guest@localhost:5672\"\n                    \n                \n\n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/database/src/utils/pagination.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_LIMIT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_PAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n\n            \n                \n                    Default pagination parameters\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_LIMIT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n\n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/database/examples/worker-auth-example.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        executionRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ExecutionRepository()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwtService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new JwtService()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        policyService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new PolicyService()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        workflowRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WorkflowRepository()\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/database/src/auth/magic.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MAGIC_SECRET_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.MAGIC_SECRET_KEY || \"test-key\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        magicServiceInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MagicService | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n\n\n        \n    \n\n    src/ai/ai.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MODEL_TO_USE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"gpt-4o-mini\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        WorkflowResponseSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  nodes: z.array(\n    z.object({\n      id: z.string(),\n      type: z.string().default(\"custom\"),\n      position: z.object({ x: z.number(), y: z.number() }),\n      data: z.object({\n        blockType: z.nativeEnum(BlockType),\n        label: z.string(),\n        description: z.string().optional(),\n        nodeType: z.enum([\"TRIGGER\", \"ACTION\", \"LOGIC\"]),\n        iconName: z.string(),\n        isEnabled: z.boolean().default(true),\n        config: z.record(z.unknown()).optional(),\n        inputs: z.array(z.unknown()).default([]),\n        outputs: z.array(z.unknown()).default([]),\n      }),\n    })\n  ),\n  edges: z.array(\n    z.object({\n      id: z.string(),\n      source: z.string(),\n      target: z.string(),\n      sourceHandle: z.string().optional(),\n      targetHandle: z.string().optional(),\n      type: z.string().default(\"custom\"),\n      animated: z.boolean().default(false),\n    })\n  ),\n})\n                    \n                \n\n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/database/src/client.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PrismaClient\n\n                    \n                \n\n\n        \n    \n\n    /Users/argahv/Projects/personal/zyra/packages/database/src/client/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PrismaClient | undefined\n\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Default value : global.prisma ||\n  new PrismaClient({\n    // log:\n    //   process.env.NODE_ENV === \"development\"\n    //     ? [\"query\", \"error\", \"warn\"]\n    //     : [\"error\"],\n  })\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
